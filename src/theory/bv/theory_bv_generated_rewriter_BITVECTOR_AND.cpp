#include "options/bv_options.h"
#include "options/main_options.h"
#include "theory/bv/theory_bv_special_rewriter.h"
#include "theory/theory.h"
#include "theory/bv/theory_bv_utils.h"

using namespace CVC4;
using namespace CVC4::theory;
using namespace CVC4::theory::bv;

Node rewrite_563_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_72(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_73(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_74(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_75(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_76(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_77(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_78(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_79(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_80(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_81(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_82(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_83(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_84(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_85(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_86(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_87(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_88(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_89(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_90(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_91(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_92(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_93(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_94(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_563_95(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[563]++;
  return utils::mkSpecialFixedWidth(children, 563);
}
Node rewrite_574_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_574_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[574]++;
  return utils::mkSpecialFixedWidth(children, 574);
}
Node rewrite_535_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_535_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[535]++;
  return utils::mkSpecialFixedWidth(children, 535);
}
Node rewrite_542_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_542_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[542]++;
  return utils::mkSpecialFixedWidth(children, 542);
}
Node rewrite_544_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_544_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[544]++;
  return utils::mkSpecialFixedWidth(children, 544);
}
Node rewrite_546_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_546_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[546]++;
  return utils::mkSpecialFixedWidth(children, 546);
}
Node rewrite_547_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_547_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[547]++;
  return utils::mkSpecialFixedWidth(children, 547);
}
Node rewrite_556_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_556_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[556]++;
  return utils::mkSpecialFixedWidth(children, 556);
}
Node rewrite_557_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_557_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[557]++;
  return utils::mkSpecialFixedWidth(children, 557);
}
Node rewrite_559_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_559_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[559]++;
  return utils::mkSpecialFixedWidth(children, 559);
}
Node rewrite_565_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_565_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[565]++;
  return utils::mkSpecialFixedWidth(children, 565);
}
Node rewrite_566_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_566_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[566]++;
  return utils::mkSpecialFixedWidth(children, 566);
}
Node rewrite_577_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_577_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[577]++;
  return utils::mkSpecialFixedWidth(children, 577);
}
Node rewrite_579_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_579_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[579]++;
  return utils::mkSpecialFixedWidth(children, 579);
}
Node rewrite_583_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_583_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[583]++;
  return utils::mkSpecialFixedWidth(children, 583);
}
Node rewrite_584_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_584_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[584]++;
  return utils::mkSpecialFixedWidth(children, 584);
}
Node rewrite_588_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_588_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[588]++;
  return utils::mkSpecialFixedWidth(children, 588);
}
Node rewrite_598_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_598_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[598]++;
  return utils::mkSpecialFixedWidth(children, 598);
}
Node rewrite_599_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_599_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[599]++;
  return utils::mkSpecialFixedWidth(children, 599);
}
Node rewrite_603_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_603_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[603]++;
  return utils::mkSpecialFixedWidth(children, 603);
}
Node rewrite_607_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_607_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[607]++;
  return utils::mkSpecialFixedWidth(children, 607);
}
Node rewrite_611_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_611_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[611]++;
  return utils::mkSpecialFixedWidth(children, 611);
}
Node rewrite_614_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_614_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[614]++;
  return utils::mkSpecialFixedWidth(children, 614);
}
Node rewrite_620_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][1][0]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][1][0]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][1][0]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][1][0]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_620_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[620]++;
  return utils::mkSpecialFixedWidth(children, 620);
}
Node rewrite_622_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_622_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[622]++;
  return utils::mkSpecialFixedWidth(children, 622);
}
Node rewrite_623_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0][0]);
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][1][0]);
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][1][0]);
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0][0]);
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0][0]);
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0][0]);
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][1][0]);
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][1][0]);
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_623_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[623]++;
  return utils::mkSpecialFixedWidth(children, 623);
}
Node rewrite_626_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_626_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[626]++;
  return utils::mkSpecialFixedWidth(children, 626);
}
Node rewrite_638_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][1][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][1][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_638_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[638]++;
  return utils::mkSpecialFixedWidth(children, 638);
}
Node rewrite_639_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_639_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[639]++;
  return utils::mkSpecialFixedWidth(children, 639);
}
Node rewrite_640_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][1]);
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][1][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][0][1]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][1]);
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][1]);
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][1]);
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][0][1]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][1]);
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][1][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][1][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][1]);
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][1][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][1][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][1]);
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][1]);
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][1]);
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][1]);
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][1]);
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][1]);
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][1]);
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][1][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][0][1]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][1]);
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][1][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][1]);
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][1][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][0][1]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_640_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][1]);
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[640]++;
  return utils::mkSpecialFixedWidth(children, 640);
}
Node rewrite_652_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][2][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][2][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][2][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][2][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][2][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][2][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][2][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][2][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][2][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][2][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][2][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][2][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][2][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][2][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][2][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_652_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][2][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[652]++;
  return utils::mkSpecialFixedWidth(children, 652);
}
Node rewrite_656_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0][0]);
  children.push_back(node[1][1][2][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][1]);
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][1]);
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0][1]);
  children.push_back(node[1][1][2][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0][1]);
  children.push_back(node[0][1][2][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0][1]);
  children.push_back(node[0][1][2][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0][0]);
  children.push_back(node[1][1][2][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0][1]);
  children.push_back(node[1][1][2][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][1]);
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0][0]);
  children.push_back(node[0][1][2][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][1]);
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0][0]);
  children.push_back(node[0][1][2][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_656_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[656]++;
  return utils::mkSpecialFixedWidth(children, 656);
}
Node rewrite_661_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0][0]);
  children.push_back(node[2][1][1][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][1]);
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][1]);
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][1]);
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][1][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][1]);
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0][0]);
  children.push_back(node[2][1][1][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][1]);
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0][0]);
  children.push_back(node[2][0][1][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0][1]);
  children.push_back(node[2][1][1][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0][1]);
  children.push_back(node[2][1][1][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_661_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][1]);
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[661]++;
  return utils::mkSpecialFixedWidth(children, 661);
}
Node rewrite_664_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_664_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[664]++;
  return utils::mkSpecialFixedWidth(children, 664);
}
Node rewrite_665_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][1]);
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1][1]);
  children.push_back(node[0][1][1][1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1][0]);
  children.push_back(node[1][1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][1][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][1][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][1]);
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][1]);
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][1]);
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1][1]);
  children.push_back(node[1][1][1][1][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1][0]);
  children.push_back(node[0][1][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][1]);
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][1]);
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_665_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[665]++;
  return utils::mkSpecialFixedWidth(children, 665);
}
Node rewrite_677_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_677_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[677]++;
  return utils::mkSpecialFixedWidth(children, 677);
}
Node rewrite_690_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_690_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[690]++;
  return utils::mkSpecialFixedWidth(children, 690);
}
Node rewrite_536_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_536_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[536]++;
  return utils::mkSpecialFixedWidth(children, 536);
}
Node rewrite_537_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_537_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[537]++;
  return utils::mkSpecialFixedWidth(children, 537);
}
Node rewrite_539_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_539_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[539]++;
  return utils::mkSpecialFixedWidth(children, 539);
}
Node rewrite_550_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_550_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[550]++;
  return utils::mkSpecialFixedWidth(children, 550);
}
Node rewrite_554_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_554_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[554]++;
  return utils::mkSpecialFixedWidth(children, 554);
}
Node rewrite_564_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_564_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[564]++;
  return utils::mkSpecialFixedWidth(children, 564);
}
Node rewrite_573_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_573_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[573]++;
  return utils::mkSpecialFixedWidth(children, 573);
}
Node rewrite_575_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_575_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[575]++;
  return utils::mkSpecialFixedWidth(children, 575);
}
Node rewrite_578_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_578_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[578]++;
  return utils::mkSpecialFixedWidth(children, 578);
}
Node rewrite_580_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_580_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[580]++;
  return utils::mkSpecialFixedWidth(children, 580);
}
Node rewrite_586_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_586_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[586]++;
  return utils::mkSpecialFixedWidth(children, 586);
}
Node rewrite_589_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_589_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[589]++;
  return utils::mkSpecialFixedWidth(children, 589);
}
Node rewrite_593_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_593_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[593]++;
  return utils::mkSpecialFixedWidth(children, 593);
}
Node rewrite_600_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_600_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[600]++;
  return utils::mkSpecialFixedWidth(children, 600);
}
Node rewrite_608_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_608_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[608]++;
  return utils::mkSpecialFixedWidth(children, 608);
}
Node rewrite_628_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_628_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[628]++;
  return utils::mkSpecialFixedWidth(children, 628);
}
Node rewrite_635_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_635_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[635]++;
  return utils::mkSpecialFixedWidth(children, 635);
}
Node rewrite_637_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_637_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[637]++;
  return utils::mkSpecialFixedWidth(children, 637);
}
Node rewrite_643_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_643_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[643]++;
  return utils::mkSpecialFixedWidth(children, 643);
}
Node rewrite_646_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0][0]);
  children.push_back(node[0][1][1][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0][0]);
  children.push_back(node[1][1][1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0][0]);
  children.push_back(node[1][1][0][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_646_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0][0]);
  children.push_back(node[0][1][0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[646]++;
  return utils::mkSpecialFixedWidth(children, 646);
}
Node rewrite_657_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][0][1]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][1][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][1]);
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][1]);
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][1]);
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][1][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][1]);
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][0][1]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][1]);
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_657_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][0][1]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[657]++;
  return utils::mkSpecialFixedWidth(children, 657);
}
Node rewrite_663_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_663_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[663]++;
  return utils::mkSpecialFixedWidth(children, 663);
}
Node rewrite_668_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_668_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[668]++;
  return utils::mkSpecialFixedWidth(children, 668);
}
Node rewrite_670_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_670_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[670]++;
  return utils::mkSpecialFixedWidth(children, 670);
}
Node rewrite_678_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_678_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[678]++;
  return utils::mkSpecialFixedWidth(children, 678);
}
Node rewrite_686_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][2][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][2][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][2][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][2][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_686_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[686]++;
  return utils::mkSpecialFixedWidth(children, 686);
}
Node rewrite_695_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_695_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[695]++;
  return utils::mkSpecialFixedWidth(children, 695);
}
Node rewrite_697_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_697_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[697]++;
  return utils::mkSpecialFixedWidth(children, 697);
}
Node rewrite_700_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_700_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[700]++;
  return utils::mkSpecialFixedWidth(children, 700);
}
Node rewrite_701_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_701_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[701]++;
  return utils::mkSpecialFixedWidth(children, 701);
}
Node rewrite_381_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_381_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[381]++;
  return utils::mkSpecialFixedWidth(children, 381);
}
Node rewrite_408_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_408_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[408]++;
  return utils::mkSpecialFixedWidth(children, 408);
}
Node rewrite_409_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_409_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[409]++;
  return utils::mkSpecialFixedWidth(children, 409);
}
Node rewrite_422_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2][1]);
  children.push_back(node[2][0][2][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][1]);
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_422_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[422]++;
  return utils::mkSpecialFixedWidth(children, 422);
}
Node rewrite_429_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][1]);
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][1]);
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_429_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[429]++;
  return utils::mkSpecialFixedWidth(children, 429);
}
Node rewrite_457_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_457_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[457]++;
  return utils::mkSpecialFixedWidth(children, 457);
}
Node rewrite_466_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][2]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][2]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][2]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_466_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[466]++;
  return utils::mkSpecialFixedWidth(children, 466);
}
Node rewrite_504_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_504_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[504]++;
  return utils::mkSpecialFixedWidth(children, 504);
}
Node rewrite_613_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[613]++;
  return utils::mkSpecialFixedWidth(children, 613);
}
Node rewrite_613_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[613]++;
  return utils::mkSpecialFixedWidth(children, 613);
}
Node rewrite_613_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[613]++;
  return utils::mkSpecialFixedWidth(children, 613);
}
Node rewrite_613_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[613]++;
  return utils::mkSpecialFixedWidth(children, 613);
}
Node rewrite_613_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[613]++;
  return utils::mkSpecialFixedWidth(children, 613);
}
Node rewrite_613_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[613]++;
  return utils::mkSpecialFixedWidth(children, 613);
}
Node rewrite_613_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[613]++;
  return utils::mkSpecialFixedWidth(children, 613);
}
Node rewrite_613_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[613]++;
  return utils::mkSpecialFixedWidth(children, 613);
}
Node rewrite_655_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[655]++;
  return utils::mkSpecialFixedWidth(children, 655);
}
Node rewrite_655_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[655]++;
  return utils::mkSpecialFixedWidth(children, 655);
}
Node rewrite_655_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[655]++;
  return utils::mkSpecialFixedWidth(children, 655);
}
Node rewrite_655_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[655]++;
  return utils::mkSpecialFixedWidth(children, 655);
}
Node rewrite_655_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[655]++;
  return utils::mkSpecialFixedWidth(children, 655);
}
Node rewrite_655_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[655]++;
  return utils::mkSpecialFixedWidth(children, 655);
}
Node rewrite_655_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[655]++;
  return utils::mkSpecialFixedWidth(children, 655);
}
Node rewrite_655_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[655]++;
  return utils::mkSpecialFixedWidth(children, 655);
}
Node rewrite_666_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[666]++;
  return utils::mkSpecialFixedWidth(children, 666);
}
Node rewrite_666_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[666]++;
  return utils::mkSpecialFixedWidth(children, 666);
}
Node rewrite_666_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[666]++;
  return utils::mkSpecialFixedWidth(children, 666);
}
Node rewrite_666_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[666]++;
  return utils::mkSpecialFixedWidth(children, 666);
}
Node rewrite_666_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[666]++;
  return utils::mkSpecialFixedWidth(children, 666);
}
Node rewrite_666_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[666]++;
  return utils::mkSpecialFixedWidth(children, 666);
}
Node rewrite_666_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[666]++;
  return utils::mkSpecialFixedWidth(children, 666);
}
Node rewrite_666_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[666]++;
  return utils::mkSpecialFixedWidth(children, 666);
}
Node rewrite_674_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[674]++;
  return utils::mkSpecialFixedWidth(children, 674);
}
Node rewrite_674_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[674]++;
  return utils::mkSpecialFixedWidth(children, 674);
}
Node rewrite_674_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[674]++;
  return utils::mkSpecialFixedWidth(children, 674);
}
Node rewrite_674_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[674]++;
  return utils::mkSpecialFixedWidth(children, 674);
}
Node rewrite_674_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[674]++;
  return utils::mkSpecialFixedWidth(children, 674);
}
Node rewrite_674_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[674]++;
  return utils::mkSpecialFixedWidth(children, 674);
}
Node rewrite_674_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[674]++;
  return utils::mkSpecialFixedWidth(children, 674);
}
Node rewrite_674_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[674]++;
  return utils::mkSpecialFixedWidth(children, 674);
}
Node rewrite_684_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_684_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[684]++;
  return utils::mkSpecialFixedWidth(children, 684);
}
Node rewrite_687_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_687_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[687]++;
  return utils::mkSpecialFixedWidth(children, 687);
}
Node rewrite_698_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_698_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[698]++;
  return utils::mkSpecialFixedWidth(children, 698);
}
Node rewrite_380_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_380_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[380]++;
  return utils::mkSpecialFixedWidth(children, 380);
}
Node rewrite_383_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_383_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[383]++;
  return utils::mkSpecialFixedWidth(children, 383);
}
Node rewrite_384_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_384_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[384]++;
  return utils::mkSpecialFixedWidth(children, 384);
}
Node rewrite_391_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_391_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[391]++;
  return utils::mkSpecialFixedWidth(children, 391);
}
Node rewrite_397_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_397_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[397]++;
  return utils::mkSpecialFixedWidth(children, 397);
}
Node rewrite_398_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_398_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[398]++;
  return utils::mkSpecialFixedWidth(children, 398);
}
Node rewrite_404_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_404_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[404]++;
  return utils::mkSpecialFixedWidth(children, 404);
}
Node rewrite_412_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_412_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[412]++;
  return utils::mkSpecialFixedWidth(children, 412);
}
Node rewrite_417_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][1]);
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][2][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_417_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[417]++;
  return utils::mkSpecialFixedWidth(children, 417);
}
Node rewrite_420_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_420_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[420]++;
  return utils::mkSpecialFixedWidth(children, 420);
}
Node rewrite_425_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_425_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[425]++;
  return utils::mkSpecialFixedWidth(children, 425);
}
Node rewrite_431_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_431_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[431]++;
  return utils::mkSpecialFixedWidth(children, 431);
}
Node rewrite_453_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_453_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[453]++;
  return utils::mkSpecialFixedWidth(children, 453);
}
Node rewrite_454_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][1]);
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0][1]);
  children.push_back(node[2][1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_454_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[454]++;
  return utils::mkSpecialFixedWidth(children, 454);
}
Node rewrite_496_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][1]);
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_496_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][1]);
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[496]++;
  return utils::mkSpecialFixedWidth(children, 496);
}
Node rewrite_522_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_522_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[522]++;
  return utils::mkSpecialFixedWidth(children, 522);
}
Node rewrite_524_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][2]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][2]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][2]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_524_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][2]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[524]++;
  return utils::mkSpecialFixedWidth(children, 524);
}
Node rewrite_568_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[568]++;
  return utils::mkSpecialFixedWidth(children, 568);
}
Node rewrite_568_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[568]++;
  return utils::mkSpecialFixedWidth(children, 568);
}
Node rewrite_568_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[568]++;
  return utils::mkSpecialFixedWidth(children, 568);
}
Node rewrite_568_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[568]++;
  return utils::mkSpecialFixedWidth(children, 568);
}
Node rewrite_679_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[679]++;
  return utils::mkSpecialFixedWidth(children, 679);
}
Node rewrite_679_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[679]++;
  return utils::mkSpecialFixedWidth(children, 679);
}
Node rewrite_679_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[679]++;
  return utils::mkSpecialFixedWidth(children, 679);
}
Node rewrite_679_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[679]++;
  return utils::mkSpecialFixedWidth(children, 679);
}
Node rewrite_379_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_379_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[379]++;
  return utils::mkSpecialFixedWidth(children, 379);
}
Node rewrite_401_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[401]++;
  return utils::mkSpecialFixedWidth(children, 401);
}
Node rewrite_401_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[401]++;
  return utils::mkSpecialFixedWidth(children, 401);
}
Node rewrite_401_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[401]++;
  return utils::mkSpecialFixedWidth(children, 401);
}
Node rewrite_401_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[401]++;
  return utils::mkSpecialFixedWidth(children, 401);
}
Node rewrite_401_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[401]++;
  return utils::mkSpecialFixedWidth(children, 401);
}
Node rewrite_401_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[401]++;
  return utils::mkSpecialFixedWidth(children, 401);
}
Node rewrite_401_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[401]++;
  return utils::mkSpecialFixedWidth(children, 401);
}
Node rewrite_401_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[401]++;
  return utils::mkSpecialFixedWidth(children, 401);
}
Node rewrite_414_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[414]++;
  return utils::mkSpecialFixedWidth(children, 414);
}
Node rewrite_414_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[414]++;
  return utils::mkSpecialFixedWidth(children, 414);
}
Node rewrite_414_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[414]++;
  return utils::mkSpecialFixedWidth(children, 414);
}
Node rewrite_414_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[414]++;
  return utils::mkSpecialFixedWidth(children, 414);
}
Node rewrite_414_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[414]++;
  return utils::mkSpecialFixedWidth(children, 414);
}
Node rewrite_414_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[414]++;
  return utils::mkSpecialFixedWidth(children, 414);
}
Node rewrite_414_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[414]++;
  return utils::mkSpecialFixedWidth(children, 414);
}
Node rewrite_414_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[414]++;
  return utils::mkSpecialFixedWidth(children, 414);
}
Node rewrite_421_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[421]++;
  return utils::mkSpecialFixedWidth(children, 421);
}
Node rewrite_421_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[421]++;
  return utils::mkSpecialFixedWidth(children, 421);
}
Node rewrite_421_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1][0]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[421]++;
  return utils::mkSpecialFixedWidth(children, 421);
}
Node rewrite_421_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[421]++;
  return utils::mkSpecialFixedWidth(children, 421);
}
Node rewrite_421_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[421]++;
  return utils::mkSpecialFixedWidth(children, 421);
}
Node rewrite_421_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[421]++;
  return utils::mkSpecialFixedWidth(children, 421);
}
Node rewrite_421_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[421]++;
  return utils::mkSpecialFixedWidth(children, 421);
}
Node rewrite_421_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1][0]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[421]++;
  return utils::mkSpecialFixedWidth(children, 421);
}
Node rewrite_446_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[446]++;
  return utils::mkSpecialFixedWidth(children, 446);
}
Node rewrite_446_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[446]++;
  return utils::mkSpecialFixedWidth(children, 446);
}
Node rewrite_446_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[446]++;
  return utils::mkSpecialFixedWidth(children, 446);
}
Node rewrite_446_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[446]++;
  return utils::mkSpecialFixedWidth(children, 446);
}
Node rewrite_446_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[446]++;
  return utils::mkSpecialFixedWidth(children, 446);
}
Node rewrite_446_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0][0]);
  children.push_back(node[1][1][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[446]++;
  return utils::mkSpecialFixedWidth(children, 446);
}
Node rewrite_446_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0][0]);
  children.push_back(node[0][1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[446]++;
  return utils::mkSpecialFixedWidth(children, 446);
}
Node rewrite_446_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[446]++;
  return utils::mkSpecialFixedWidth(children, 446);
}
Node rewrite_449_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[449]++;
  return utils::mkSpecialFixedWidth(children, 449);
}
Node rewrite_449_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[449]++;
  return utils::mkSpecialFixedWidth(children, 449);
}
Node rewrite_449_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[449]++;
  return utils::mkSpecialFixedWidth(children, 449);
}
Node rewrite_449_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[449]++;
  return utils::mkSpecialFixedWidth(children, 449);
}
Node rewrite_449_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[449]++;
  return utils::mkSpecialFixedWidth(children, 449);
}
Node rewrite_449_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[449]++;
  return utils::mkSpecialFixedWidth(children, 449);
}
Node rewrite_449_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[449]++;
  return utils::mkSpecialFixedWidth(children, 449);
}
Node rewrite_449_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[449]++;
  return utils::mkSpecialFixedWidth(children, 449);
}
Node rewrite_458_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[458]++;
  return utils::mkSpecialFixedWidth(children, 458);
}
Node rewrite_458_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[458]++;
  return utils::mkSpecialFixedWidth(children, 458);
}
Node rewrite_458_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[458]++;
  return utils::mkSpecialFixedWidth(children, 458);
}
Node rewrite_458_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[458]++;
  return utils::mkSpecialFixedWidth(children, 458);
}
Node rewrite_458_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[458]++;
  return utils::mkSpecialFixedWidth(children, 458);
}
Node rewrite_458_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[458]++;
  return utils::mkSpecialFixedWidth(children, 458);
}
Node rewrite_458_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[458]++;
  return utils::mkSpecialFixedWidth(children, 458);
}
Node rewrite_458_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[458]++;
  return utils::mkSpecialFixedWidth(children, 458);
}
Node rewrite_459_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_36(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_37(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_38(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_39(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_40(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_41(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_42(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_43(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_44(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_45(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_46(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_47(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_48(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_49(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_50(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_51(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_52(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_53(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_54(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_55(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_56(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_57(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_58(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_59(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_60(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_61(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_62(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_63(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][2]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_64(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_65(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_66(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_67(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][2]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_68(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_69(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_70(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_459_71(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[459]++;
  return utils::mkSpecialFixedWidth(children, 459);
}
Node rewrite_461_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1][0]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_461_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[461]++;
  return utils::mkSpecialFixedWidth(children, 461);
}
Node rewrite_518_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_518_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[518]++;
  return utils::mkSpecialFixedWidth(children, 518);
}
Node rewrite_521_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_521_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[521]++;
  return utils::mkSpecialFixedWidth(children, 521);
}
Node rewrite_531_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[531]++;
  return utils::mkSpecialFixedWidth(children, 531);
}
Node rewrite_531_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[531]++;
  return utils::mkSpecialFixedWidth(children, 531);
}
Node rewrite_531_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][1]);
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[531]++;
  return utils::mkSpecialFixedWidth(children, 531);
}
Node rewrite_531_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[531]++;
  return utils::mkSpecialFixedWidth(children, 531);
}
Node rewrite_531_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][1]);
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[531]++;
  return utils::mkSpecialFixedWidth(children, 531);
}
Node rewrite_531_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[531]++;
  return utils::mkSpecialFixedWidth(children, 531);
}
Node rewrite_531_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][0][1]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[531]++;
  return utils::mkSpecialFixedWidth(children, 531);
}
Node rewrite_531_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][1][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[531]++;
  return utils::mkSpecialFixedWidth(children, 531);
}
Node rewrite_389_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[389]++;
  return utils::mkSpecialFixedWidth(children, 389);
}
Node rewrite_389_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[389]++;
  return utils::mkSpecialFixedWidth(children, 389);
}
Node rewrite_389_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[389]++;
  return utils::mkSpecialFixedWidth(children, 389);
}
Node rewrite_389_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[389]++;
  return utils::mkSpecialFixedWidth(children, 389);
}
Node rewrite_434_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[434]++;
  return utils::mkSpecialFixedWidth(children, 434);
}
Node rewrite_434_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1][0]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[434]++;
  return utils::mkSpecialFixedWidth(children, 434);
}
Node rewrite_434_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[434]++;
  return utils::mkSpecialFixedWidth(children, 434);
}
Node rewrite_434_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1][0]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[434]++;
  return utils::mkSpecialFixedWidth(children, 434);
}
Node rewrite_452_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_24(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_25(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_26(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_27(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_28(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_29(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_30(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_31(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_32(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_33(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_34(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_452_35(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][2]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[452]++;
  return utils::mkSpecialFixedWidth(children, 452);
}
Node rewrite_483_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][2]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][2]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][2]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][2]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][2]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_483_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][2]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[483]++;
  return utils::mkSpecialFixedWidth(children, 483);
}
Node rewrite_492_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][1]);
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_492_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[492]++;
  return utils::mkSpecialFixedWidth(children, 492);
}
Node rewrite_502_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[502]++;
  return utils::mkSpecialFixedWidth(children, 502);
}
Node rewrite_502_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[502]++;
  return utils::mkSpecialFixedWidth(children, 502);
}
Node rewrite_502_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[502]++;
  return utils::mkSpecialFixedWidth(children, 502);
}
Node rewrite_502_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[502]++;
  return utils::mkSpecialFixedWidth(children, 502);
}
Node rewrite_502_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[502]++;
  return utils::mkSpecialFixedWidth(children, 502);
}
Node rewrite_502_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[502]++;
  return utils::mkSpecialFixedWidth(children, 502);
}
Node rewrite_707_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_707_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[707]++;
  return utils::mkSpecialFixedWidth(children, 707);
}
Node rewrite_709_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_12(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_13(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_14(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_15(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_16(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_17(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_18(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_19(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_20(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][2]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_21(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_22(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][2]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_709_23(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[709]++;
  return utils::mkSpecialFixedWidth(children, 709);
}
Node rewrite_396_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[396]++;
  return utils::mkSpecialFixedWidth(children, 396);
}
Node rewrite_396_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[396]++;
  return utils::mkSpecialFixedWidth(children, 396);
}
Node rewrite_396_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[396]++;
  return utils::mkSpecialFixedWidth(children, 396);
}
Node rewrite_396_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[396]++;
  return utils::mkSpecialFixedWidth(children, 396);
}
Node rewrite_396_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[396]++;
  return utils::mkSpecialFixedWidth(children, 396);
}
Node rewrite_396_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[396]++;
  return utils::mkSpecialFixedWidth(children, 396);
}
Node rewrite_396_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[396]++;
  return utils::mkSpecialFixedWidth(children, 396);
}
Node rewrite_396_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[396]++;
  return utils::mkSpecialFixedWidth(children, 396);
}
Node rewrite_428_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][2]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_428_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[428]++;
  return utils::mkSpecialFixedWidth(children, 428);
}
Node rewrite_433_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][0][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][1]);
  children.push_back(node[2][0][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_433_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[433]++;
  return utils::mkSpecialFixedWidth(children, 433);
}
Node rewrite_436_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_436_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[436]++;
  return utils::mkSpecialFixedWidth(children, 436);
}
Node rewrite_485_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[485]++;
  return utils::mkSpecialFixedWidth(children, 485);
}
Node rewrite_485_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][1]);
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[485]++;
  return utils::mkSpecialFixedWidth(children, 485);
}
Node rewrite_485_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][1]);
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[485]++;
  return utils::mkSpecialFixedWidth(children, 485);
}
Node rewrite_485_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[485]++;
  return utils::mkSpecialFixedWidth(children, 485);
}
Node rewrite_485_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[485]++;
  return utils::mkSpecialFixedWidth(children, 485);
}
Node rewrite_485_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[485]++;
  return utils::mkSpecialFixedWidth(children, 485);
}
Node rewrite_485_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[485]++;
  return utils::mkSpecialFixedWidth(children, 485);
}
Node rewrite_485_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[485]++;
  return utils::mkSpecialFixedWidth(children, 485);
}
Node rewrite_486_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[486]++;
  return utils::mkSpecialFixedWidth(children, 486);
}
Node rewrite_486_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[486]++;
  return utils::mkSpecialFixedWidth(children, 486);
}
Node rewrite_486_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[486]++;
  return utils::mkSpecialFixedWidth(children, 486);
}
Node rewrite_486_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[486]++;
  return utils::mkSpecialFixedWidth(children, 486);
}
Node rewrite_486_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[486]++;
  return utils::mkSpecialFixedWidth(children, 486);
}
Node rewrite_486_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[486]++;
  return utils::mkSpecialFixedWidth(children, 486);
}
Node rewrite_486_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[486]++;
  return utils::mkSpecialFixedWidth(children, 486);
}
Node rewrite_486_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[486]++;
  return utils::mkSpecialFixedWidth(children, 486);
}
Node rewrite_528_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_528_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[528]++;
  return utils::mkSpecialFixedWidth(children, 528);
}
Node rewrite_378_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[378]++;
  return utils::mkSpecialFixedWidth(children, 378);
}
Node rewrite_378_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[378]++;
  return utils::mkSpecialFixedWidth(children, 378);
}
Node rewrite_378_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[378]++;
  return utils::mkSpecialFixedWidth(children, 378);
}
Node rewrite_378_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[378]++;
  return utils::mkSpecialFixedWidth(children, 378);
}
Node rewrite_406_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[406]++;
  return utils::mkSpecialFixedWidth(children, 406);
}
Node rewrite_406_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[406]++;
  return utils::mkSpecialFixedWidth(children, 406);
}
Node rewrite_406_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[406]++;
  return utils::mkSpecialFixedWidth(children, 406);
}
Node rewrite_406_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[406]++;
  return utils::mkSpecialFixedWidth(children, 406);
}
Node rewrite_432_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][1]);
  children.push_back(node[1][0][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[432]++;
  return utils::mkSpecialFixedWidth(children, 432);
}
Node rewrite_432_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0][0]);
  children.push_back(node[1][0][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[432]++;
  return utils::mkSpecialFixedWidth(children, 432);
}
Node rewrite_432_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][1]);
  children.push_back(node[0][0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[432]++;
  return utils::mkSpecialFixedWidth(children, 432);
}
Node rewrite_432_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0][0]);
  children.push_back(node[0][0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[432]++;
  return utils::mkSpecialFixedWidth(children, 432);
}
Node rewrite_484_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[484]++;
  return utils::mkSpecialFixedWidth(children, 484);
}
Node rewrite_484_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[484]++;
  return utils::mkSpecialFixedWidth(children, 484);
}
Node rewrite_484_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[484]++;
  return utils::mkSpecialFixedWidth(children, 484);
}
Node rewrite_484_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[484]++;
  return utils::mkSpecialFixedWidth(children, 484);
}
Node rewrite_484_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[484]++;
  return utils::mkSpecialFixedWidth(children, 484);
}
Node rewrite_484_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[484]++;
  return utils::mkSpecialFixedWidth(children, 484);
}
Node rewrite_489_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[489]++;
  return utils::mkSpecialFixedWidth(children, 489);
}
Node rewrite_489_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[489]++;
  return utils::mkSpecialFixedWidth(children, 489);
}
Node rewrite_489_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[489]++;
  return utils::mkSpecialFixedWidth(children, 489);
}
Node rewrite_489_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[489]++;
  return utils::mkSpecialFixedWidth(children, 489);
}
Node rewrite_366_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[366]++;
  return utils::mkSpecialFixedWidth(children, 366);
}
Node rewrite_366_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1][0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[366]++;
  return utils::mkSpecialFixedWidth(children, 366);
}
Node rewrite_494_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[2][1]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_494_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][1]);
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[494]++;
  return utils::mkSpecialFixedWidth(children, 494);
}
Node rewrite_498_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_498_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[498]++;
  return utils::mkSpecialFixedWidth(children, 498);
}
Node rewrite_508_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][2]);
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][2]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[0][2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_6(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[1][2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_7(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_8(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_9(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][2]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_10(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][2]);
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_508_11(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][2]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[508]++;
  return utils::mkSpecialFixedWidth(children, 508);
}
Node rewrite_390_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[390]++;
  return utils::mkSpecialFixedWidth(children, 390);
}
Node rewrite_390_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[390]++;
  return utils::mkSpecialFixedWidth(children, 390);
}
Node rewrite_390_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[390]++;
  return utils::mkSpecialFixedWidth(children, 390);
}
Node rewrite_390_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[390]++;
  return utils::mkSpecialFixedWidth(children, 390);
}
Node rewrite_441_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[441]++;
  return utils::mkSpecialFixedWidth(children, 441);
}
Node rewrite_441_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[441]++;
  return utils::mkSpecialFixedWidth(children, 441);
}
Node rewrite_441_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[441]++;
  return utils::mkSpecialFixedWidth(children, 441);
}
Node rewrite_441_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[441]++;
  return utils::mkSpecialFixedWidth(children, 441);
}
Node rewrite_441_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[441]++;
  return utils::mkSpecialFixedWidth(children, 441);
}
Node rewrite_441_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[2][0]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[441]++;
  return utils::mkSpecialFixedWidth(children, 441);
}
Node rewrite_491_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][1]);
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[491]++;
  return utils::mkSpecialFixedWidth(children, 491);
}
Node rewrite_491_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[0][1]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[491]++;
  return utils::mkSpecialFixedWidth(children, 491);
}
Node rewrite_491_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[1][1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[491]++;
  return utils::mkSpecialFixedWidth(children, 491);
}
Node rewrite_491_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][1]);
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[491]++;
  return utils::mkSpecialFixedWidth(children, 491);
}
Node rewrite_368_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0][0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[368]++;
  return utils::mkSpecialFixedWidth(children, 368);
}
Node rewrite_368_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1][0]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[368]++;
  return utils::mkSpecialFixedWidth(children, 368);
}
Node rewrite_382_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[1]);
  children.push_back(node[0]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[382]++;
  return utils::mkSpecialFixedWidth(children, 382);
}
Node rewrite_382_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[2]);
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[382]++;
  return utils::mkSpecialFixedWidth(children, 382);
}
Node rewrite_382_2(Node node) {
  std::vector<Node> children;
  children.push_back(node[2]);
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[382]++;
  return utils::mkSpecialFixedWidth(children, 382);
}
Node rewrite_382_3(Node node) {
  std::vector<Node> children;
  children.push_back(node[0]);
  children.push_back(node[2]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[382]++;
  return utils::mkSpecialFixedWidth(children, 382);
}
Node rewrite_382_4(Node node) {
  std::vector<Node> children;
  children.push_back(node[0]);
  children.push_back(node[1]);
  children.push_back(node[2]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[382]++;
  return utils::mkSpecialFixedWidth(children, 382);
}
Node rewrite_382_5(Node node) {
  std::vector<Node> children;
  children.push_back(node[1]);
  children.push_back(node[2]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[382]++;
  return utils::mkSpecialFixedWidth(children, 382);
}
Node rewrite_705_0(Node node) {
  std::vector<Node> children;
  children.push_back(node[0]);
  children.push_back(node[1]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[705]++;
  return utils::mkSpecialFixedWidth(children, 705);
}
Node rewrite_705_1(Node node) {
  std::vector<Node> children;
  children.push_back(node[1]);
  children.push_back(node[0]);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[705]++;
  return utils::mkSpecialFixedWidth(children, 705);
}
Node rewrite_705(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[31] && true && predicates[78] && node[1][1][0][1] == node[2][1][0] && node[1][1][0][0] == node[2][1][1]) {
    return rewrite_563_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][0][0] == node[1][0][0][0] && node[0][0][1] == node[1][0][0][1] && true && true) {
    return rewrite_563_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[31] && predicates[137] && node[0][0][0][1] == node[2][0][0] && node[0][0][0][0] == node[2][0][1] && true) {
    return rewrite_563_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][1][0] == node[1][1][0][0] && node[0][1][1] == node[1][1][0][1] && true) {
    return rewrite_563_3(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[31] && predicates[137] && node[1][0][0][0] == node[2][0][0] && node[1][0][0][1] == node[2][0][1] && true) {
    return rewrite_563_4(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[1][1][1] == node[2][1][0][0] && node[1][1][0] == node[2][1][0][1]) {
    return rewrite_563_5(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[31] && true && predicates[78] && node[0][1][0][0] == node[2][1][0] && node[0][1][0][1] == node[2][1][1]) {
    return rewrite_563_6(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[0][1][1] == node[2][0][0][0] && node[0][1][0] == node[2][0][0][1] && true) {
    return rewrite_563_7(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[31] && predicates[137] && node[1][1][0][1] == node[2][0][0] && node[1][1][0][0] == node[2][0][1] && true) {
    return rewrite_563_8(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[0][1][0] == node[2][0][0][0] && node[0][1][1] == node[2][0][0][1] && true) {
    return rewrite_563_9(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[31] && true && predicates[78] && node[0][0][0][0] == node[2][1][0] && node[0][0][0][1] == node[2][1][1]) {
    return rewrite_563_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[0][0][0] == node[2][0][0][0] && node[0][0][1] == node[2][0][0][1] && true) {
    return rewrite_563_11(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[0][0][1] == node[2][1][0][0] && node[0][0][0] == node[2][1][0][1]) {
    return rewrite_563_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][0][1] == node[1][0][0][0] && node[0][0][0] == node[1][0][0][1] && true && true) {
    return rewrite_563_13(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[31] && predicates[137] && node[0][1][0][0] == node[2][0][0] && node[0][1][0][1] == node[2][0][1] && true) {
    return rewrite_563_14(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[31] && predicates[137] && node[1][0][0][1] == node[2][0][0] && node[1][0][0][0] == node[2][0][1] && true) {
    return rewrite_563_15(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && predicates[68] && node[0][1][0][0] == node[1][1][0] && node[0][1][0][1] == node[1][1][1] && true) {
    return rewrite_563_16(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][1][1] == node[1][1][0][0] && node[0][1][0] == node[1][1][0][1] && true) {
    return rewrite_563_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && predicates[68] && node[0][0][0][1] == node[1][1][0] && node[0][0][0][0] == node[1][1][1] && true) {
    return rewrite_563_18(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[1][1][1] == node[2][1][0][0] && node[1][1][0] == node[2][1][0][1]) {
    return rewrite_563_19(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[31] && true && predicates[78] && node[0][0][0][1] == node[2][1][0] && node[0][0][0][0] == node[2][1][1]) {
    return rewrite_563_20(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[31] && true && predicates[78] && node[1][1][0][0] == node[2][1][0] && node[1][1][0][1] == node[2][1][1]) {
    return rewrite_563_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[31] && true && predicates[78] && node[0][0][0][0] == node[2][1][0] && node[0][0][0][1] == node[2][1][1]) {
    return rewrite_563_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][0][1] == node[1][1][0][0] && node[0][0][0] == node[1][1][0][1] && true) {
    return rewrite_563_23(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && predicates[165] && node[0][1][0][0] == node[1][0][0] && node[0][1][0][1] == node[1][0][1] && true && true) {
    return rewrite_563_24(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[1][0][1] == node[2][1][0][0] && node[1][0][0] == node[2][1][0][1]) {
    return rewrite_563_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[1][0][0] == node[2][1][0][0] && node[1][0][1] == node[2][1][0][1]) {
    return rewrite_563_26(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[31] && true && predicates[78] && node[1][0][0][1] == node[2][1][0] && node[1][0][0][0] == node[2][1][1]) {
    return rewrite_563_27(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][1][1] == node[1][0][0][0] && node[0][1][0] == node[1][0][0][1] && true && true) {
    return rewrite_563_28(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[31] && true && predicates[78] && node[0][1][0][1] == node[2][1][0] && node[0][1][0][0] == node[2][1][1]) {
    return rewrite_563_29(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[31] && predicates[137] && node[0][1][0][1] == node[2][0][0] && node[0][1][0][0] == node[2][0][1] && true) {
    return rewrite_563_30(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[0][1][0] == node[2][1][0][0] && node[0][1][1] == node[2][1][0][1]) {
    return rewrite_563_31(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && predicates[68] && node[0][1][0][1] == node[1][1][0] && node[0][1][0][0] == node[1][1][1] && true) {
    return rewrite_563_32(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][1][0] == node[1][0][0][0] && node[0][1][1] == node[1][0][0][1] && true && true) {
    return rewrite_563_33(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && predicates[158] && predicates[113] && node[1][1][1] == node[2][0][0][0] && node[1][1][0] == node[2][0][0][1] && true) {
    return rewrite_563_34(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][0][1] == node[1][0][0][0] && node[0][0][0] == node[1][0][0][1] && true && true) {
    return rewrite_563_35(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[31] && predicates[137] && node[1][1][0][1] == node[2][0][0] && node[1][1][0][0] == node[2][0][1] && true) {
    return rewrite_563_36(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && predicates[165] && node[0][1][0][1] == node[1][0][0] && node[0][1][0][0] == node[1][0][1] && true && true) {
    return rewrite_563_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[0][0][1] == node[2][0][0][0] && node[0][0][0] == node[2][0][0][1] && true) {
    return rewrite_563_38(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && predicates[68] && node[0][1][0][0] == node[1][1][0] && node[0][1][0][1] == node[1][1][1] && true) {
    return rewrite_563_39(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[31] && predicates[137] && node[1][1][0][0] == node[2][0][0] && node[1][1][0][1] == node[2][0][1] && true) {
    return rewrite_563_40(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][0][0] == node[1][1][0][0] && node[0][0][1] == node[1][1][0][1] && true) {
    return rewrite_563_41(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[31] && true && predicates[78] && node[1][0][0][0] == node[2][1][0] && node[1][0][0][1] == node[2][1][1]) {
    return rewrite_563_42(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[1][1][0] == node[2][1][0][0] && node[1][1][1] == node[2][1][0][1]) {
    return rewrite_563_43(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[31] && predicates[137] && node[0][1][0][1] == node[2][0][0] && node[0][1][0][0] == node[2][0][1] && true) {
    return rewrite_563_44(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[0][1][1] == node[2][1][0][0] && node[0][1][0] == node[2][1][0][1]) {
    return rewrite_563_45(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && predicates[165] && node[0][0][0][1] == node[1][0][0] && node[0][0][0][0] == node[1][0][1] && true && true) {
    return rewrite_563_46(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[31] && true && predicates[78] && node[1][1][0][0] == node[2][1][0] && node[1][1][0][1] == node[2][1][1]) {
    return rewrite_563_47(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[1][1][0] == node[2][1][0][0] && node[1][1][1] == node[2][1][0][1]) {
    return rewrite_563_48(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[31] && predicates[137] && node[1][1][0][0] == node[2][0][0] && node[1][1][0][1] == node[2][0][1] && true) {
    return rewrite_563_49(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[1][0][0] == node[2][1][0][0] && node[1][0][1] == node[2][1][0][1]) {
    return rewrite_563_50(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && predicates[158] && predicates[113] && node[1][1][1] == node[2][0][0][0] && node[1][1][0] == node[2][0][0][1] && true) {
    return rewrite_563_51(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[31] && true && predicates[78] && node[0][1][0][0] == node[2][1][0] && node[0][1][0][1] == node[2][1][1]) {
    return rewrite_563_52(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[31] && predicates[137] && node[1][0][0][1] == node[2][0][0] && node[1][0][0][0] == node[2][0][1] && true) {
    return rewrite_563_53(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[31] && true && predicates[78] && node[1][0][0][1] == node[2][1][0] && node[1][0][0][0] == node[2][1][1]) {
    return rewrite_563_54(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && predicates[165] && node[0][0][0][1] == node[1][0][0] && node[0][0][0][0] == node[1][0][1] && true && true) {
    return rewrite_563_55(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][1][0] == node[1][1][0][0] && node[0][1][1] == node[1][1][0][1] && true) {
    return rewrite_563_56(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && predicates[165] && node[0][0][0][0] == node[1][0][0] && node[0][0][0][1] == node[1][0][1] && true && true) {
    return rewrite_563_57(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[31] && predicates[137] && node[1][0][0][0] == node[2][0][0] && node[1][0][0][1] == node[2][0][1] && true) {
    return rewrite_563_58(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[1][0][1] == node[2][0][0][0] && node[1][0][0] == node[2][0][0][1] && true) {
    return rewrite_563_59(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[31] && true && predicates[78] && node[0][0][0][1] == node[2][1][0] && node[0][0][0][0] == node[2][1][1]) {
    return rewrite_563_60(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && predicates[68] && node[0][0][0][0] == node[1][1][0] && node[0][0][0][1] == node[1][1][1] && true) {
    return rewrite_563_61(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[1][0][0] == node[2][0][0][0] && node[1][0][1] == node[2][0][0][1] && true) {
    return rewrite_563_62(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && predicates[165] && node[0][1][0][0] == node[1][0][0] && node[0][1][0][1] == node[1][0][1] && true && true) {
    return rewrite_563_63(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && predicates[158] && predicates[113] && node[1][1][0] == node[2][0][0][0] && node[1][1][1] == node[2][0][0][1] && true) {
    return rewrite_563_64(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && predicates[68] && node[0][0][0][1] == node[1][1][0] && node[0][0][0][0] == node[1][1][1] && true) {
    return rewrite_563_65(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[0][1][1] == node[2][0][0][0] && node[0][1][0] == node[2][0][0][1] && true) {
    return rewrite_563_66(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[0][1][0] == node[2][1][0][0] && node[0][1][1] == node[2][1][0][1]) {
    return rewrite_563_67(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][1][1] == node[1][0][0][0] && node[0][1][0] == node[1][0][0][1] && true && true) {
    return rewrite_563_68(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][0][0] == node[1][0][0][0] && node[0][0][1] == node[1][0][0][1] && true && true) {
    return rewrite_563_69(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[0][0][0] == node[2][1][0][0] && node[0][0][1] == node[2][1][0][1]) {
    return rewrite_563_70(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[0][0][0] == node[2][0][0][0] && node[0][0][1] == node[2][0][0][1] && true) {
    return rewrite_563_71(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[1][0][1] == node[2][1][0][0] && node[1][0][0] == node[2][1][0][1]) {
    return rewrite_563_72(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[31] && true && predicates[78] && node[1][0][0][0] == node[2][1][0] && node[1][0][0][1] == node[2][1][1]) {
    return rewrite_563_73(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[0][1][1] == node[2][1][0][0] && node[0][1][0] == node[2][1][0][1]) {
    return rewrite_563_74(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && predicates[68] && node[0][1][0][1] == node[1][1][0] && node[0][1][0][0] == node[1][1][1] && true) {
    return rewrite_563_75(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[1][0][1] == node[2][0][0][0] && node[1][0][0] == node[2][0][0][1] && true) {
    return rewrite_563_76(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[31] && true && predicates[78] && node[0][1][0][1] == node[2][1][0] && node[0][1][0][0] == node[2][1][1]) {
    return rewrite_563_77(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[0][1][0] == node[2][0][0][0] && node[0][1][1] == node[2][0][0][1] && true) {
    return rewrite_563_78(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][0][0] == node[1][1][0][0] && node[0][0][1] == node[1][1][0][1] && true) {
    return rewrite_563_79(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && predicates[165] && node[0][1][0][1] == node[1][0][0] && node[0][1][0][0] == node[1][0][1] && true && true) {
    return rewrite_563_80(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[0][0][1] == node[2][0][0][0] && node[0][0][0] == node[2][0][0][1] && true) {
    return rewrite_563_81(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && predicates[165] && node[0][0][0][0] == node[1][0][0] && node[0][0][0][1] == node[1][0][1] && true && true) {
    return rewrite_563_82(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[0][0][0] == node[2][1][0][0] && node[0][0][1] == node[2][1][0][1]) {
    return rewrite_563_83(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && predicates[68] && node[0][0][0][0] == node[1][1][0] && node[0][0][0][1] == node[1][1][1] && true) {
    return rewrite_563_84(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][1][0] == node[1][0][0][0] && node[0][1][1] == node[1][0][0][1] && true && true) {
    return rewrite_563_85(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[31] && true && predicates[78] && node[1][1][0][1] == node[2][1][0] && node[1][1][0][0] == node[2][1][1]) {
    return rewrite_563_86(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[31] && predicates[137] && node[0][1][0][0] == node[2][0][0] && node[0][1][0][1] == node[2][0][1] && true) {
    return rewrite_563_87(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][0][1] == node[1][1][0][0] && node[0][0][0] == node[1][1][0][1] && true) {
    return rewrite_563_88(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[31] && predicates[137] && node[0][0][0][0] == node[2][0][0] && node[0][0][0][1] == node[2][0][1] && true) {
    return rewrite_563_89(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][1][1] == node[1][1][0][0] && node[0][1][0] == node[1][1][0][1] && true) {
    return rewrite_563_90(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[31] && predicates[137] && node[0][0][0][0] == node[2][0][0] && node[0][0][0][1] == node[2][0][1] && true) {
    return rewrite_563_91(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && predicates[77] && predicates[42] && node[0][0][1] == node[2][1][0][0] && node[0][0][0] == node[2][1][0][1]) {
    return rewrite_563_92(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && predicates[158] && predicates[113] && node[1][1][0] == node[2][0][0][0] && node[1][1][1] == node[2][0][0][1] && true) {
    return rewrite_563_93(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && predicates[158] && predicates[113] && node[1][0][0] == node[2][0][0][0] && node[1][0][1] == node[2][0][0][1] && true) {
    return rewrite_563_94(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[31] && predicates[137] && node[0][0][0][1] == node[2][0][0] && node[0][0][0][0] == node[2][0][1] && true) {
    return rewrite_563_95(node);
  }
  else {
    return node;
  }
}
Node rewrite_563(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][0][0] == node[1][0][0][0] && node[0][0][1] == node[1][0][0][1] && true) {
    return rewrite_574_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && predicates[165] && node[0][1][0][0] == node[1][0][0] && node[0][1][0][1] == node[1][0][1] && true) {
    return rewrite_574_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][1][1] == node[1][1][0][0] && node[0][1][0] == node[1][1][0][1]) {
    return rewrite_574_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][0][0] == node[1][1][0][0] && node[0][0][1] == node[1][1][0][1]) {
    return rewrite_574_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && predicates[68] && node[0][0][0][0] == node[1][1][0] && node[0][0][0][1] == node[1][1][1]) {
    return rewrite_574_4(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][1][0] == node[1][0][0][0] && node[0][1][1] == node[1][0][0][1] && true) {
    return rewrite_574_5(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && predicates[68] && node[0][1][0][1] == node[1][1][0] && node[0][1][0][0] == node[1][1][1]) {
    return rewrite_574_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][0][1] == node[1][1][0][0] && node[0][0][0] == node[1][1][0][1]) {
    return rewrite_574_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && predicates[165] && node[0][0][0][1] == node[1][0][0] && node[0][0][0][0] == node[1][0][1] && true) {
    return rewrite_574_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][1][0] == node[1][1][0][0] && node[0][1][1] == node[1][1][0][1]) {
    return rewrite_574_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && predicates[68] && node[0][0][0][1] == node[1][1][0] && node[0][0][0][0] == node[1][1][1]) {
    return rewrite_574_10(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && predicates[68] && node[0][1][0][0] == node[1][1][0] && node[0][1][0][1] == node[1][1][1]) {
    return rewrite_574_11(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][1][0] == node[1][0][0][0] && node[0][1][1] == node[1][0][0][1] && true) {
    return rewrite_574_12(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][1][0] == node[1][1][0][0] && node[0][1][1] == node[1][1][0][1]) {
    return rewrite_574_13(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && predicates[68] && node[0][1][0][1] == node[1][1][0] && node[0][1][0][0] == node[1][1][1]) {
    return rewrite_574_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][0][0] == node[1][0][0][0] && node[0][0][1] == node[1][0][0][1] && true) {
    return rewrite_574_15(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && predicates[165] && node[0][0][0][1] == node[1][0][0] && node[0][0][0][0] == node[1][0][1] && true) {
    return rewrite_574_16(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && predicates[165] && node[0][1][0][1] == node[1][0][0] && node[0][1][0][0] == node[1][0][1] && true) {
    return rewrite_574_17(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][1][1] == node[1][1][0][0] && node[0][1][0] == node[1][1][0][1]) {
    return rewrite_574_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && predicates[165] && node[0][0][0][0] == node[1][0][0] && node[0][0][0][1] == node[1][0][1] && true) {
    return rewrite_574_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][0][1] == node[1][0][0][0] && node[0][0][0] == node[1][0][0][1] && true) {
    return rewrite_574_20(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && predicates[165] && node[0][1][0][1] == node[1][0][0] && node[0][1][0][0] == node[1][0][1] && true) {
    return rewrite_574_21(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][0][1] == node[1][1][0][0] && node[0][0][0] == node[1][1][0][1]) {
    return rewrite_574_22(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && predicates[165] && node[0][1][0][0] == node[1][0][0] && node[0][1][0][1] == node[1][0][1] && true) {
    return rewrite_574_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && predicates[68] && node[0][0][0][1] == node[1][1][0] && node[0][0][0][0] == node[1][1][1]) {
    return rewrite_574_24(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && predicates[68] && node[0][1][0][0] == node[1][1][0] && node[0][1][0][1] == node[1][1][1]) {
    return rewrite_574_25(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && predicates[4] && node[0][0][0] == node[1][1][0][0] && node[0][0][1] == node[1][1][0][1]) {
    return rewrite_574_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && predicates[165] && node[0][0][0][0] == node[1][0][0] && node[0][0][0][1] == node[1][0][1] && true) {
    return rewrite_574_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][0][1] == node[1][0][0][0] && node[0][0][0] == node[1][0][0][1] && true) {
    return rewrite_574_28(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && predicates[68] && node[0][0][0][0] == node[1][1][0] && node[0][0][0][1] == node[1][1][1]) {
    return rewrite_574_29(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][1][1] == node[1][0][0][0] && node[0][1][0] == node[1][0][0][1] && true) {
    return rewrite_574_30(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && predicates[147] && node[0][1][1] == node[1][0][0][0] && node[0][1][0] == node[1][0][0][1] && true) {
    return rewrite_574_31(node);
  }
  else {
    return node;
  }
}
Node rewrite_574(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && true) {
    return rewrite_535_0(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_535_1(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_535_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_535_3(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_535_4(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_535_5(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_535_6(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_535_7(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && true) {
    return rewrite_535_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_535_9(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_535_10(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && true) {
    return rewrite_535_11(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_535_12(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && true) {
    return rewrite_535_13(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_535_14(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && true) {
    return rewrite_535_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && true) {
    return rewrite_535_16(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_535_17(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_535_18(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_535_19(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && true) {
    return rewrite_535_20(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && true) {
    return rewrite_535_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_535_22(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_535_23(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && true) {
    return rewrite_535_24(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_535_25(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_535_26(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_535_27(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_535_28(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_535_29(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && true) {
    return rewrite_535_30(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_535_31(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_535_32(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_535_33(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_535_34(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && true) {
    return rewrite_535_35(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && true) {
    return rewrite_535_36(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_535_37(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_535_38(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_535_39(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_535_40(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_535_41(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_535_42(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_535_43(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_535_44(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_535_45(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_535_46(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_535_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_535(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_1(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_2(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_4(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_542_5(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_6(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_542_8(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_9(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_11(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_12(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_13(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_14(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_15(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_17(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_18(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_542_19(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_542_20(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_21(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_542_22(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_23(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_24(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_542_25(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_542_26(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_542_27(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_28(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_29(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_30(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_31(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_32(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_33(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_34(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_35(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_36(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_37(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_38(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_39(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_542_40(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_41(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_42(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_542_43(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_44(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_542_45(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_46(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_47(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_48(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_49(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_50(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_51(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_52(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_53(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_54(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_55(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_56(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_542_57(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_58(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_59(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_60(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_61(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_62(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_63(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_64(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_65(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_66(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_542_67(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_68(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_542_69(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_542_70(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_542_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_542(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && true && predicates[19] && true) {
    return rewrite_544_0(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true && predicates[19] && true) {
    return rewrite_544_1(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && true && predicates[19] && true) {
    return rewrite_544_2(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && predicates[118] && true && true) {
    return rewrite_544_3(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true && predicates[19] && true) {
    return rewrite_544_4(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true && true) {
    return rewrite_544_5(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && predicates[118] && true && true) {
    return rewrite_544_6(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_544_7(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true && predicates[19] && true) {
    return rewrite_544_8(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true && true) {
    return rewrite_544_9(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && true) {
    return rewrite_544_10(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true && predicates[19] && true) {
    return rewrite_544_11(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && predicates[118] && true && true) {
    return rewrite_544_12(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_544_13(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_544_14(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_544_15(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true && predicates[19] && true) {
    return rewrite_544_16(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && true) {
    return rewrite_544_17(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_544_18(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && predicates[118] && true && true) {
    return rewrite_544_19(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && true) {
    return rewrite_544_20(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && true) {
    return rewrite_544_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && true && predicates[19] && true) {
    return rewrite_544_22(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && true) {
    return rewrite_544_23(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true && true) {
    return rewrite_544_24(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_544_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true && predicates[19] && true) {
    return rewrite_544_26(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true && true) {
    return rewrite_544_27(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true && predicates[19] && true) {
    return rewrite_544_28(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && true && predicates[19] && true) {
    return rewrite_544_29(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && true) {
    return rewrite_544_30(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && true && predicates[19] && true) {
    return rewrite_544_31(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && true && predicates[19] && true) {
    return rewrite_544_32(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_544_33(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && true) {
    return rewrite_544_34(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && true && predicates[19] && true) {
    return rewrite_544_35(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true && predicates[19] && true) {
    return rewrite_544_36(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && true && predicates[19] && true) {
    return rewrite_544_37(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_544_38(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && predicates[118] && true && true) {
    return rewrite_544_39(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_544_40(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && true) {
    return rewrite_544_41(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && predicates[118] && true && true) {
    return rewrite_544_42(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_544_43(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && predicates[118] && true && true) {
    return rewrite_544_44(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_544_45(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && predicates[118] && true && true) {
    return rewrite_544_46(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_544_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_544(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && node[0][0] == node[2][1][0]) {
    return rewrite_546_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && node[0][0][0] == node[1][1] && true) {
    return rewrite_546_1(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[31] && node[1][0][0] == node[2][0] && true) {
    return rewrite_546_2(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1] && true) {
    return rewrite_546_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1] && true) {
    return rewrite_546_4(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && node[0][0][0] == node[1][0] && true && true) {
    return rewrite_546_5(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && node[1][0] == node[2][1][0]) {
    return rewrite_546_6(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && node[1][0] == node[2][1][0]) {
    return rewrite_546_7(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && node[0][1] == node[1][1][0] && true) {
    return rewrite_546_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true && true) {
    return rewrite_546_9(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[31] && true && node[1][1][0] == node[2][1]) {
    return rewrite_546_10(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[31] && true && node[1][0][0] == node[2][1]) {
    return rewrite_546_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[31] && true && node[1][0][0] == node[2][1]) {
    return rewrite_546_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[31] && true && node[0][1][0] == node[2][1]) {
    return rewrite_546_13(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && node[0][1] == node[2][0][0] && predicates[78] && true && true) {
    return rewrite_546_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true && true) {
    return rewrite_546_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[31] && node[0][0][0] == node[2][0] && true) {
    return rewrite_546_16(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && node[0][0] == node[2][0][0] && predicates[78] && true && true) {
    return rewrite_546_17(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && node[1][1] == node[2][0][0] && predicates[78] && true && true) {
    return rewrite_546_18(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && predicates[68] && true && true && true) {
    return rewrite_546_19(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[31] && true && node[0][0][0] == node[2][1]) {
    return rewrite_546_20(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && node[1][0] == node[2][0][0] && predicates[78] && true && true) {
    return rewrite_546_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && node[0][0][0] == node[1][0] && true && true) {
    return rewrite_546_22(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && predicates[68] && true && true && true) {
    return rewrite_546_23(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && node[0][1] == node[2][1][0]) {
    return rewrite_546_24(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[31] && node[0][0][0] == node[2][0] && true) {
    return rewrite_546_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[31] && node[1][0][0] == node[2][0] && true) {
    return rewrite_546_26(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && predicates[68] && true && true && true) {
    return rewrite_546_27(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && node[0][0][0] == node[1][1] && true) {
    return rewrite_546_28(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && node[0][0] == node[2][1][0]) {
    return rewrite_546_29(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && node[1][1] == node[2][0][0] && predicates[78] && true && true) {
    return rewrite_546_30(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && node[1][0] == node[2][0][0] && predicates[78] && true && true) {
    return rewrite_546_31(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[31] && true && node[1][1][0] == node[2][1]) {
    return rewrite_546_32(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[31] && node[0][1][0] == node[2][0] && true) {
    return rewrite_546_33(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[31] && node[0][1][0] == node[2][0] && true) {
    return rewrite_546_34(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && node[0][1] == node[2][0][0] && predicates[78] && true && true) {
    return rewrite_546_35(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && node[1][1] == node[2][1][0]) {
    return rewrite_546_36(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && node[0][0] == node[1][1][0] && true) {
    return rewrite_546_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[31] && true && node[0][1][0] == node[2][1]) {
    return rewrite_546_38(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && node[0][0] == node[1][1][0] && true) {
    return rewrite_546_39(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && node[0][1] == node[2][1][0]) {
    return rewrite_546_40(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[31] && true && node[0][0][0] == node[2][1]) {
    return rewrite_546_41(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && predicates[68] && true && true && true) {
    return rewrite_546_42(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[31] && node[1][1][0] == node[2][0] && true) {
    return rewrite_546_43(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && node[0][1] == node[1][1][0] && true) {
    return rewrite_546_44(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && node[0][0] == node[2][0][0] && predicates[78] && true && true) {
    return rewrite_546_45(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[31] && node[1][1][0] == node[2][0] && true) {
    return rewrite_546_46(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && node[1][1] == node[2][1][0]) {
    return rewrite_546_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_546(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_547_0(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && predicates[30] && true && true) {
    return rewrite_547_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && predicates[77] && true) {
    return rewrite_547_2(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && predicates[77] && true) {
    return rewrite_547_3(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_547_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_547_5(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_547_6(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && predicates[77] && true) {
    return rewrite_547_7(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && predicates[30] && true && true) {
    return rewrite_547_8(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_547_9(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_547_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_547_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && predicates[30] && true && true) {
    return rewrite_547_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_547_13(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_547_14(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && predicates[30] && true && true) {
    return rewrite_547_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && predicates[20] && true && true && true && true && true) {
    return rewrite_547_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && predicates[124] && true && true && true) {
    return rewrite_547_17(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_547_18(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && predicates[20] && true && true && true && true && true) {
    return rewrite_547_19(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && predicates[77] && true) {
    return rewrite_547_20(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && predicates[30] && true && true) {
    return rewrite_547_21(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_547_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_547_23(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && predicates[173] && true && true && true && true) {
    return rewrite_547_24(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_547_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_547_26(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && predicates[77] && true) {
    return rewrite_547_27(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && predicates[77] && true) {
    return rewrite_547_28(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_547_29(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && predicates[173] && true && true && true && true) {
    return rewrite_547_30(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && predicates[30] && true && true) {
    return rewrite_547_31(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && predicates[77] && true) {
    return rewrite_547_32(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_547_33(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_547_34(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && predicates[30] && true && true) {
    return rewrite_547_35(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_547_36(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && predicates[124] && true && true && true) {
    return rewrite_547_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && predicates[20] && true && true && true && true && true) {
    return rewrite_547_38(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && predicates[30] && true && true) {
    return rewrite_547_39(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && predicates[173] && true && true && true && true) {
    return rewrite_547_40(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && predicates[124] && true && true && true) {
    return rewrite_547_41(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && predicates[124] && true && true && true) {
    return rewrite_547_42(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_547_43(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && predicates[77] && true) {
    return rewrite_547_44(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_547_45(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && predicates[20] && true && true && true && true && true) {
    return rewrite_547_46(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && predicates[173] && true && true && true && true) {
    return rewrite_547_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_547(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_556_0(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_556_1(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_556_2(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_556_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[31] && true && true) {
    return rewrite_556_4(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && true && true) {
    return rewrite_556_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[31] && true && true) {
    return rewrite_556_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[31] && true && true) {
    return rewrite_556_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && true && true) {
    return rewrite_556_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[31] && true && true) {
    return rewrite_556_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_556_10(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_556_11(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_556_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && true && true) {
    return rewrite_556_13(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_556_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[31] && true && true) {
    return rewrite_556_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_556_16(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_556_17(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_556_18(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && true && true) {
    return rewrite_556_19(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_556_20(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_556_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && true && true) {
    return rewrite_556_22(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_556_23(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_556_24(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[31] && true && true) {
    return rewrite_556_25(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_556_26(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && true && true) {
    return rewrite_556_27(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_556_28(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[31] && true && true) {
    return rewrite_556_29(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_556_30(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_556_31(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_556_32(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_556_33(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[31] && true && true) {
    return rewrite_556_34(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_556_35(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_556_36(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[31] && true && true) {
    return rewrite_556_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && true && true) {
    return rewrite_556_38(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_556_39(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_556_40(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[31] && true && true) {
    return rewrite_556_41(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_556_42(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[31] && true && true) {
    return rewrite_556_43(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_556_44(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && true && true) {
    return rewrite_556_45(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_556_46(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[31] && true && true) {
    return rewrite_556_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_556(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_3(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_7(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_8(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_10(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_11(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_12(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_13(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_15(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_16(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_17(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_20(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_21(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_24(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_25(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_26(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_557_28(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_29(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_30(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_557_31(node);
  }
  else {
    return node;
  }
}
Node rewrite_557(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_559_0(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_559_1(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_559_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_559_3(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_559_4(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_559_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_559_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_559_7(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_559_8(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_559_9(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_559_10(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_559_11(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_559_12(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_559_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_559_14(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_559_15(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_559_16(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_559_17(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_559_18(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_559_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_559_20(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_559_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_559_22(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_559_23(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_559_24(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_559_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_559_26(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_559_27(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_559_28(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_559_29(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_559_30(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_559_31(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_559_32(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_559_33(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_559_34(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_559_35(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_559_36(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_559_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_559_38(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_559_39(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_559_40(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_559_41(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_559_42(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_559_43(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_559_44(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_559_45(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_559_46(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_559_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_559(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && true && predicates[67] && true && true && true) {
    return rewrite_565_0(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_565_1(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_565_2(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && true && predicates[67] && true && true && true) {
    return rewrite_565_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && predicates[125] && true && true && true && true) {
    return rewrite_565_4(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && true && true && predicates[31] && true && true) {
    return rewrite_565_5(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && predicates[125] && true && true && true && true) {
    return rewrite_565_6(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && true && true && predicates[31] && true && true) {
    return rewrite_565_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && true && predicates[67] && true && true && true) {
    return rewrite_565_8(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && true && true && predicates[31] && true && true) {
    return rewrite_565_9(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && true && predicates[67] && true && true && true) {
    return rewrite_565_10(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && true && predicates[67] && true && true && true) {
    return rewrite_565_11(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && predicates[116] && true && true && true) {
    return rewrite_565_12(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && true && predicates[31] && true && true) {
    return rewrite_565_13(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && true) {
    return rewrite_565_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && true && true && predicates[31] && true && true) {
    return rewrite_565_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && true && true && predicates[31] && true && true) {
    return rewrite_565_16(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && predicates[81] && true && true) {
    return rewrite_565_17(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && true && true && predicates[31] && true && true) {
    return rewrite_565_18(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && true && predicates[67] && true && true && true) {
    return rewrite_565_19(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && predicates[81] && true && true) {
    return rewrite_565_20(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_565_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && true && true && predicates[31] && true && true) {
    return rewrite_565_22(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && true) {
    return rewrite_565_23(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && true && predicates[31] && true && true) {
    return rewrite_565_24(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && true) {
    return rewrite_565_25(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && true && predicates[31] && true && true) {
    return rewrite_565_26(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && predicates[69] && true && true && true) {
    return rewrite_565_27(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && true && predicates[67] && true && true && true) {
    return rewrite_565_28(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && true && true && predicates[31] && true && true) {
    return rewrite_565_29(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && predicates[69] && true && true && true) {
    return rewrite_565_30(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && true && true && predicates[31] && true && true) {
    return rewrite_565_31(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && true) {
    return rewrite_565_32(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && true && true && predicates[31] && true && true) {
    return rewrite_565_33(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && true) {
    return rewrite_565_34(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && true) {
    return rewrite_565_35(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && predicates[116] && true && true && true) {
    return rewrite_565_36(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_565_37(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && true && predicates[31] && true && true) {
    return rewrite_565_38(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && true) {
    return rewrite_565_39(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_565_40(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_565_41(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && true && true && predicates[31] && true && true) {
    return rewrite_565_42(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_565_43(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && true && predicates[67] && true && true && true) {
    return rewrite_565_44(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_565_45(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && true) {
    return rewrite_565_46(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && true && true && predicates[31] && true && true) {
    return rewrite_565_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_565(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[173] && true && true && true && true) {
    return rewrite_566_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[79] && true && true) {
    return rewrite_566_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[133] && true && true && true) {
    return rewrite_566_2(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && true && predicates[30] && true) {
    return rewrite_566_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[133] && true && true && true) {
    return rewrite_566_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && predicates[20] && true && true && true && true && true) {
    return rewrite_566_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && true && predicates[124] && true && true) {
    return rewrite_566_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[121] && true && true && true) {
    return rewrite_566_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && true && predicates[30] && true) {
    return rewrite_566_8(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[79] && true && true) {
    return rewrite_566_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && predicates[20] && true && true && true && true && true) {
    return rewrite_566_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[121] && true && true && true) {
    return rewrite_566_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && true && predicates[30] && true) {
    return rewrite_566_12(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && true && predicates[30] && true) {
    return rewrite_566_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && true && predicates[30] && true) {
    return rewrite_566_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[52] && true && true && true && true) {
    return rewrite_566_15(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && predicates[20] && true && true && true && true && true) {
    return rewrite_566_16(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[52] && true && true && true && true) {
    return rewrite_566_17(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && true && predicates[30] && true) {
    return rewrite_566_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[173] && true && true && true && true) {
    return rewrite_566_19(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[79] && true && true) {
    return rewrite_566_20(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && true && predicates[124] && true && true) {
    return rewrite_566_21(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && true && predicates[124] && true && true) {
    return rewrite_566_22(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && true && predicates[30] && true) {
    return rewrite_566_23(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[133] && true && true && true) {
    return rewrite_566_24(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && true && predicates[124] && true && true) {
    return rewrite_566_25(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && true && predicates[30] && true) {
    return rewrite_566_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[121] && true && true && true) {
    return rewrite_566_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && true && predicates[124] && true && true) {
    return rewrite_566_28(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && true && predicates[124] && true && true) {
    return rewrite_566_29(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && predicates[20] && true && true && true && true && true) {
    return rewrite_566_30(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && true && predicates[30] && true) {
    return rewrite_566_31(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[121] && true && true && true) {
    return rewrite_566_32(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && true && predicates[124] && true && true) {
    return rewrite_566_33(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[173] && true && true && true && true) {
    return rewrite_566_34(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && true && predicates[124] && true && true) {
    return rewrite_566_35(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && true && predicates[124] && true && true) {
    return rewrite_566_36(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && true && predicates[124] && true && true) {
    return rewrite_566_37(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && true && predicates[30] && true) {
    return rewrite_566_38(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && true && predicates[124] && true && true) {
    return rewrite_566_39(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[173] && true && true && true && true) {
    return rewrite_566_40(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && true && predicates[124] && true && true) {
    return rewrite_566_41(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[52] && true && true && true && true) {
    return rewrite_566_42(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[79] && true && true) {
    return rewrite_566_43(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && true && predicates[30] && true) {
    return rewrite_566_44(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && true && predicates[30] && true) {
    return rewrite_566_45(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[133] && true && true && true) {
    return rewrite_566_46(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[52] && true && true && true && true) {
    return rewrite_566_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_566(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_0(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_1(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_2(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_4(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_5(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_6(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_8(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_9(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_10(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_11(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_12(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_13(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_14(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_16(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_17(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_18(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_19(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_20(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_21(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_22(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_23(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_24(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_25(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_26(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_27(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_28(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_29(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_30(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_31(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_32(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_33(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_34(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_35(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_36(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_37(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_38(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_39(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_40(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_41(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_42(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_43(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_44(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_577_45(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_577_46(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_577_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_577(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true) {
    return rewrite_579_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_579_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true) {
    return rewrite_579_4(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && node[0][0][0] == node[1][0] && true) {
    return rewrite_579_6(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_7(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1]) {
    return rewrite_579_9(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_579_10(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_579_11(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_579_12(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_13(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_579_14(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_579_15(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_16(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1]) {
    return rewrite_579_17(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && node[0][0][0] == node[1][1]) {
    return rewrite_579_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && node[0][0][0] == node[1][1]) {
    return rewrite_579_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && node[0][0][0] == node[1][1]) {
    return rewrite_579_20(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && node[0][0][0] == node[1][0] && true) {
    return rewrite_579_21(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && node[0][0][0] == node[1][0] && true) {
    return rewrite_579_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true) {
    return rewrite_579_24(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true) {
    return rewrite_579_25(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_579_26(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true) {
    return rewrite_579_28(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && node[0][0][0] == node[1][0] && true) {
    return rewrite_579_29(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_579_30(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && node[0][0][0] == node[1][1]) {
    return rewrite_579_31(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_579_32(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_579_33(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_579_34(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true) {
    return rewrite_579_35(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_36(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1]) {
    return rewrite_579_37(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_579_38(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && node[0][0][0] == node[1][1]) {
    return rewrite_579_39(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1]) {
    return rewrite_579_40(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && node[0][0][0] == node[1][1]) {
    return rewrite_579_41(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1]) {
    return rewrite_579_42(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && node[0][0][0] == node[1][0] && true) {
    return rewrite_579_43(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1]) {
    return rewrite_579_44(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_45(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && node[0][0][0] == node[1][0] && true) {
    return rewrite_579_46(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && predicates[156] && true && true && true) {
    return rewrite_579_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_579(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_583_0(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_583_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_583_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && predicates[67] && true && true) {
    return rewrite_583_3(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_583_4(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && predicates[67] && true && true) {
    return rewrite_583_5(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_583_6(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_583_7(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_583_8(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_583_9(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_583_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_583_11(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && predicates[67] && true && true) {
    return rewrite_583_12(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_583_13(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_583_14(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && predicates[67] && true && true) {
    return rewrite_583_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && predicates[67] && true && true) {
    return rewrite_583_16(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_583_17(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && predicates[67] && true && true) {
    return rewrite_583_18(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && predicates[67] && true && true) {
    return rewrite_583_19(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_583_20(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_583_21(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_583_22(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_583_23(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && predicates[67] && true && true) {
    return rewrite_583_24(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && predicates[67] && true && true) {
    return rewrite_583_25(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_583_26(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && predicates[67] && true && true) {
    return rewrite_583_27(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && predicates[67] && true && true) {
    return rewrite_583_28(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_583_29(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_583_30(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_583_31(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && predicates[67] && true && true) {
    return rewrite_583_32(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_583_33(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_583_34(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_583_35(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_583_36(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_583_37(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_583_38(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && predicates[67] && true && true) {
    return rewrite_583_39(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_583_40(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && predicates[67] && true && true) {
    return rewrite_583_41(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_583_42(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && predicates[67] && true && true) {
    return rewrite_583_43(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_583_44(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_583_45(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_583_46(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && predicates[67] && true && true) {
    return rewrite_583_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_583(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && predicates[48] && true && true && true && true) {
    return rewrite_584_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && predicates[44] && true && true) {
    return rewrite_584_1(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && true && true && predicates[79] && true && true) {
    return rewrite_584_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && true && true && predicates[54] && true && true) {
    return rewrite_584_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && predicates[15] && true && true && true) {
    return rewrite_584_4(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && true && predicates[121] && true && true && true) {
    return rewrite_584_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_584_6(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && true && true && predicates[54] && true && true) {
    return rewrite_584_7(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && predicates[173] && true && true && true && true) {
    return rewrite_584_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && true && predicates[109] && true && true && true) {
    return rewrite_584_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && predicates[44] && true && true) {
    return rewrite_584_10(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && true && predicates[109] && true && true && true) {
    return rewrite_584_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_584_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && predicates[143] && true && true && true && true) {
    return rewrite_584_13(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && true && true && predicates[54] && true && true) {
    return rewrite_584_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && predicates[44] && true && true) {
    return rewrite_584_15(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && true && predicates[121] && true && true && true) {
    return rewrite_584_16(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && predicates[69] && true && true && true) {
    return rewrite_584_17(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && predicates[15] && true && true && true) {
    return rewrite_584_18(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[81] && true && predicates[79] && true && true) {
    return rewrite_584_19(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && true && true && predicates[171] && true) {
    return rewrite_584_20(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && predicates[173] && true && true && true && true) {
    return rewrite_584_21(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && predicates[33] && true && true && true) {
    return rewrite_584_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && predicates[143] && true && true && true && true) {
    return rewrite_584_23(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && predicates[33] && true && true && true) {
    return rewrite_584_24(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && predicates[48] && true && true && true && true) {
    return rewrite_584_25(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && true && true && predicates[79] && true && true) {
    return rewrite_584_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && predicates[76] && true && true && true && true) {
    return rewrite_584_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && predicates[15] && true && true && true) {
    return rewrite_584_28(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && predicates[143] && true && true && true && true) {
    return rewrite_584_29(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && predicates[33] && true && true && true) {
    return rewrite_584_30(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && true && true && predicates[171] && true) {
    return rewrite_584_31(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && predicates[76] && true && true && true && true) {
    return rewrite_584_32(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && true && true && predicates[54] && true && true) {
    return rewrite_584_33(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && true && true && predicates[171] && true) {
    return rewrite_584_34(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && true && predicates[121] && true && true && true) {
    return rewrite_584_35(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && predicates[69] && true && true && true) {
    return rewrite_584_36(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && true && true && predicates[171] && true) {
    return rewrite_584_37(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && true && predicates[121] && true && true && true) {
    return rewrite_584_38(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && predicates[15] && true && true && true) {
    return rewrite_584_39(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && predicates[44] && true && true) {
    return rewrite_584_40(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && true && predicates[133] && true && true && true) {
    return rewrite_584_41(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && true && predicates[81] && true && true) {
    return rewrite_584_42(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && predicates[33] && true && true && true) {
    return rewrite_584_43(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && true && predicates[133] && true && true && true) {
    return rewrite_584_44(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[81] && true && predicates[79] && true && true) {
    return rewrite_584_45(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && predicates[143] && true && true && true && true) {
    return rewrite_584_46(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && true && predicates[81] && true && true) {
    return rewrite_584_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_584(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && true && predicates[67] && true && true) {
    return rewrite_588_0(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && true) {
    return rewrite_588_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && true) {
    return rewrite_588_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_588_3(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_588_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && true && predicates[67] && true && true) {
    return rewrite_588_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_588_6(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_588_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && true && predicates[67] && true && true) {
    return rewrite_588_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && true && true && predicates[67] && true && true) {
    return rewrite_588_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && true && predicates[67] && true && true) {
    return rewrite_588_10(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && true) {
    return rewrite_588_11(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && true) {
    return rewrite_588_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && true && predicates[67] && true && true) {
    return rewrite_588_13(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && true && true && predicates[67] && true && true) {
    return rewrite_588_14(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && true && predicates[67] && true && true) {
    return rewrite_588_15(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_588_16(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && true) {
    return rewrite_588_17(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_588_18(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && true && true && predicates[67] && true && true) {
    return rewrite_588_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && true && predicates[67] && true && true) {
    return rewrite_588_20(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && true) {
    return rewrite_588_21(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && true && true && predicates[67] && true && true) {
    return rewrite_588_22(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_588_23(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && true) {
    return rewrite_588_24(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && true && true && predicates[67] && true && true) {
    return rewrite_588_25(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_588_26(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_588_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_588_28(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_588_29(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && true && true && predicates[67] && true && true) {
    return rewrite_588_30(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && true && true && predicates[67] && true && true) {
    return rewrite_588_31(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_588_32(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && true) {
    return rewrite_588_33(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && true && true && predicates[67] && true && true) {
    return rewrite_588_34(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && true) {
    return rewrite_588_35(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_588_36(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && true && predicates[67] && true && true) {
    return rewrite_588_37(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && true) {
    return rewrite_588_38(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && true && predicates[67] && true && true) {
    return rewrite_588_39(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && true) {
    return rewrite_588_40(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && true) {
    return rewrite_588_41(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && true && predicates[67] && true && true) {
    return rewrite_588_42(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_588_43(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_588_44(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_588_45(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && true && predicates[67] && true && true) {
    return rewrite_588_46(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && true && predicates[67] && true && true) {
    return rewrite_588_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_588(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[118] && true && true) {
    return rewrite_598_0(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_1(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && predicates[19] && true) {
    return rewrite_598_2(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[118] && true && true) {
    return rewrite_598_4(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_598_5(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_6(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_598_7(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_598_9(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_598_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_598_11(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && predicates[19] && true) {
    return rewrite_598_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_598_13(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_598_14(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_598_15(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_16(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_17(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_598_18(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && predicates[19] && true) {
    return rewrite_598_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && predicates[19] && true) {
    return rewrite_598_21(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && predicates[19] && true) {
    return rewrite_598_23(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_598_24(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_598_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && predicates[19] && true) {
    return rewrite_598_26(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_27(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_28(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_598_29(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[118] && true && true) {
    return rewrite_598_30(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_31(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_598_32(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && predicates[19] && true) {
    return rewrite_598_33(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[118] && true && true) {
    return rewrite_598_34(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_598_35(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_598_36(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_598_37(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_38(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_39(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_40(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && predicates[19] && true) {
    return rewrite_598_41(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_598_42(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_598_43(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && predicates[19] && true) {
    return rewrite_598_44(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_45(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[118] && true && true) {
    return rewrite_598_46(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_47(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_598_48(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_49(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_598_50(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_598_51(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_598_52(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && predicates[19] && true) {
    return rewrite_598_53(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_598_54(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_598_55(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_598_56(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_598_57(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_58(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && predicates[19] && true) {
    return rewrite_598_59(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_598_60(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_61(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_62(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && predicates[19] && true) {
    return rewrite_598_63(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_64(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_598_65(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_598_66(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_67(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_598_68(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[118] && true && true) {
    return rewrite_598_69(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_598_70(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_598_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_598(TNode node, const bool* predicates) {
  if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_599_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[151] && true && true && true && true) {
    return rewrite_599_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && predicates[78] && true && true) {
    return rewrite_599_2(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[68] && true && true && true) {
    return rewrite_599_3(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_599_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && predicates[78] && true && true) {
    return rewrite_599_5(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_599_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[151] && true && true && true && true) {
    return rewrite_599_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_599_8(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_599_9(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_599_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_599_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && predicates[78] && true && true) {
    return rewrite_599_12(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[68] && true && true && true) {
    return rewrite_599_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_599_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[151] && true && true && true && true) {
    return rewrite_599_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[68] && true && true && true) {
    return rewrite_599_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[151] && true && true && true && true) {
    return rewrite_599_17(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_599_18(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_599_19(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_599_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[151] && true && true && true && true) {
    return rewrite_599_21(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_599_22(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[68] && true && true && true) {
    return rewrite_599_23(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[151] && true && true && true && true) {
    return rewrite_599_24(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && predicates[78] && true && true) {
    return rewrite_599_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_599_26(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[151] && true && true && true && true) {
    return rewrite_599_27(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && predicates[78] && true && true) {
    return rewrite_599_28(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_599_29(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && predicates[78] && true && true) {
    return rewrite_599_30(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_599_31(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && predicates[78] && true && true) {
    return rewrite_599_32(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_599_33(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && predicates[78] && true && true) {
    return rewrite_599_34(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_599_35(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[68] && true && true && true) {
    return rewrite_599_36(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_599_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_599_38(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_599_39(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[68] && true && true && true) {
    return rewrite_599_40(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_599_41(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[68] && true && true && true) {
    return rewrite_599_42(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_599_43(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_599_44(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_599_45(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[151] && true && true && true && true) {
    return rewrite_599_46(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[68] && true && true && true) {
    return rewrite_599_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_599(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_4(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_15(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_16(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_17(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_18(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_20(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_21(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_23(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_24(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_25(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_27(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_28(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_29(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_30(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_31(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_32(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_33(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_34(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_35(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_36(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_37(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_38(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_39(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_40(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_41(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_42(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_603_43(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && predicates[156] && true && true && true) {
    return rewrite_603_44(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_45(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_603_46(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_603_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_603(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_0(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_8(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_9(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_10(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_11(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_13(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_14(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_15(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_16(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_17(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_18(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_20(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_21(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_23(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_24(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_25(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_28(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_29(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_30(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_31(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_32(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_33(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_34(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_35(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_36(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_37(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_38(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_39(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_40(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_607_41(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_42(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_43(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_607_44(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_45(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_607_46(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_607_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_607(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_611_0(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_611_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_611_2(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_3(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_611_4(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_611_5(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_6(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_611_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_611_8(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_611_9(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_10(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_611_11(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_611_12(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_611_13(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_611_14(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_15(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_611_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_17(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_611_18(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_611_19(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_611_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_611_21(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_611_22(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_23(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_24(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_25(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_611_26(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_611_27(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_611_28(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_29(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_611_30(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_611_31(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_611_32(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_611_33(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_611_34(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_35(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_36(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_611_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_38(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_611_39(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_40(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_41(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_611_42(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_43(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_611_44(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_611_45(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_611_46(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_611_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_611(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && predicates[18] && true && true && true) {
    return rewrite_614_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && predicates[18] && true && true && true) {
    return rewrite_614_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && predicates[41] && true && true && true && true) {
    return rewrite_614_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && predicates[18] && true && true && true) {
    return rewrite_614_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && predicates[41] && true && true && true && true) {
    return rewrite_614_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && predicates[122] && true && true && true) {
    return rewrite_614_5(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && predicates[28] && true && true) {
    return rewrite_614_6(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && predicates[28] && true && true) {
    return rewrite_614_7(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && predicates[18] && true && true && true) {
    return rewrite_614_8(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && predicates[41] && true && true && true && true) {
    return rewrite_614_9(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && predicates[28] && true && true) {
    return rewrite_614_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && predicates[41] && true && true && true && true) {
    return rewrite_614_11(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && predicates[41] && true && true && true && true) {
    return rewrite_614_12(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && predicates[122] && true && true && true) {
    return rewrite_614_13(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && predicates[28] && true && true) {
    return rewrite_614_14(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && predicates[18] && true && true && true) {
    return rewrite_614_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && predicates[18] && true && true && true) {
    return rewrite_614_16(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && predicates[28] && true && true) {
    return rewrite_614_17(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && predicates[18] && true && true && true) {
    return rewrite_614_18(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && predicates[41] && true && true && true && true) {
    return rewrite_614_19(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && predicates[122] && true && true && true) {
    return rewrite_614_20(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && predicates[122] && true && true && true) {
    return rewrite_614_21(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && predicates[28] && true && true) {
    return rewrite_614_22(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && predicates[18] && true && true && true) {
    return rewrite_614_23(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && predicates[122] && true && true && true) {
    return rewrite_614_24(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && predicates[28] && true && true) {
    return rewrite_614_25(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && predicates[41] && true && true && true && true) {
    return rewrite_614_26(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && predicates[122] && true && true && true) {
    return rewrite_614_27(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && predicates[28] && true && true) {
    return rewrite_614_28(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && predicates[28] && true && true) {
    return rewrite_614_29(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && predicates[41] && true && true && true && true) {
    return rewrite_614_30(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && predicates[18] && true && true && true) {
    return rewrite_614_31(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && predicates[18] && true && true && true) {
    return rewrite_614_32(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && predicates[28] && true && true) {
    return rewrite_614_33(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && predicates[18] && true && true && true) {
    return rewrite_614_34(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && predicates[18] && true && true && true) {
    return rewrite_614_35(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && predicates[28] && true && true) {
    return rewrite_614_36(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && predicates[18] && true && true && true) {
    return rewrite_614_37(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && predicates[18] && true && true && true) {
    return rewrite_614_38(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && predicates[28] && true && true) {
    return rewrite_614_39(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && predicates[28] && true && true) {
    return rewrite_614_40(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && predicates[122] && true && true && true) {
    return rewrite_614_41(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && predicates[18] && true && true && true) {
    return rewrite_614_42(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && predicates[28] && true && true) {
    return rewrite_614_43(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && predicates[28] && true && true) {
    return rewrite_614_44(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && predicates[18] && true && true && true) {
    return rewrite_614_45(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && predicates[122] && true && true && true) {
    return rewrite_614_46(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && predicates[28] && true && true) {
    return rewrite_614_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_614(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && predicates[46] && true && true && true) {
    return rewrite_620_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && predicates[97] && true && true) {
    return rewrite_620_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && predicates[71] && true && true && true && true) {
    return rewrite_620_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_620_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && predicates[112] && true && true && true && true && true) {
    return rewrite_620_4(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && true && predicates[9] && true && true) {
    return rewrite_620_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && predicates[75] && true && true && true) {
    return rewrite_620_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && predicates[34] && true && true && true && true && true) {
    return rewrite_620_7(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[79] && true && predicates[24] && true) {
    return rewrite_620_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && true && predicates[39] && true && true && true) {
    return rewrite_620_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && predicates[150] && true && true && true && true) {
    return rewrite_620_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_620_11(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && predicates[117] && true && true && true && true) {
    return rewrite_620_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_620_13(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[121] && true && predicates[40] && true && true) {
    return rewrite_620_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && predicates[168] && true && true && true) {
    return rewrite_620_15(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && predicates[150] && true && true && true && true) {
    return rewrite_620_16(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && predicates[126] && true && true && true) {
    return rewrite_620_17(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && predicates[65] && true && true && true && true) {
    return rewrite_620_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && predicates[157] && true && true && true && true) {
    return rewrite_620_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_620_20(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[79] && predicates[142] && true && true) {
    return rewrite_620_21(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && predicates[34] && true && true && true && true && true) {
    return rewrite_620_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && predicates[157] && true && true && true && true) {
    return rewrite_620_23(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[121] && true && predicates[40] && true && true) {
    return rewrite_620_24(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && predicates[126] && true && true && true) {
    return rewrite_620_25(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && true && predicates[9] && true && true) {
    return rewrite_620_26(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && predicates[57] && true && true && true && true && true) {
    return rewrite_620_27(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && predicates[46] && true && true && true) {
    return rewrite_620_28(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && predicates[63] && true && true && true && true) {
    return rewrite_620_29(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[79] && true && predicates[24] && true) {
    return rewrite_620_30(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[121] && predicates[10] && true && true && true) {
    return rewrite_620_31(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && predicates[97] && true && true) {
    return rewrite_620_32(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[79] && predicates[142] && true && true) {
    return rewrite_620_33(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && predicates[57] && true && true && true && true && true) {
    return rewrite_620_34(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && predicates[75] && true && true && true) {
    return rewrite_620_35(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && predicates[64] && true && true && true) {
    return rewrite_620_36(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && predicates[71] && true && true && true && true) {
    return rewrite_620_37(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && predicates[61] && true && true && true && true) {
    return rewrite_620_38(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && predicates[64] && true && true && true) {
    return rewrite_620_39(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && predicates[63] && true && true && true && true) {
    return rewrite_620_40(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && predicates[112] && true && true && true && true && true) {
    return rewrite_620_41(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && true && predicates[39] && true && true && true) {
    return rewrite_620_42(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && predicates[65] && true && true && true && true) {
    return rewrite_620_43(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && predicates[168] && true && true && true) {
    return rewrite_620_44(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[121] && predicates[10] && true && true && true) {
    return rewrite_620_45(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && predicates[61] && true && true && true && true) {
    return rewrite_620_46(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && predicates[117] && true && true && true && true) {
    return rewrite_620_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_620(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[48] && true && true && true && true) {
    return rewrite_622_0(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && predicates[81] && true && true) {
    return rewrite_622_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && predicates[120] && true && true) {
    return rewrite_622_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[173] && true && true && true && true) {
    return rewrite_622_3(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && predicates[81] && true && true) {
    return rewrite_622_4(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && predicates[109] && true && true && true) {
    return rewrite_622_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_622_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_622_7(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && predicates[81] && true && true) {
    return rewrite_622_8(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[133] && true && true && true) {
    return rewrite_622_9(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && predicates[109] && true && true && true) {
    return rewrite_622_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && predicates[145] && true) {
    return rewrite_622_11(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[173] && true && true && true && true) {
    return rewrite_622_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && predicates[76] && true && true && true && true) {
    return rewrite_622_13(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && predicates[91] && true && true && true) {
    return rewrite_622_14(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && predicates[163] && true && true) {
    return rewrite_622_15(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && predicates[145] && true) {
    return rewrite_622_16(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[48] && true && true && true && true) {
    return rewrite_622_17(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && predicates[163] && true && true) {
    return rewrite_622_18(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[48] && true && true && true && true) {
    return rewrite_622_19(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[133] && true && true && true) {
    return rewrite_622_20(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[48] && true && true && true && true) {
    return rewrite_622_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[173] && true && true && true && true) {
    return rewrite_622_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_622_23(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && predicates[109] && true && true && true) {
    return rewrite_622_24(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && predicates[120] && true && true) {
    return rewrite_622_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && predicates[69] && true && true && true) {
    return rewrite_622_26(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && predicates[76] && true && true && true && true) {
    return rewrite_622_27(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && predicates[120] && true && true) {
    return rewrite_622_28(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[173] && true && true && true && true) {
    return rewrite_622_29(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && predicates[76] && true && true && true && true) {
    return rewrite_622_30(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && predicates[69] && true && true && true) {
    return rewrite_622_31(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[133] && true && true && true) {
    return rewrite_622_32(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && predicates[69] && true && true && true) {
    return rewrite_622_33(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_622_34(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[133] && true && true && true) {
    return rewrite_622_35(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && predicates[163] && true && true) {
    return rewrite_622_36(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && predicates[109] && true && true && true) {
    return rewrite_622_37(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && predicates[91] && true && true && true) {
    return rewrite_622_38(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && predicates[69] && true && true && true) {
    return rewrite_622_39(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && predicates[163] && true && true) {
    return rewrite_622_40(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && predicates[91] && true && true && true) {
    return rewrite_622_41(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && predicates[145] && true) {
    return rewrite_622_42(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && predicates[81] && true && true) {
    return rewrite_622_43(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && predicates[145] && true) {
    return rewrite_622_44(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && predicates[76] && true && true && true && true) {
    return rewrite_622_45(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && predicates[91] && true && true && true) {
    return rewrite_622_46(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && predicates[120] && true && true) {
    return rewrite_622_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_622(TNode node, const bool* predicates) {
  if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && predicates[49] && true && true && true && true) {
    return rewrite_623_0(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && predicates[71] && true && true && true && true) {
    return rewrite_623_1(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && predicates[139] && true && true && true) {
    return rewrite_623_2(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && predicates[64] && true && true && true) {
    return rewrite_623_3(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && predicates[38] && true && true) {
    return rewrite_623_4(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && predicates[97] && true && true) {
    return rewrite_623_5(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && predicates[97] && true && true) {
    return rewrite_623_6(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && predicates[112] && true && true && true && true && true) {
    return rewrite_623_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && predicates[34] && true && true && true && true && true) {
    return rewrite_623_8(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && predicates[168] && true && true && true) {
    return rewrite_623_9(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && predicates[157] && true && true && true && true) {
    return rewrite_623_10(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_623_11(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && predicates[164] && true && true && true) {
    return rewrite_623_12(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && predicates[139] && true && true && true) {
    return rewrite_623_13(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && predicates[64] && true && true && true) {
    return rewrite_623_14(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && predicates[97] && true && true) {
    return rewrite_623_15(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && predicates[150] && true && true && true && true) {
    return rewrite_623_16(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && predicates[148] && true && true) {
    return rewrite_623_17(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_623_18(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && predicates[75] && true && true && true) {
    return rewrite_623_19(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_623_20(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_623_21(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && predicates[80] && true) {
    return rewrite_623_22(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && predicates[49] && true && true && true && true) {
    return rewrite_623_23(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && predicates[150] && true && true && true && true) {
    return rewrite_623_24(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && predicates[34] && true && true && true && true && true) {
    return rewrite_623_25(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && predicates[71] && true && true && true && true) {
    return rewrite_623_26(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && predicates[63] && true && true && true && true) {
    return rewrite_623_27(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && predicates[80] && true) {
    return rewrite_623_28(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && predicates[75] && true && true && true) {
    return rewrite_623_29(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && predicates[49] && true && true && true && true) {
    return rewrite_623_30(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && predicates[164] && true && true && true) {
    return rewrite_623_31(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_623_32(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && predicates[97] && true && true) {
    return rewrite_623_33(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && predicates[150] && true && true && true && true) {
    return rewrite_623_34(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && predicates[139] && true && true && true) {
    return rewrite_623_35(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && predicates[64] && true && true && true) {
    return rewrite_623_36(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && predicates[168] && true && true && true) {
    return rewrite_623_37(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && predicates[63] && true && true && true && true) {
    return rewrite_623_38(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && predicates[168] && true && true && true) {
    return rewrite_623_39(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && predicates[148] && true && true) {
    return rewrite_623_40(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && predicates[157] && true && true && true && true) {
    return rewrite_623_41(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_623_42(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && predicates[38] && true && true) {
    return rewrite_623_43(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && predicates[164] && true && true && true) {
    return rewrite_623_44(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && predicates[63] && true && true && true && true) {
    return rewrite_623_45(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && predicates[139] && true && true && true) {
    return rewrite_623_46(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && predicates[64] && true && true && true) {
    return rewrite_623_47(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && predicates[71] && true && true && true && true) {
    return rewrite_623_48(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && predicates[38] && true && true) {
    return rewrite_623_49(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && predicates[168] && true && true && true) {
    return rewrite_623_50(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && predicates[34] && true && true && true && true && true) {
    return rewrite_623_51(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && predicates[112] && true && true && true && true && true) {
    return rewrite_623_52(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_623_53(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && predicates[148] && true && true) {
    return rewrite_623_54(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && predicates[75] && true && true && true) {
    return rewrite_623_55(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && predicates[63] && true && true && true && true) {
    return rewrite_623_56(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && predicates[112] && true && true && true && true && true) {
    return rewrite_623_57(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_623_58(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && predicates[148] && true && true) {
    return rewrite_623_59(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && predicates[71] && true && true && true && true) {
    return rewrite_623_60(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && predicates[80] && true) {
    return rewrite_623_61(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && predicates[157] && true && true && true && true) {
    return rewrite_623_62(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && predicates[75] && true && true && true) {
    return rewrite_623_63(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && predicates[150] && true && true && true && true) {
    return rewrite_623_64(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && predicates[80] && true) {
    return rewrite_623_65(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && predicates[49] && true && true && true && true) {
    return rewrite_623_66(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && predicates[164] && true && true && true) {
    return rewrite_623_67(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && predicates[157] && true && true && true && true) {
    return rewrite_623_68(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && predicates[38] && true && true) {
    return rewrite_623_69(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && predicates[112] && true && true && true && true && true) {
    return rewrite_623_70(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && predicates[34] && true && true && true && true && true) {
    return rewrite_623_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_623(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_0(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_1(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_2(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_626_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && predicates[118] && true && true) {
    return rewrite_626_4(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && predicates[19] && true) {
    return rewrite_626_5(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && predicates[118] && true && true) {
    return rewrite_626_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && predicates[19] && true) {
    return rewrite_626_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && predicates[118] && true && true) {
    return rewrite_626_8(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_9(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_10(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_626_11(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && predicates[19] && true) {
    return rewrite_626_12(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && predicates[118] && true && true) {
    return rewrite_626_14(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_15(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_16(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && predicates[118] && true && true) {
    return rewrite_626_18(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_626_19(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_20(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_22(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_23(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_626_24(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && predicates[19] && true) {
    return rewrite_626_25(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_26(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_626_27(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_626_28(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && predicates[118] && true && true) {
    return rewrite_626_29(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_30(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && predicates[19] && true) {
    return rewrite_626_31(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_32(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_33(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_34(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_35(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_36(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_37(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_626_38(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && predicates[19] && true) {
    return rewrite_626_39(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_40(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_41(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && predicates[19] && true) {
    return rewrite_626_42(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_43(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && predicates[118] && true && true) {
    return rewrite_626_44(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && predicates[19] && true) {
    return rewrite_626_45(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && predicates[118] && true && true) {
    return rewrite_626_46(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && predicates[118] && true && true) {
    return rewrite_626_47(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_48(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_49(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && predicates[118] && true && true) {
    return rewrite_626_50(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && predicates[118] && true && true) {
    return rewrite_626_51(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_52(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_53(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_54(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && predicates[118] && true && true) {
    return rewrite_626_55(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_626_56(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && predicates[19] && true) {
    return rewrite_626_57(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_626_58(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_59(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_60(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_61(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_62(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_626_63(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_626_64(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && predicates[19] && true) {
    return rewrite_626_65(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_626_66(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_626_67(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && predicates[19] && true) {
    return rewrite_626_68(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_626_69(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && predicates[19] && true) {
    return rewrite_626_70(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && predicates[19] && true) {
    return rewrite_626_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_626(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && predicates[65] && true && true && true && true) {
    return rewrite_638_0(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && predicates[39] && true && true && true) {
    return rewrite_638_1(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && predicates[112] && true && true && true && true && true) {
    return rewrite_638_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && predicates[57] && true && true && true && true && true) {
    return rewrite_638_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && predicates[50] && true && true) {
    return rewrite_638_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && predicates[38] && true && true) {
    return rewrite_638_5(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && predicates[49] && true && true && true && true) {
    return rewrite_638_6(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && predicates[61] && true && true && true && true) {
    return rewrite_638_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_638_8(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && predicates[50] && true && true) {
    return rewrite_638_9(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && predicates[168] && true && true && true) {
    return rewrite_638_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && predicates[164] && true && true && true) {
    return rewrite_638_11(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_638_12(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && predicates[117] && true && true && true && true) {
    return rewrite_638_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && predicates[34] && true && true && true && true && true) {
    return rewrite_638_14(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && predicates[127] && true) {
    return rewrite_638_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && predicates[150] && true && true && true && true) {
    return rewrite_638_16(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && predicates[49] && true && true && true && true) {
    return rewrite_638_17(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && predicates[164] && true && true && true) {
    return rewrite_638_18(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && predicates[63] && true && true && true && true) {
    return rewrite_638_19(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && predicates[46] && true && true && true) {
    return rewrite_638_20(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && predicates[146] && true && true && true) {
    return rewrite_638_21(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && predicates[139] && true && true && true) {
    return rewrite_638_22(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && predicates[85] && true && true) {
    return rewrite_638_23(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && predicates[63] && true && true && true && true) {
    return rewrite_638_24(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && predicates[71] && true && true && true && true) {
    return rewrite_638_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && predicates[150] && true && true && true && true) {
    return rewrite_638_26(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && predicates[117] && true && true && true && true) {
    return rewrite_638_27(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && predicates[71] && true && true && true && true) {
    return rewrite_638_28(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && predicates[34] && true && true && true && true && true) {
    return rewrite_638_29(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && predicates[65] && true && true && true && true) {
    return rewrite_638_30(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_638_31(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && predicates[126] && true && true && true) {
    return rewrite_638_32(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && predicates[39] && true && true && true) {
    return rewrite_638_33(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && predicates[38] && true && true) {
    return rewrite_638_34(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && predicates[46] && true && true && true) {
    return rewrite_638_35(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && predicates[168] && true && true && true) {
    return rewrite_638_36(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && predicates[126] && true && true && true) {
    return rewrite_638_37(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && predicates[9] && true && true) {
    return rewrite_638_38(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && predicates[57] && true && true && true && true && true) {
    return rewrite_638_39(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && predicates[127] && true) {
    return rewrite_638_40(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_638_41(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && predicates[146] && true && true && true) {
    return rewrite_638_42(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && predicates[139] && true && true && true) {
    return rewrite_638_43(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && predicates[85] && true && true) {
    return rewrite_638_44(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && predicates[61] && true && true && true && true) {
    return rewrite_638_45(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && predicates[112] && true && true && true && true && true) {
    return rewrite_638_46(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && predicates[9] && true && true) {
    return rewrite_638_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_638(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[109] && true && true && true && true) {
    return rewrite_639_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[124] && true && true && true) {
    return rewrite_639_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && predicates[159] && true && true && true && predicates[77] && true) {
    return rewrite_639_2(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && predicates[82] && true) {
    return rewrite_639_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && predicates[56] && true && true && true) {
    return rewrite_639_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && predicates[159] && true && true && true && predicates[77] && true) {
    return rewrite_639_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && predicates[166] && true && true && true && true && true) {
    return rewrite_639_6(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[30] && true && true) {
    return rewrite_639_7(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[30] && true && true) {
    return rewrite_639_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[124] && true && true && true) {
    return rewrite_639_9(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[124] && true && true && true) {
    return rewrite_639_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[54] && true && true && true) {
    return rewrite_639_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && predicates[82] && true) {
    return rewrite_639_12(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && predicates[82] && true) {
    return rewrite_639_13(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && predicates[56] && true && true && true) {
    return rewrite_639_14(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && predicates[145] && true && true) {
    return rewrite_639_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[30] && true && true) {
    return rewrite_639_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_639_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[124] && true && true && true) {
    return rewrite_639_18(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[30] && true && true) {
    return rewrite_639_19(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[54] && true && true && true) {
    return rewrite_639_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[109] && true && true && true && true) {
    return rewrite_639_21(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[171] && true && true) {
    return rewrite_639_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[124] && true && true && true) {
    return rewrite_639_23(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[116] && true && true && true && true) {
    return rewrite_639_24(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[109] && true && true && true && true) {
    return rewrite_639_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[116] && true && true && true && true) {
    return rewrite_639_26(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_639_27(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[81] && true && true && true) {
    return rewrite_639_28(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[81] && true && true && true) {
    return rewrite_639_29(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[30] && true && true) {
    return rewrite_639_30(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[30] && true && true) {
    return rewrite_639_31(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[81] && true && true && true) {
    return rewrite_639_32(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && predicates[140] && true && predicates[77] && true) {
    return rewrite_639_33(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && predicates[145] && true && true) {
    return rewrite_639_34(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[171] && true && true) {
    return rewrite_639_35(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && predicates[163] && true && true && predicates[77] && true) {
    return rewrite_639_36(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && predicates[163] && true && true && predicates[77] && true) {
    return rewrite_639_37(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[30] && true && true) {
    return rewrite_639_38(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[30] && true && true) {
    return rewrite_639_39(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[116] && true && true && true && true) {
    return rewrite_639_40(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && predicates[159] && true && true && true && predicates[77] && true) {
    return rewrite_639_41(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_639_42(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_639_43(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && predicates[140] && true && predicates[77] && true) {
    return rewrite_639_44(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[171] && true && true) {
    return rewrite_639_45(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[124] && true && true && true) {
    return rewrite_639_46(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[30] && true && true) {
    return rewrite_639_47(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && predicates[56] && true && true && true) {
    return rewrite_639_48(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && predicates[82] && true) {
    return rewrite_639_49(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[30] && true && true) {
    return rewrite_639_50(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && predicates[56] && true && true && true) {
    return rewrite_639_51(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[109] && true && true && true && true) {
    return rewrite_639_52(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && predicates[140] && true && predicates[77] && true) {
    return rewrite_639_53(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[124] && true && true && true) {
    return rewrite_639_54(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[171] && true && true) {
    return rewrite_639_55(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[30] && true && true) {
    return rewrite_639_56(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[54] && true && true && true) {
    return rewrite_639_57(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && predicates[163] && true && true && predicates[77] && true) {
    return rewrite_639_58(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && predicates[166] && true && true && true && true && true) {
    return rewrite_639_59(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && predicates[166] && true && true && true && true && true) {
    return rewrite_639_60(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && predicates[145] && true && true) {
    return rewrite_639_61(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[81] && true && true && true) {
    return rewrite_639_62(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && predicates[166] && true && true && true && true && true) {
    return rewrite_639_63(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[54] && true && true && true) {
    return rewrite_639_64(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && predicates[140] && true && predicates[77] && true) {
    return rewrite_639_65(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && predicates[159] && true && true && true && predicates[77] && true) {
    return rewrite_639_66(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[30] && true && true) {
    return rewrite_639_67(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && predicates[145] && true && true) {
    return rewrite_639_68(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[116] && true && true && true && true) {
    return rewrite_639_69(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && predicates[163] && true && true && predicates[77] && true) {
    return rewrite_639_70(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[124] && true && true && true) {
    return rewrite_639_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_639(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && predicates[138] && true && true && true && true && true) {
    return rewrite_640_0(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && predicates[99] && true && true && true && true) {
    return rewrite_640_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && predicates[5] && true && true && true) {
    return rewrite_640_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && predicates[29] && true && true && true && true && true) {
    return rewrite_640_3(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && predicates[110] && true && true && true && true) {
    return rewrite_640_4(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && predicates[138] && true && true && true && true && true) {
    return rewrite_640_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && predicates[23] && true && true && true && true && true && true) {
    return rewrite_640_6(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && predicates[7] && true && true && true && true) {
    return rewrite_640_7(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && predicates[99] && true && true && true && true) {
    return rewrite_640_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && predicates[0] && true && true && true && true && true) {
    return rewrite_640_9(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && predicates[106] && true && true && true) {
    return rewrite_640_10(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && predicates[110] && true && true && true && true) {
    return rewrite_640_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && predicates[7] && true && true && true && true) {
    return rewrite_640_12(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && predicates[7] && true && true && true && true) {
    return rewrite_640_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && predicates[23] && true && true && true && true && true && true) {
    return rewrite_640_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && predicates[0] && true && true && true && true && true) {
    return rewrite_640_15(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && predicates[134] && true && true) {
    return rewrite_640_16(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && predicates[6] && true && true && true) {
    return rewrite_640_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && predicates[0] && true && true && true && true && true) {
    return rewrite_640_18(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && predicates[5] && true && true && true) {
    return rewrite_640_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && predicates[138] && true && true && true && true && true) {
    return rewrite_640_20(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && predicates[5] && true && true && true) {
    return rewrite_640_21(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && predicates[106] && true && true && true) {
    return rewrite_640_22(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && predicates[6] && true && true && true) {
    return rewrite_640_23(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && predicates[5] && true && true && true) {
    return rewrite_640_24(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && predicates[138] && true && true && true && true && true) {
    return rewrite_640_25(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && predicates[134] && true && true) {
    return rewrite_640_26(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && predicates[134] && true && true) {
    return rewrite_640_27(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && predicates[29] && true && true && true && true && true) {
    return rewrite_640_28(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && predicates[29] && true && true && true && true && true) {
    return rewrite_640_29(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && predicates[58] && true && true && true && true) {
    return rewrite_640_30(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && predicates[58] && true && true && true && true) {
    return rewrite_640_31(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && predicates[58] && true && true && true && true) {
    return rewrite_640_32(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && predicates[58] && true && true && true && true) {
    return rewrite_640_33(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && predicates[6] && true && true && true) {
    return rewrite_640_34(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && predicates[106] && true && true && true) {
    return rewrite_640_35(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && predicates[23] && true && true && true && true && true && true) {
    return rewrite_640_36(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && predicates[7] && true && true && true && true) {
    return rewrite_640_37(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && predicates[110] && true && true && true && true) {
    return rewrite_640_38(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && predicates[110] && true && true && true && true) {
    return rewrite_640_39(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && predicates[99] && true && true && true && true) {
    return rewrite_640_40(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && predicates[29] && true && true && true && true && true) {
    return rewrite_640_41(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && predicates[134] && true && true) {
    return rewrite_640_42(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && predicates[0] && true && true && true && true && true) {
    return rewrite_640_43(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && predicates[99] && true && true && true && true) {
    return rewrite_640_44(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && predicates[23] && true && true && true && true && true && true) {
    return rewrite_640_45(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && predicates[106] && true && true && true) {
    return rewrite_640_46(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && predicates[6] && true && true && true) {
    return rewrite_640_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_640(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_652_0(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && predicates[49] && true && true && true && true) {
    return rewrite_652_1(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && predicates[71] && true && true && true && true) {
    return rewrite_652_2(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && predicates[1] && true && true && true && true) {
    return rewrite_652_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && predicates[1] && true && true && true && true) {
    return rewrite_652_4(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && predicates[167] && true && true && true) {
    return rewrite_652_5(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && predicates[153] && true && true) {
    return rewrite_652_6(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && predicates[153] && true && true) {
    return rewrite_652_7(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && predicates[139] && true && true && true) {
    return rewrite_652_8(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && predicates[117] && true && true && true && true) {
    return rewrite_652_9(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && predicates[167] && true && true && true) {
    return rewrite_652_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && predicates[1] && true && true && true && true) {
    return rewrite_652_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && predicates[146] && true && true && true) {
    return rewrite_652_12(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && predicates[49] && true && true && true && true) {
    return rewrite_652_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_652_14(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && predicates[61] && true && true && true && true) {
    return rewrite_652_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_652_16(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && predicates[112] && true && true && true && true && true) {
    return rewrite_652_17(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && predicates[114] && true) {
    return rewrite_652_18(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && predicates[139] && true && true && true) {
    return rewrite_652_19(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_652_20(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && predicates[71] && true && true && true && true) {
    return rewrite_652_21(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && predicates[126] && true && true && true) {
    return rewrite_652_22(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && predicates[139] && true && true && true) {
    return rewrite_652_23(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && predicates[153] && true && true) {
    return rewrite_652_24(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && predicates[112] && true && true && true && true && true) {
    return rewrite_652_25(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && predicates[49] && true && true && true && true) {
    return rewrite_652_26(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && predicates[146] && true && true && true) {
    return rewrite_652_27(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && predicates[57] && true && true && true && true && true) {
    return rewrite_652_28(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && predicates[94] && true && true) {
    return rewrite_652_29(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && predicates[50] && true && true) {
    return rewrite_652_30(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && predicates[94] && true && true) {
    return rewrite_652_31(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && predicates[114] && true) {
    return rewrite_652_32(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && predicates[153] && true && true) {
    return rewrite_652_33(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && predicates[49] && true && true && true && true) {
    return rewrite_652_34(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && predicates[119] && true && true && true && true && true) {
    return rewrite_652_35(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && predicates[90] && true && true && true) {
    return rewrite_652_36(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && predicates[61] && true && true && true && true) {
    return rewrite_652_37(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && predicates[57] && true && true && true && true && true) {
    return rewrite_652_38(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && predicates[61] && true && true && true && true) {
    return rewrite_652_39(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && predicates[126] && true && true && true) {
    return rewrite_652_40(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && predicates[167] && true && true && true) {
    return rewrite_652_41(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && predicates[50] && true && true) {
    return rewrite_652_42(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && predicates[94] && true && true) {
    return rewrite_652_43(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && predicates[117] && true && true && true && true) {
    return rewrite_652_44(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && predicates[146] && true && true && true) {
    return rewrite_652_45(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && predicates[112] && true && true && true && true && true) {
    return rewrite_652_46(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_652_47(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_652_48(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && predicates[71] && true && true && true && true) {
    return rewrite_652_49(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && predicates[57] && true && true && true && true && true) {
    return rewrite_652_50(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && predicates[50] && true && true) {
    return rewrite_652_51(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && predicates[61] && true && true && true && true) {
    return rewrite_652_52(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && predicates[71] && true && true && true && true) {
    return rewrite_652_53(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && predicates[139] && true && true && true) {
    return rewrite_652_54(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && predicates[57] && true && true && true && true && true) {
    return rewrite_652_55(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && predicates[126] && true && true && true) {
    return rewrite_652_56(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && predicates[94] && true && true) {
    return rewrite_652_57(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && predicates[114] && true) {
    return rewrite_652_58(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && predicates[1] && true && true && true && true) {
    return rewrite_652_59(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && predicates[167] && true && true && true) {
    return rewrite_652_60(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && predicates[90] && true && true && true) {
    return rewrite_652_61(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && predicates[126] && true && true && true) {
    return rewrite_652_62(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && predicates[146] && true && true && true) {
    return rewrite_652_63(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && predicates[112] && true && true && true && true && true) {
    return rewrite_652_64(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && predicates[90] && true && true && true) {
    return rewrite_652_65(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && predicates[90] && true && true && true) {
    return rewrite_652_66(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && predicates[117] && true && true && true && true) {
    return rewrite_652_67(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && predicates[50] && true && true) {
    return rewrite_652_68(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && predicates[117] && true && true && true && true) {
    return rewrite_652_69(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && predicates[141] && true && true && true && true && true && true) {
    return rewrite_652_70(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && predicates[114] && true) {
    return rewrite_652_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_652(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && predicates[95] && true && true && true && true) {
    return rewrite_656_0(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && predicates[47] && true && true && true && true) {
    return rewrite_656_1(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && predicates[131] && true && true) {
    return rewrite_656_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && predicates[95] && true && true && true && true) {
    return rewrite_656_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && predicates[149] && true && true && true && true) {
    return rewrite_656_4(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && predicates[83] && true && true && true) {
    return rewrite_656_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && predicates[86] && true && true && true && true && true) {
    return rewrite_656_6(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && predicates[12] && true && true && true && true) {
    return rewrite_656_7(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && predicates[105] && true && true && true && true && true) {
    return rewrite_656_8(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && predicates[131] && true && true) {
    return rewrite_656_9(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && predicates[105] && true && true && true && true && true) {
    return rewrite_656_10(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && predicates[107] && true && true && true) {
    return rewrite_656_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && predicates[149] && true && true && true && true) {
    return rewrite_656_12(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && predicates[107] && true && true && true) {
    return rewrite_656_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && predicates[72] && true && true && true && true && true) {
    return rewrite_656_14(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && predicates[12] && true && true && true && true) {
    return rewrite_656_15(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && predicates[131] && true && true) {
    return rewrite_656_16(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && predicates[149] && true && true && true && true) {
    return rewrite_656_17(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && predicates[47] && true && true && true && true) {
    return rewrite_656_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && predicates[95] && true && true && true && true) {
    return rewrite_656_19(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && predicates[47] && true && true && true && true) {
    return rewrite_656_20(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && predicates[86] && true && true && true && true && true) {
    return rewrite_656_21(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_656_22(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[81] && predicates[135] && true && true && true) {
    return rewrite_656_23(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && predicates[131] && true && true) {
    return rewrite_656_24(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && predicates[149] && true && true && true && true) {
    return rewrite_656_25(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && predicates[72] && true && true && true && true && true) {
    return rewrite_656_26(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && predicates[83] && true && true && true) {
    return rewrite_656_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && predicates[86] && true && true && true && true && true) {
    return rewrite_656_28(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && predicates[86] && true && true && true && true && true) {
    return rewrite_656_29(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && predicates[105] && true && true && true && true && true) {
    return rewrite_656_30(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && predicates[72] && true && true && true && true && true) {
    return rewrite_656_31(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && predicates[12] && true && true && true && true) {
    return rewrite_656_32(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && predicates[95] && true && true && true && true) {
    return rewrite_656_33(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[81] && predicates[135] && true && true && true) {
    return rewrite_656_34(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && predicates[72] && true && true && true && true && true) {
    return rewrite_656_35(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && predicates[105] && true && true && true && true && true) {
    return rewrite_656_36(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && predicates[12] && true && true && true && true) {
    return rewrite_656_37(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_656_38(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && predicates[107] && true && true && true) {
    return rewrite_656_39(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_656_40(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && predicates[83] && true && true && true) {
    return rewrite_656_41(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[81] && predicates[135] && true && true && true) {
    return rewrite_656_42(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && predicates[107] && true && true && true) {
    return rewrite_656_43(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[81] && predicates[135] && true && true && true) {
    return rewrite_656_44(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && predicates[47] && true && true && true && true) {
    return rewrite_656_45(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_656_46(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && predicates[83] && true && true && true) {
    return rewrite_656_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_656(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && predicates[72] && true && true && true && true && true) {
    return rewrite_661_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_661_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && predicates[3] && true && true && true && true) {
    return rewrite_661_2(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && predicates[47] && true && true && true && true) {
    return rewrite_661_3(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && predicates[72] && true && true && true && true && true) {
    return rewrite_661_4(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && predicates[72] && true && true && true && true && true) {
    return rewrite_661_5(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && predicates[47] && true && true && true && true) {
    return rewrite_661_6(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && predicates[11] && true && true) {
    return rewrite_661_7(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && predicates[12] && true && true && true && true) {
    return rewrite_661_8(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && predicates[27] && true && true && true) {
    return rewrite_661_9(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && predicates[105] && true && true && true && true && true) {
    return rewrite_661_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[163] && predicates[128] && true && true && true) {
    return rewrite_661_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && predicates[27] && true && true && true) {
    return rewrite_661_12(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && predicates[135] && true && true && true) {
    return rewrite_661_13(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && predicates[105] && true && true && true && true && true) {
    return rewrite_661_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && predicates[86] && true && true && true && true && true) {
    return rewrite_661_15(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && predicates[3] && true && true && true && true) {
    return rewrite_661_16(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && predicates[3] && true && true && true && true) {
    return rewrite_661_17(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && predicates[149] && true && true && true && true) {
    return rewrite_661_18(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && predicates[72] && true && true && true && true && true) {
    return rewrite_661_19(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[163] && predicates[128] && true && true && true) {
    return rewrite_661_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_661_21(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && predicates[149] && true && true && true && true) {
    return rewrite_661_22(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && predicates[12] && true && true && true && true) {
    return rewrite_661_23(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && predicates[135] && true && true && true) {
    return rewrite_661_24(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && predicates[27] && true && true && true) {
    return rewrite_661_25(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && predicates[105] && true && true && true && true && true) {
    return rewrite_661_26(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_661_27(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && predicates[86] && true && true && true && true && true) {
    return rewrite_661_28(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && predicates[149] && true && true && true && true) {
    return rewrite_661_29(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && predicates[86] && true && true && true && true && true) {
    return rewrite_661_30(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && predicates[135] && true && true && true) {
    return rewrite_661_31(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && predicates[47] && true && true && true && true) {
    return rewrite_661_32(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && predicates[11] && true && true) {
    return rewrite_661_33(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[163] && predicates[128] && true && true && true) {
    return rewrite_661_34(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && predicates[12] && true && true && true && true) {
    return rewrite_661_35(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && predicates[86] && true && true && true && true && true) {
    return rewrite_661_36(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[163] && predicates[128] && true && true && true) {
    return rewrite_661_37(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && predicates[11] && true && true) {
    return rewrite_661_38(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && predicates[135] && true && true && true) {
    return rewrite_661_39(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && predicates[12] && true && true && true && true) {
    return rewrite_661_40(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && predicates[47] && true && true && true && true) {
    return rewrite_661_41(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && predicates[27] && true && true && true) {
    return rewrite_661_42(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && predicates[149] && true && true && true && true) {
    return rewrite_661_43(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && predicates[105] && true && true && true && true && true) {
    return rewrite_661_44(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_661_45(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && predicates[11] && true && true) {
    return rewrite_661_46(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && predicates[3] && true && true && true && true) {
    return rewrite_661_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_661(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_664_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && predicates[68] && true && true) {
    return rewrite_664_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && predicates[173] && true && true && true) {
    return rewrite_664_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_664_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && predicates[68] && true && true) {
    return rewrite_664_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_664_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && predicates[68] && true && true) {
    return rewrite_664_6(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && predicates[133] && true && true) {
    return rewrite_664_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_664_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && predicates[173] && true && true && true) {
    return rewrite_664_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && predicates[52] && true && true && true) {
    return rewrite_664_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && true && predicates[151] && true && true && true) {
    return rewrite_664_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && predicates[20] && true && true && true && true) {
    return rewrite_664_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && predicates[20] && true && true && true && true) {
    return rewrite_664_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && predicates[52] && true && true && true) {
    return rewrite_664_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && predicates[20] && true && true && true && true) {
    return rewrite_664_15(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && predicates[173] && true && true && true) {
    return rewrite_664_16(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && predicates[52] && true && true && true) {
    return rewrite_664_17(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && predicates[68] && true && true) {
    return rewrite_664_18(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && predicates[68] && true && true) {
    return rewrite_664_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && true && predicates[151] && true && true && true) {
    return rewrite_664_20(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && predicates[68] && true && true) {
    return rewrite_664_21(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && predicates[133] && true && true) {
    return rewrite_664_22(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && predicates[68] && true && true) {
    return rewrite_664_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && predicates[173] && true && true && true) {
    return rewrite_664_24(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && true && predicates[151] && true && true && true) {
    return rewrite_664_25(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && predicates[68] && true && true) {
    return rewrite_664_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && predicates[20] && true && true && true && true) {
    return rewrite_664_27(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && predicates[133] && true && true) {
    return rewrite_664_28(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && predicates[133] && true && true) {
    return rewrite_664_29(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && predicates[52] && true && true && true) {
    return rewrite_664_30(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && true && predicates[151] && true && true && true) {
    return rewrite_664_31(node);
  }
  else {
    return node;
  }
}
Node rewrite_664(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && true && predicates[8] && true && true && true && true) {
    return rewrite_665_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_665_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[173] && true && predicates[115] && true && true && true) {
    return rewrite_665_2(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && true && predicates[108] && true && true && true) {
    return rewrite_665_3(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && predicates[89] && true && true) {
    return rewrite_665_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && predicates[43] && true && true && true && true && true) {
    return rewrite_665_5(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[52] && predicates[47] && true && true && true && true) {
    return rewrite_665_6(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && true && predicates[8] && true && true && true && true) {
    return rewrite_665_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && predicates[111] && true && true && true && true) {
    return rewrite_665_8(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[52] && true && predicates[172] && true && true && true) {
    return rewrite_665_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && predicates[43] && true && true && true && true && true) {
    return rewrite_665_10(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && predicates[161] && true && true && true && true) {
    return rewrite_665_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && predicates[149] && true && true && true && true) {
    return rewrite_665_12(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[173] && predicates[12] && true && true && true && true) {
    return rewrite_665_13(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[52] && true && predicates[172] && true && true && true) {
    return rewrite_665_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && predicates[72] && true && true && true && true && true) {
    return rewrite_665_15(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && predicates[86] && true && true && true && true && true) {
    return rewrite_665_16(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && predicates[72] && true && true && true && true && true) {
    return rewrite_665_17(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && predicates[86] && true && true && true && true && true) {
    return rewrite_665_18(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && true && predicates[108] && true && true && true) {
    return rewrite_665_19(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[133] && predicates[135] && true && true && true) {
    return rewrite_665_20(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[133] && predicates[135] && true && true && true) {
    return rewrite_665_21(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && predicates[149] && true && true && true && true) {
    return rewrite_665_22(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && predicates[105] && true && true && true && true && true) {
    return rewrite_665_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && predicates[92] && true && true && true && true && true && true) {
    return rewrite_665_24(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && predicates[89] && true && true) {
    return rewrite_665_25(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[173] && true && predicates[115] && true && true && true) {
    return rewrite_665_26(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && predicates[161] && true && true && true && true) {
    return rewrite_665_27(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[173] && predicates[12] && true && true && true && true) {
    return rewrite_665_28(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && predicates[111] && true && true && true && true) {
    return rewrite_665_29(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && predicates[105] && true && true && true && true && true) {
    return rewrite_665_30(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[52] && predicates[47] && true && true && true && true) {
    return rewrite_665_31(node);
  }
  else {
    return node;
  }
}
Node rewrite_665(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_3(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_5(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_6(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_11(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_13(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_14(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_15(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_16(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_17(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_18(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_19(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_20(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_21(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_22(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_24(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_25(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_27(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_28(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_29(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_30(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_31(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_32(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_33(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_34(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_35(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_36(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_37(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_38(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_39(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_40(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_41(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_677_42(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_43(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_44(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_677_45(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_677_46(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_677_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_677(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[68] && true && true) {
    return rewrite_690_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[68] && true && true) {
    return rewrite_690_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_690_2(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_690_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_690_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_690_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[68] && true && true) {
    return rewrite_690_6(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[68] && true && true) {
    return rewrite_690_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && predicates[54] && true && true) {
    return rewrite_690_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_690_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[68] && true && true) {
    return rewrite_690_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && predicates[166] && true && true && true && true) {
    return rewrite_690_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && predicates[166] && true && true && true && true) {
    return rewrite_690_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[151] && true && true && true) {
    return rewrite_690_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[68] && true && true) {
    return rewrite_690_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && predicates[54] && true && true) {
    return rewrite_690_15(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_690_16(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && predicates[109] && true && true && true) {
    return rewrite_690_17(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[151] && true && true && true) {
    return rewrite_690_18(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[68] && true && true) {
    return rewrite_690_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && predicates[54] && true && true) {
    return rewrite_690_20(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_690_21(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_690_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_690_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[151] && true && true && true) {
    return rewrite_690_24(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && predicates[166] && true && true && true && true) {
    return rewrite_690_25(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_690_26(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_690_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[151] && true && true && true) {
    return rewrite_690_28(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[68] && true && true) {
    return rewrite_690_29(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && predicates[109] && true && true && true) {
    return rewrite_690_30(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_690_31(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[151] && true && true && true) {
    return rewrite_690_32(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[68] && true && true) {
    return rewrite_690_33(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_690_34(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_690_35(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_690_36(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && predicates[109] && true && true && true) {
    return rewrite_690_37(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[151] && true && true && true) {
    return rewrite_690_38(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[151] && true && true && true) {
    return rewrite_690_39(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_690_40(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[68] && true && true) {
    return rewrite_690_41(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && predicates[54] && true && true) {
    return rewrite_690_42(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && predicates[166] && true && true && true && true) {
    return rewrite_690_43(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[151] && true && true && true) {
    return rewrite_690_44(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[68] && true && true) {
    return rewrite_690_45(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[68] && true && true) {
    return rewrite_690_46(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && predicates[109] && true && true && true) {
    return rewrite_690_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_690(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_536_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_536_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[118] && true && true) {
    return rewrite_536_2(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_536_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_536_4(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_536_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[118] && true && true) {
    return rewrite_536_6(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_536_7(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_536_8(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_536_9(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_536_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_536_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_536_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[19] && true) {
    return rewrite_536_13(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_536_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && predicates[19] && true) {
    return rewrite_536_15(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_536_16(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_536_17(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_536_18(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_536_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[19] && true) {
    return rewrite_536_20(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && predicates[19] && true) {
    return rewrite_536_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_536_22(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_536_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_536(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_537_0(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_537_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_537_2(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && true && true && predicates[19] && true) {
    return rewrite_537_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_537_4(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_537_5(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_537_6(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_537_7(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && true) {
    return rewrite_537_8(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && true && true && predicates[19] && true) {
    return rewrite_537_9(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_537_10(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && true) {
    return rewrite_537_11(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_537_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_537_13(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_537_14(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_537_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_537_16(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && true) {
    return rewrite_537_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_537_18(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_537_19(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && true) {
    return rewrite_537_20(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_537_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_537_22(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_537_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_537(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && node[0][0][0] == node[1][0] && true && predicates[19] && true) {
    return rewrite_539_0(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && predicates[77] && node[1][0] == node[2][1][0]) {
    return rewrite_539_1(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true && predicates[19] && true) {
    return rewrite_539_2(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && predicates[158] && node[0][0] == node[2][0][0] && true) {
    return rewrite_539_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && true && predicates[31] && node[0][0][0] == node[2][0] && true) {
    return rewrite_539_4(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && true && predicates[19] && true) {
    return rewrite_539_5(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && true && predicates[31] && node[1][0][0] == node[2][0] && true) {
    return rewrite_539_6(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && true && predicates[19] && true) {
    return rewrite_539_7(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && predicates[77] && node[0][1] == node[2][1][0]) {
    return rewrite_539_8(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && predicates[158] && node[1][0] == node[2][0][0] && true) {
    return rewrite_539_9(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && true && predicates[31] && node[1][1][0] == node[2][0] && true) {
    return rewrite_539_10(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[30] && node[0][0] == node[1][1][0] && predicates[19] && true) {
    return rewrite_539_11(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && node[1][0][0] == node[2][1]) {
    return rewrite_539_12(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && predicates[77] && node[1][1] == node[2][1][0]) {
    return rewrite_539_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && true && predicates[31] && true && node[0][0][0] == node[2][1]) {
    return rewrite_539_14(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1] && predicates[19] && true) {
    return rewrite_539_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[30] && node[0][1] == node[1][1][0] && predicates[19] && true) {
    return rewrite_539_16(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && predicates[77] && node[0][0] == node[2][1][0]) {
    return rewrite_539_17(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && predicates[158] && node[1][1] == node[2][0][0] && true) {
    return rewrite_539_18(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && true && predicates[31] && true && node[0][1][0] == node[2][1]) {
    return rewrite_539_19(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && true && predicates[31] && node[0][1][0] == node[2][0] && true) {
    return rewrite_539_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && node[0][0][0] == node[1][1] && predicates[19] && true) {
    return rewrite_539_21(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && node[1][1][0] == node[2][1]) {
    return rewrite_539_22(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && predicates[158] && node[0][1] == node[2][0][0] && true) {
    return rewrite_539_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_539(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && predicates[158] && true && node[1][1][0] == node[2][1]) {
    return rewrite_550_0(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && predicates[158] && true && node[1][0][0] == node[2][1]) {
    return rewrite_550_1(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && predicates[158] && node[0][0] == node[2][0][0] && true) {
    return rewrite_550_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && predicates[30] && true && true) {
    return rewrite_550_3(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && true && true) {
    return rewrite_550_4(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && node[0][1][0] == node[2][0] && predicates[77] && true) {
    return rewrite_550_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && true && predicates[77] && node[0][1] == node[2][1][0]) {
    return rewrite_550_6(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && predicates[158] && true && node[0][1][0] == node[2][1]) {
    return rewrite_550_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[30] && node[0][1] == node[1][1][0] && true) {
    return rewrite_550_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[174] && true && node[0][0][0] == node[1][1] && true) {
    return rewrite_550_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && node[1][1][0] == node[2][0] && predicates[77] && true) {
    return rewrite_550_10(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && node[1][0][0] == node[2][0] && predicates[77] && true) {
    return rewrite_550_11(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && predicates[158] && node[0][1] == node[2][0][0] && true) {
    return rewrite_550_12(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[174] && true && node[0][1][0] == node[1][1] && true) {
    return rewrite_550_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && true && true) {
    return rewrite_550_14(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && predicates[77] && node[1][1] == node[2][1][0]) {
    return rewrite_550_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && node[0][0][0] == node[1][0] && predicates[30] && true && true) {
    return rewrite_550_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && node[0][0][0] == node[2][0] && predicates[77] && true) {
    return rewrite_550_17(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && true && predicates[77] && node[0][0] == node[2][1][0]) {
    return rewrite_550_18(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && predicates[158] && node[1][1] == node[2][0][0] && true) {
    return rewrite_550_19(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[30] && node[0][0] == node[1][1][0] && true) {
    return rewrite_550_20(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && predicates[158] && node[1][0] == node[2][0][0] && true) {
    return rewrite_550_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && predicates[158] && true && node[0][0][0] == node[2][1]) {
    return rewrite_550_22(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && predicates[77] && node[1][0] == node[2][1][0]) {
    return rewrite_550_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_550(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && true && true && predicates[67] && true && true) {
    return rewrite_554_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && true && true && predicates[67] && true && true) {
    return rewrite_554_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && predicates[81] && true) {
    return rewrite_554_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && true && true && predicates[67] && true && true) {
    return rewrite_554_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && true && true && predicates[67] && true && true) {
    return rewrite_554_4(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && predicates[81] && true) {
    return rewrite_554_5(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_554_6(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_554_7(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_554_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && true && true && predicates[67] && true && true) {
    return rewrite_554_9(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[68] && predicates[116] && true && true) {
    return rewrite_554_10(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[68] && predicates[116] && true && true) {
    return rewrite_554_11(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[109] && true && predicates[67] && true && true) {
    return rewrite_554_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && true && true && predicates[67] && true && true) {
    return rewrite_554_13(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_554_14(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[109] && true && predicates[67] && true && true) {
    return rewrite_554_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_554(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && true && true && predicates[19] && true) {
    return rewrite_564_0(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && true && predicates[118] && true && true) {
    return rewrite_564_1(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_564_2(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && predicates[125] && true && true && true && true) {
    return rewrite_564_3(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_564_4(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && true && predicates[163] && true && true) {
    return rewrite_564_5(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && predicates[159] && true && true && true) {
    return rewrite_564_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && true && predicates[118] && true && true) {
    return rewrite_564_7(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && predicates[81] && true && true) {
    return rewrite_564_8(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && true && predicates[19] && true) {
    return rewrite_564_9(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && true && predicates[118] && true && true) {
    return rewrite_564_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && true && true && predicates[19] && true) {
    return rewrite_564_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && true && true && predicates[19] && true) {
    return rewrite_564_12(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && true) {
    return rewrite_564_13(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && true && predicates[118] && true && true) {
    return rewrite_564_14(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && true && predicates[19] && true) {
    return rewrite_564_15(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && true) {
    return rewrite_564_16(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_564_17(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && predicates[116] && true && true && true) {
    return rewrite_564_18(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_564_19(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && true && true && predicates[19] && true) {
    return rewrite_564_20(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && predicates[69] && true && true && true) {
    return rewrite_564_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && true && true && predicates[19] && true) {
    return rewrite_564_22(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && true && true && predicates[19] && true) {
    return rewrite_564_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_564(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && true && predicates[68] && true && true) {
    return rewrite_573_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && true && predicates[68] && true && true) {
    return rewrite_573_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && predicates[166] && true && true && true) {
    return rewrite_573_2(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && predicates[81] && true) {
    return rewrite_573_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && predicates[109] && true && true) {
    return rewrite_573_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && predicates[166] && true && true && true) {
    return rewrite_573_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && predicates[109] && true && true) {
    return rewrite_573_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && true && predicates[151] && true && true && true) {
    return rewrite_573_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && predicates[116] && true && true) {
    return rewrite_573_8(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[69] && true && predicates[68] && true && true) {
    return rewrite_573_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && true && predicates[151] && true && true && true) {
    return rewrite_573_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && true && predicates[151] && true && true && true) {
    return rewrite_573_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && predicates[116] && true && true) {
    return rewrite_573_12(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[69] && true && predicates[68] && true && true) {
    return rewrite_573_13(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && true && predicates[151] && true && true && true) {
    return rewrite_573_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && predicates[81] && true) {
    return rewrite_573_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_573(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && predicates[116] && true && true && true) {
    return rewrite_575_0(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && true && predicates[30] && true && true) {
    return rewrite_575_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && predicates[77] && true) {
    return rewrite_575_2(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && predicates[81] && true && true) {
    return rewrite_575_3(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && true && predicates[30] && true && true) {
    return rewrite_575_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_575_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && predicates[109] && true && true && true) {
    return rewrite_575_6(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && predicates[77] && true) {
    return rewrite_575_7(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && true && predicates[30] && true && true) {
    return rewrite_575_8(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_575_9(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_575_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && predicates[124] && true && true && true) {
    return rewrite_575_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && predicates[77] && true) {
    return rewrite_575_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && predicates[166] && true && true && true && true) {
    return rewrite_575_13(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && true && predicates[30] && true && true) {
    return rewrite_575_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && predicates[124] && true && true && true) {
    return rewrite_575_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && predicates[166] && true && true && true && true) {
    return rewrite_575_16(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_575_17(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && predicates[77] && true) {
    return rewrite_575_18(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && predicates[116] && true && true && true) {
    return rewrite_575_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && predicates[81] && true && true) {
    return rewrite_575_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && predicates[124] && true && true && true) {
    return rewrite_575_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && predicates[109] && true && true && true) {
    return rewrite_575_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && predicates[124] && true && true && true) {
    return rewrite_575_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_575(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_578_0(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_578_1(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_578_2(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_578_3(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_578_4(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_578_5(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_578_6(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_578_7(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_578_8(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_578_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_578_10(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_578_11(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_578_12(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_578_13(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_578_14(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_578_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_578_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_578_17(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_578_18(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_578_19(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_578_20(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_578_21(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_578_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_578_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_578(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_580_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_580_1(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_580_2(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_580_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_580_4(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_580_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_580_6(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_580_7(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_580_8(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_580_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_580_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_580_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_580_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_580_13(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_580_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_580_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_580(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && true) {
    return rewrite_586_0(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[19] && true) {
    return rewrite_586_1(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_586_2(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && predicates[113] && true && true && true) {
    return rewrite_586_3(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[118] && true && true) {
    return rewrite_586_4(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_586_5(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && predicates[113] && true && true && true) {
    return rewrite_586_6(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[19] && true) {
    return rewrite_586_7(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[118] && true && true) {
    return rewrite_586_8(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_586_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[19] && true) {
    return rewrite_586_10(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_586_11(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_586_12(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && predicates[19] && true) {
    return rewrite_586_13(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && true) {
    return rewrite_586_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[118] && true && true) {
    return rewrite_586_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[118] && true && true) {
    return rewrite_586_16(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && true) {
    return rewrite_586_17(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && true) {
    return rewrite_586_18(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_586_19(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && predicates[19] && true) {
    return rewrite_586_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[19] && true) {
    return rewrite_586_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && predicates[19] && true) {
    return rewrite_586_22(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && predicates[19] && true) {
    return rewrite_586_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_586(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_589_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[165] && true && true && node[0][1][0] == node[1][1]) {
    return rewrite_589_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && predicates[68] && true && true) {
    return rewrite_589_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && true) {
    return rewrite_589_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[165] && true && true && node[0][0][0] == node[1][1]) {
    return rewrite_589_4(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && true) {
    return rewrite_589_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && node[0][0][0] == node[1][0] && predicates[68] && true && true) {
    return rewrite_589_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && node[0][0][0] == node[1][0] && predicates[68] && true && true) {
    return rewrite_589_7(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_589_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && true) {
    return rewrite_589_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && true) {
    return rewrite_589_10(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && predicates[68] && true && true) {
    return rewrite_589_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[165] && true && true && node[0][0][0] == node[1][1]) {
    return rewrite_589_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_589_13(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[165] && true && true && node[0][1][0] == node[1][1]) {
    return rewrite_589_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_589_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_589(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_593_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_593_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_593_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_593_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_593_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_593_5(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_593_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_593_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_593_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_593_9(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_593_10(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_593_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_593_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_593_13(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_593_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_593_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_593(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[118] && predicates[165] && true && predicates[69] && true && predicates[31] && true && true) {
    return rewrite_600_0(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && predicates[125] && true && true && predicates[31] && true && true) {
    return rewrite_600_1(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && predicates[137] && predicates[159] && true && true) {
    return rewrite_600_2(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && predicates[137] && predicates[159] && true && true) {
    return rewrite_600_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_600_4(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && predicates[163] && true) {
    return rewrite_600_5(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && predicates[76] && true && predicates[67] && true && true && true) {
    return rewrite_600_6(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && predicates[129] && true && true && predicates[67] && true && true && true) {
    return rewrite_600_7(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && predicates[163] && true) {
    return rewrite_600_8(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_600_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && predicates[137] && predicates[159] && true && true) {
    return rewrite_600_10(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && predicates[129] && true && true && true && predicates[31] && true && true) {
    return rewrite_600_11(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && predicates[76] && true && true && predicates[31] && true && true) {
    return rewrite_600_12(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && predicates[125] && true && true && predicates[31] && true && true) {
    return rewrite_600_13(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && predicates[69] && true && predicates[31] && true && true) {
    return rewrite_600_14(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && predicates[129] && true && true && predicates[67] && true && true && true) {
    return rewrite_600_15(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && predicates[76] && true && predicates[67] && true && true && true) {
    return rewrite_600_16(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && predicates[76] && true && true && predicates[31] && true && true) {
    return rewrite_600_17(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && predicates[137] && true && predicates[163] && true) {
    return rewrite_600_18(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && predicates[137] && true && predicates[163] && true) {
    return rewrite_600_19(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_600_20(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_600_21(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && predicates[137] && predicates[159] && true && true) {
    return rewrite_600_22(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && predicates[129] && true && true && true && predicates[31] && true && true) {
    return rewrite_600_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_600(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_608_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[124] && true && true) {
    return rewrite_608_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[30] && true) {
    return rewrite_608_2(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[30] && true) {
    return rewrite_608_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[30] && true) {
    return rewrite_608_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[54] && true && true) {
    return rewrite_608_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[124] && true && true) {
    return rewrite_608_6(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && predicates[30] && true) {
    return rewrite_608_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && predicates[54] && true && true) {
    return rewrite_608_8(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_608_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_608_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[109] && true && true && true) {
    return rewrite_608_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && predicates[124] && true && true) {
    return rewrite_608_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && predicates[166] && true && true && true && true) {
    return rewrite_608_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && predicates[30] && true) {
    return rewrite_608_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_608_15(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_608_16(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[124] && true && true) {
    return rewrite_608_17(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && predicates[124] && true && true) {
    return rewrite_608_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && predicates[109] && true && true && true) {
    return rewrite_608_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && predicates[124] && true && true) {
    return rewrite_608_20(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && predicates[166] && true && true && true && true) {
    return rewrite_608_21(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && predicates[30] && true) {
    return rewrite_608_22(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_608_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_608(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_628_0(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_628_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && true) {
    return rewrite_628_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && predicates[147] && true && true && true) {
    return rewrite_628_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && true) {
    return rewrite_628_4(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && true) {
    return rewrite_628_5(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && true) {
    return rewrite_628_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && true) {
    return rewrite_628_7(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && true) {
    return rewrite_628_8(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && predicates[147] && true && true && true) {
    return rewrite_628_9(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && predicates[67] && true && true) {
    return rewrite_628_10(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && predicates[147] && true && true && true) {
    return rewrite_628_11(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && predicates[147] && true && true && true) {
    return rewrite_628_12(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_628_13(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_628_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && predicates[67] && true && true) {
    return rewrite_628_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_628(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && predicates[157] && true && true && true) {
    return rewrite_635_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && predicates[64] && true && true) {
    return rewrite_635_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && predicates[34] && true && true && true && true) {
    return rewrite_635_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && predicates[150] && true && true && true) {
    return rewrite_635_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && predicates[119] && true && true && true && true) {
    return rewrite_635_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && predicates[112] && true && true && true && true) {
    return rewrite_635_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && predicates[119] && true && true && true && true) {
    return rewrite_635_6(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && predicates[71] && true && true && true) {
    return rewrite_635_7(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && predicates[150] && true && true && true) {
    return rewrite_635_8(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && predicates[168] && true && true) {
    return rewrite_635_9(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && predicates[71] && true && true && true) {
    return rewrite_635_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && predicates[63] && true && true && true) {
    return rewrite_635_11(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && predicates[64] && true && true) {
    return rewrite_635_12(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && predicates[97] && true) {
    return rewrite_635_13(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && predicates[63] && true && true && true) {
    return rewrite_635_14(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && predicates[34] && true && true && true && true) {
    return rewrite_635_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && predicates[141] && true && true && true && true && true) {
    return rewrite_635_16(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && predicates[28] && predicates[75] && true && true) {
    return rewrite_635_17(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && predicates[112] && true && true && true && true) {
    return rewrite_635_18(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && predicates[28] && predicates[75] && true && true) {
    return rewrite_635_19(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && predicates[168] && true && true) {
    return rewrite_635_20(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && predicates[97] && true) {
    return rewrite_635_21(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && predicates[157] && true && true && true) {
    return rewrite_635_22(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && predicates[141] && true && true && true && true && true) {
    return rewrite_635_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_635(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && predicates[112] && true && true && true && true) {
    return rewrite_637_0(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && predicates[117] && true && true && true) {
    return rewrite_637_1(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && predicates[61] && true && true && true) {
    return rewrite_637_2(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && predicates[146] && true && true) {
    return rewrite_637_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && predicates[50] && true) {
    return rewrite_637_4(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && predicates[126] && true && true) {
    return rewrite_637_5(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && predicates[117] && true && true && true) {
    return rewrite_637_6(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && predicates[57] && true && true && true && true) {
    return rewrite_637_7(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && predicates[50] && true) {
    return rewrite_637_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && predicates[119] && true && true && true && true) {
    return rewrite_637_9(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && predicates[49] && true && true && true) {
    return rewrite_637_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && predicates[146] && true && true) {
    return rewrite_637_11(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && predicates[141] && true && true && true && true && true) {
    return rewrite_637_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && predicates[119] && true && true && true && true) {
    return rewrite_637_13(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && predicates[126] && true && true) {
    return rewrite_637_14(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && predicates[61] && true && true && true) {
    return rewrite_637_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && predicates[112] && true && true && true && true) {
    return rewrite_637_16(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && predicates[49] && true && true && true) {
    return rewrite_637_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && predicates[141] && true && true && true && true && true) {
    return rewrite_637_18(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && predicates[71] && true && true && true) {
    return rewrite_637_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && predicates[71] && true && true && true) {
    return rewrite_637_20(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && predicates[139] && true && true) {
    return rewrite_637_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && predicates[57] && true && true && true && true) {
    return rewrite_637_22(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && predicates[139] && true && true) {
    return rewrite_637_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_637(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[69] && true && true && true) {
    return rewrite_643_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && predicates[76] && true && true && true && true) {
    return rewrite_643_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && predicates[76] && true && true && true && true) {
    return rewrite_643_2(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && predicates[145] && true) {
    return rewrite_643_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && predicates[163] && true && true) {
    return rewrite_643_4(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[81] && true && true) {
    return rewrite_643_5(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && predicates[163] && true && true) {
    return rewrite_643_6(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && predicates[145] && true) {
    return rewrite_643_7(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[109] && true && true && true) {
    return rewrite_643_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && predicates[76] && true && true && true && true) {
    return rewrite_643_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[81] && true && true) {
    return rewrite_643_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && predicates[163] && true && true) {
    return rewrite_643_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && predicates[163] && true && true) {
    return rewrite_643_12(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[109] && true && true && true) {
    return rewrite_643_13(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[69] && true && true && true) {
    return rewrite_643_14(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[81] && true && true) {
    return rewrite_643_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[69] && true && true && true) {
    return rewrite_643_16(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && predicates[145] && true) {
    return rewrite_643_17(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[109] && true && true && true) {
    return rewrite_643_18(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[81] && true && true) {
    return rewrite_643_19(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[109] && true && true && true) {
    return rewrite_643_20(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && predicates[145] && true) {
    return rewrite_643_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && predicates[76] && true && true && true && true) {
    return rewrite_643_22(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[69] && true && true && true) {
    return rewrite_643_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_643(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[109] && predicates[12] && true && true && true) {
    return rewrite_646_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && predicates[92] && true && true && true && true && true) {
    return rewrite_646_1(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[81] && predicates[135] && true && true) {
    return rewrite_646_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && predicates[86] && true && true && true && true) {
    return rewrite_646_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[69] && predicates[149] && true && true && true) {
    return rewrite_646_4(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[69] && predicates[149] && true && true && true) {
    return rewrite_646_5(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[116] && predicates[47] && true && true && true) {
    return rewrite_646_6(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && predicates[105] && true && true && true && true) {
    return rewrite_646_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && predicates[86] && true && true && true && true) {
    return rewrite_646_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[109] && predicates[12] && true && true && true) {
    return rewrite_646_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && predicates[92] && true && true && true && true && true) {
    return rewrite_646_10(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[81] && predicates[135] && true && true) {
    return rewrite_646_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && predicates[72] && true && true && true && true) {
    return rewrite_646_12(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[116] && predicates[47] && true && true && true) {
    return rewrite_646_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && predicates[72] && true && true && true && true) {
    return rewrite_646_14(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && predicates[105] && true && true && true && true) {
    return rewrite_646_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_646(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[118] && predicates[53] && predicates[147] && predicates[138] && true && true && true && true) {
    return rewrite_657_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[16] && predicates[23] && true && true && true && true && true) {
    return rewrite_657_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[41] && predicates[98] && true && true && true && true) {
    return rewrite_657_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[122] && predicates[26] && true && true && true) {
    return rewrite_657_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[16] && predicates[23] && true && true && true && true && true) {
    return rewrite_657_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[147] && true && predicates[58] && true && true && true) {
    return rewrite_657_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[16] && true && predicates[0] && true && true && true && true) {
    return rewrite_657_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[41] && true && predicates[103] && true && true && true) {
    return rewrite_657_7(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[122] && predicates[26] && true && true && true) {
    return rewrite_657_8(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[122] && true && predicates[36] && true && true) {
    return rewrite_657_9(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[122] && true && predicates[36] && true && true) {
    return rewrite_657_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[16] && true && predicates[0] && true && true && true && true) {
    return rewrite_657_11(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[41] && true && predicates[103] && true && true && true) {
    return rewrite_657_12(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[41] && predicates[98] && true && true && true && true) {
    return rewrite_657_13(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[147] && true && predicates[58] && true && true && true) {
    return rewrite_657_14(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[147] && predicates[138] && true && true && true && true) {
    return rewrite_657_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_657(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && true && predicates[151] && true && node[0][0][0][0] == node[0][1][1] && true) {
    return rewrite_663_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && predicates[116] && node[1][0][1] == node[1][1][0][0] && true) {
    return rewrite_663_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && predicates[109] && node[0][0][0] == node[0][1][1][0] && true) {
    return rewrite_663_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && predicates[166] && node[0][0][0] == node[0][1][0][0] && true && true) {
    return rewrite_663_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && true && predicates[151] && true && node[0][0][1][0] == node[0][1][1] && true) {
    return rewrite_663_4(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && predicates[81] && node[1][0][0] == node[1][1][1][0]) {
    return rewrite_663_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && true && predicates[68] && true && node[1][0][0][0] == node[1][1][1]) {
    return rewrite_663_6(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && predicates[116] && node[1][0][0] == node[1][1][0][0] && true) {
    return rewrite_663_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && predicates[81] && node[1][0][1] == node[1][1][1][0]) {
    return rewrite_663_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && predicates[109] && node[0][0][1] == node[0][1][1][0] && true) {
    return rewrite_663_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[69] && true && predicates[68] && true && node[1][0][1][0] == node[1][1][1]) {
    return rewrite_663_10(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && true && predicates[68] && node[1][0][0][0] == node[1][1][0] && true) {
    return rewrite_663_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[69] && true && predicates[68] && node[1][0][1][0] == node[1][1][0] && true) {
    return rewrite_663_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && predicates[166] && node[0][0][1] == node[0][1][0][0] && true && true) {
    return rewrite_663_13(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && true && predicates[151] && node[0][0][0][0] == node[0][1][0] && true && true) {
    return rewrite_663_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && true && predicates[151] && node[0][0][1][0] == node[0][1][0] && true && true) {
    return rewrite_663_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_663(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && true && predicates[77] && node[0][0] == node[2][1][0]) {
    return rewrite_668_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && true && true) {
    return rewrite_668_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && node[0][0][0] == node[2][0] && predicates[77] && true) {
    return rewrite_668_2(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && predicates[174] && true && node[0][0][0] == node[1][1] && true) {
    return rewrite_668_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && predicates[158] && true && node[0][0][0] == node[2][1]) {
    return rewrite_668_4(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && predicates[77] && node[1][0] == node[2][1][0]) {
    return rewrite_668_5(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && node[0][1][0] == node[2][0] && predicates[77] && true) {
    return rewrite_668_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && predicates[30] && node[0][1] == node[1][1][0] && true) {
    return rewrite_668_7(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[174] && true && node[0][1][0] == node[1][1] && true) {
    return rewrite_668_8(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && predicates[158] && true && node[0][1][0] == node[2][1]) {
    return rewrite_668_9(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && node[1][0][0] == node[2][0] && predicates[77] && true) {
    return rewrite_668_10(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && predicates[158] && true && node[1][1][0] == node[2][1]) {
    return rewrite_668_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && predicates[158] && true && node[1][0][0] == node[2][1]) {
    return rewrite_668_12(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && predicates[30] && true && true) {
    return rewrite_668_13(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && predicates[77] && node[1][1] == node[2][1][0]) {
    return rewrite_668_14(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && true && true) {
    return rewrite_668_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && node[0][0][0] == node[1][0] && predicates[30] && true && true) {
    return rewrite_668_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && predicates[158] && node[0][1] == node[2][0][0] && true) {
    return rewrite_668_17(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && predicates[30] && node[0][0] == node[1][1][0] && true) {
    return rewrite_668_18(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && node[1][1][0] == node[2][0] && predicates[77] && true) {
    return rewrite_668_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && predicates[158] && node[1][1] == node[2][0][0] && true) {
    return rewrite_668_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && true && predicates[77] && node[0][1] == node[2][1][0]) {
    return rewrite_668_21(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && predicates[158] && node[1][0] == node[2][0][0] && true) {
    return rewrite_668_22(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && predicates[158] && node[0][0] == node[2][0][0] && true) {
    return rewrite_668_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_668(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && predicates[118] && true) {
    return rewrite_670_0(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true) {
    return rewrite_670_1(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true) {
    return rewrite_670_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && predicates[118] && true) {
    return rewrite_670_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && predicates[118] && true) {
    return rewrite_670_4(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true) {
    return rewrite_670_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && predicates[118] && true) {
    return rewrite_670_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && predicates[118] && true) {
    return rewrite_670_7(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && predicates[118] && true) {
    return rewrite_670_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && predicates[118] && true) {
    return rewrite_670_9(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true) {
    return rewrite_670_10(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && predicates[118] && true) {
    return rewrite_670_11(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true) {
    return rewrite_670_12(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true) {
    return rewrite_670_13(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true) {
    return rewrite_670_14(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true) {
    return rewrite_670_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_670(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && predicates[76] && true && true && true) {
    return rewrite_678_0(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[133] && true && true) {
    return rewrite_678_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && true && true && predicates[109] && true && true) {
    return rewrite_678_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[173] && true && true && true) {
    return rewrite_678_3(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && true && true && predicates[109] && true && true) {
    return rewrite_678_4(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && predicates[81] && true) {
    return rewrite_678_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && predicates[59] && true && true && true && true) {
    return rewrite_678_6(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && predicates[81] && true) {
    return rewrite_678_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[48] && true && true && true) {
    return rewrite_678_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && predicates[59] && true && true && true && true) {
    return rewrite_678_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && true && predicates[69] && true && true) {
    return rewrite_678_10(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[133] && true && true) {
    return rewrite_678_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && true && predicates[69] && true && true) {
    return rewrite_678_12(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[173] && true && true && true) {
    return rewrite_678_13(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && predicates[76] && true && true && true) {
    return rewrite_678_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[48] && true && true && true) {
    return rewrite_678_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_678(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && predicates[168] && true && true) {
    return rewrite_686_0(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && true && predicates[104] && true) {
    return rewrite_686_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && predicates[119] && true && true && true && true) {
    return rewrite_686_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && predicates[34] && true && true && true && true) {
    return rewrite_686_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && predicates[141] && true && true && true && true && true) {
    return rewrite_686_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && predicates[71] && true && true && true) {
    return rewrite_686_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && predicates[63] && true && true && true) {
    return rewrite_686_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && predicates[34] && true && true && true && true) {
    return rewrite_686_7(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && predicates[141] && true && true && true && true && true) {
    return rewrite_686_8(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && true && predicates[1] && true && true && true) {
    return rewrite_686_9(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && true && predicates[1] && true && true && true) {
    return rewrite_686_10(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && predicates[112] && true && true && true && true) {
    return rewrite_686_11(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && true && predicates[90] && true && true) {
    return rewrite_686_12(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && predicates[150] && true && true && true) {
    return rewrite_686_13(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && true && predicates[104] && true) {
    return rewrite_686_14(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && true && predicates[100] && true && true) {
    return rewrite_686_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && predicates[119] && true && true && true && true) {
    return rewrite_686_16(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && true && predicates[100] && true && true) {
    return rewrite_686_17(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && predicates[112] && true && true && true && true) {
    return rewrite_686_18(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && predicates[63] && true && true && true) {
    return rewrite_686_19(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && predicates[168] && true && true) {
    return rewrite_686_20(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && predicates[150] && true && true && true) {
    return rewrite_686_21(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && true && predicates[90] && true && true) {
    return rewrite_686_22(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && predicates[71] && true && true && true) {
    return rewrite_686_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_686(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[118] && predicates[74] && predicates[96] && true && predicates[71] && true && true && true) {
    return rewrite_695_0(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[96] && predicates[112] && true && true && true && true) {
    return rewrite_695_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && predicates[34] && true && true && true && true) {
    return rewrite_695_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && predicates[48] && predicates[150] && true && true && true) {
    return rewrite_695_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && predicates[141] && true && true && true && true && true) {
    return rewrite_695_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && predicates[48] && true && predicates[168] && true && true) {
    return rewrite_695_5(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && predicates[48] && true && predicates[168] && true && true) {
    return rewrite_695_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[143] && true && predicates[64] && true && true) {
    return rewrite_695_7(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && true && predicates[33] && true && predicates[97] && true) {
    return rewrite_695_8(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && predicates[34] && true && true && true && true) {
    return rewrite_695_9(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && predicates[48] && predicates[150] && true && true && true) {
    return rewrite_695_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && predicates[119] && true && true && true && true) {
    return rewrite_695_11(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[96] && true && predicates[71] && true && true && true) {
    return rewrite_695_12(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[143] && predicates[157] && true && true && true) {
    return rewrite_695_13(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && true && predicates[63] && true && true && true) {
    return rewrite_695_14(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && predicates[119] && true && true && true && true) {
    return rewrite_695_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && predicates[141] && true && true && true && true && true) {
    return rewrite_695_16(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[143] && predicates[157] && true && true && true) {
    return rewrite_695_17(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[96] && predicates[112] && true && true && true && true) {
    return rewrite_695_18(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[143] && true && predicates[64] && true && true) {
    return rewrite_695_19(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && true && predicates[33] && predicates[75] && true && true) {
    return rewrite_695_20(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && true && predicates[33] && predicates[75] && true && true) {
    return rewrite_695_21(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && true && predicates[33] && true && predicates[97] && true) {
    return rewrite_695_22(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && true && predicates[63] && true && true && true) {
    return rewrite_695_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_695(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[143] && true && true && predicates[118] && true) {
    return rewrite_697_0(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && predicates[96] && true && true && true && true) {
    return rewrite_697_1(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && predicates[48] && true && true && true) {
    return rewrite_697_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && true && true && true && predicates[118] && true) {
    return rewrite_697_3(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && predicates[33] && true && true) {
    return rewrite_697_4(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && predicates[33] && true && true) {
    return rewrite_697_5(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && predicates[48] && true && true && true) {
    return rewrite_697_6(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && predicates[48] && true && true && true) {
    return rewrite_697_7(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && predicates[48] && true && true && true) {
    return rewrite_697_8(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && true && true && true && predicates[118] && true) {
    return rewrite_697_9(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && true && true && true && predicates[118] && true) {
    return rewrite_697_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && true && true && true && predicates[118] && true) {
    return rewrite_697_11(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[143] && true && true && predicates[118] && true) {
    return rewrite_697_12(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && true && true && true && predicates[118] && true) {
    return rewrite_697_13(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && predicates[96] && true && true && true && true) {
    return rewrite_697_14(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && predicates[96] && true && true && true && true) {
    return rewrite_697_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[143] && true && true && predicates[118] && true) {
    return rewrite_697_16(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && true && true && true && predicates[118] && true) {
    return rewrite_697_17(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && predicates[33] && true && true) {
    return rewrite_697_18(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && predicates[96] && true && true && true && true) {
    return rewrite_697_19(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && true && true && true && predicates[118] && true) {
    return rewrite_697_20(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[143] && true && true && predicates[118] && true) {
    return rewrite_697_21(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && true && true && true && predicates[118] && true) {
    return rewrite_697_22(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && predicates[33] && true && true) {
    return rewrite_697_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_697(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_700_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_700_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_700_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[68] && true && true) {
    return rewrite_700_3(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && true) {
    return rewrite_700_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_700_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_700_6(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && true) {
    return rewrite_700_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_700_8(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[68] && true && true) {
    return rewrite_700_9(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[68] && true && true) {
    return rewrite_700_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_700_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_700_12(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && true) {
    return rewrite_700_13(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && predicates[30] && true) {
    return rewrite_700_14(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && predicates[68] && true && true) {
    return rewrite_700_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_700(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[162] && true && predicates[76] && true && predicates[143] && true && true && true) {
    return rewrite_701_0(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && predicates[48] && true && true && predicates[44] && true) {
    return rewrite_701_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && true && true && predicates[15] && true && true) {
    return rewrite_701_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[125] && true && true && predicates[33] && true && true) {
    return rewrite_701_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[129] && true && true && predicates[143] && true && true && true) {
    return rewrite_701_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[96] && true && true && true && predicates[44] && true) {
    return rewrite_701_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[129] && true && predicates[59] && true && true && true && true) {
    return rewrite_701_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && true && predicates[76] && true && true && true) {
    return rewrite_701_7(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && true && true && predicates[15] && true && true) {
    return rewrite_701_8(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && predicates[48] && true && true && predicates[44] && true) {
    return rewrite_701_9(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[96] && true && true && predicates[69] && true && true) {
    return rewrite_701_10(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[125] && true && predicates[48] && true && true && true) {
    return rewrite_701_11(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[96] && true && true && predicates[69] && true && true) {
    return rewrite_701_12(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[129] && true && predicates[59] && true && true && true && true) {
    return rewrite_701_13(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[96] && true && true && true && predicates[44] && true) {
    return rewrite_701_14(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[125] && true && true && predicates[33] && true && true) {
    return rewrite_701_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[76] && true && predicates[143] && true && true && true) {
    return rewrite_701_16(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && true && true && predicates[15] && true && true) {
    return rewrite_701_17(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[59] && true && true && predicates[15] && true && true) {
    return rewrite_701_18(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[14] && true && true && predicates[76] && true && true && true) {
    return rewrite_701_19(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && predicates[69] && true && predicates[33] && true && true) {
    return rewrite_701_20(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[129] && true && true && predicates[143] && true && true && true) {
    return rewrite_701_21(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && true && predicates[69] && true && predicates[33] && true && true) {
    return rewrite_701_22(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[74] && predicates[125] && true && predicates[48] && true && true && true) {
    return rewrite_701_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_701(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_381_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true && true) {
    return rewrite_381_1(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_381_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true && true) {
    return rewrite_381_3(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true && true) {
    return rewrite_381_4(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_381_5(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_381_6(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && true) {
    return rewrite_381_7(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_381_8(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_381_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_381_10(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_381_11(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_381_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true && true) {
    return rewrite_381_13(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true && true) {
    return rewrite_381_14(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && true) {
    return rewrite_381_15(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && true) {
    return rewrite_381_16(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_381_17(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true && true) {
    return rewrite_381_18(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && true) {
    return rewrite_381_19(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && true) {
    return rewrite_381_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && true) {
    return rewrite_381_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[31] && true && true) {
    return rewrite_381_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true && true) {
    return rewrite_381_23(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_381_24(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && true) {
    return rewrite_381_25(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && true) {
    return rewrite_381_26(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_381_27(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_381_28(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_381_29(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_381_30(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true && true) {
    return rewrite_381_31(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_381_32(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_381_33(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_381_34(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[31] && true && true) {
    return rewrite_381_35(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_381_36(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_381_37(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_381_38(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && true) {
    return rewrite_381_39(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_381_40(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[31] && true && true) {
    return rewrite_381_41(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_381_42(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_381_43(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_381_44(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[31] && true && true) {
    return rewrite_381_45(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_381_46(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_381_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_381(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && true && true) {
    return rewrite_408_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_408_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_408_2(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_408_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_408_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_408_5(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true && true) {
    return rewrite_408_6(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_408_7(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true && true) {
    return rewrite_408_8(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && true && true) {
    return rewrite_408_9(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && true && true) {
    return rewrite_408_10(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_408_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true && true) {
    return rewrite_408_12(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_408_13(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && true && true) {
    return rewrite_408_14(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && true && true) {
    return rewrite_408_15(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_408_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && true && true) {
    return rewrite_408_17(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_408_18(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_408_19(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && true) {
    return rewrite_408_20(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && true) {
    return rewrite_408_21(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && true && true) {
    return rewrite_408_22(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && true) {
    return rewrite_408_23(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && true) {
    return rewrite_408_24(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true && true) {
    return rewrite_408_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true && true) {
    return rewrite_408_26(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_408_27(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true && true) {
    return rewrite_408_28(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_408_29(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && true && true) {
    return rewrite_408_30(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true && true) {
    return rewrite_408_31(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true && true) {
    return rewrite_408_32(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && true) {
    return rewrite_408_33(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && true && true) {
    return rewrite_408_34(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_408_35(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && true && true) {
    return rewrite_408_36(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_408_37(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true && true) {
    return rewrite_408_38(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true && true) {
    return rewrite_408_39(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && true && true) {
    return rewrite_408_40(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[120] && true && true) {
    return rewrite_408_41(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[170] && true && true && true) {
    return rewrite_408_42(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_408_43(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[91] && true && true && true) {
    return rewrite_408_44(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && true) {
    return rewrite_408_45(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && true && true) {
    return rewrite_408_46(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[62] && true && true && true && true) {
    return rewrite_408_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_408(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_0(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_3(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_4(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_7(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_10(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_12(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_13(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_14(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_15(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_16(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_17(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_18(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_20(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_21(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_22(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_24(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_25(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_26(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_27(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_28(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_29(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_30(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_31(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_32(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_33(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_34(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_35(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_36(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_37(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_38(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_39(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_40(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_41(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_42(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_409_43(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_44(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && predicates[67] && true && true) {
    return rewrite_409_45(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && predicates[67] && true && true) {
    return rewrite_409_46(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_409_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_409(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true && true) {
    return rewrite_422_0(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && true && true && true) {
    return rewrite_422_1(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true && true) {
    return rewrite_422_2(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true && true) {
    return rewrite_422_3(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && true) {
    return rewrite_422_4(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true && true) {
    return rewrite_422_5(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true && true) {
    return rewrite_422_6(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && true && true) {
    return rewrite_422_7(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && true && true && true) {
    return rewrite_422_8(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true && true) {
    return rewrite_422_9(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true && true) {
    return rewrite_422_10(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true && true) {
    return rewrite_422_11(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true && true) {
    return rewrite_422_12(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true && true) {
    return rewrite_422_13(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && true && true) {
    return rewrite_422_14(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && true && true && true) {
    return rewrite_422_15(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true && true) {
    return rewrite_422_16(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true && true) {
    return rewrite_422_17(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && true) {
    return rewrite_422_18(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true && true) {
    return rewrite_422_19(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true && true) {
    return rewrite_422_20(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true && true) {
    return rewrite_422_21(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true && true) {
    return rewrite_422_22(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true && true) {
    return rewrite_422_23(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && true) {
    return rewrite_422_24(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true && true) {
    return rewrite_422_25(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && true && true) {
    return rewrite_422_26(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && true && true) {
    return rewrite_422_27(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true && true) {
    return rewrite_422_28(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && true) {
    return rewrite_422_29(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true && true) {
    return rewrite_422_30(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true && true) {
    return rewrite_422_31(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true && true) {
    return rewrite_422_32(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true && true) {
    return rewrite_422_33(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true && true) {
    return rewrite_422_34(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true && true) {
    return rewrite_422_35(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true && true) {
    return rewrite_422_36(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true && true) {
    return rewrite_422_37(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && true && true && true) {
    return rewrite_422_38(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true && true) {
    return rewrite_422_39(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true && true) {
    return rewrite_422_40(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true && true) {
    return rewrite_422_41(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true && true) {
    return rewrite_422_42(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && true && true && true) {
    return rewrite_422_43(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true && true) {
    return rewrite_422_44(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true && true) {
    return rewrite_422_45(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && true) {
    return rewrite_422_46(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true && true) {
    return rewrite_422_47(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && true && true) {
    return rewrite_422_48(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true && true) {
    return rewrite_422_49(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true && true) {
    return rewrite_422_50(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && true && true) {
    return rewrite_422_51(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && true) {
    return rewrite_422_52(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true && true) {
    return rewrite_422_53(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true && true) {
    return rewrite_422_54(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && true && true && true) {
    return rewrite_422_55(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && true && true && true) {
    return rewrite_422_56(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true && true) {
    return rewrite_422_57(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && true && true) {
    return rewrite_422_58(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && true) {
    return rewrite_422_59(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true && true) {
    return rewrite_422_60(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true && true) {
    return rewrite_422_61(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && predicates[21] && true && true) {
    return rewrite_422_62(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true && true) {
    return rewrite_422_63(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true && true) {
    return rewrite_422_64(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true && true) {
    return rewrite_422_65(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && predicates[88] && true && true && true) {
    return rewrite_422_66(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true && true) {
    return rewrite_422_67(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true && true) {
    return rewrite_422_68(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true && true) {
    return rewrite_422_69(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true && true) {
    return rewrite_422_70(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && predicates[113] && true && true && true && true) {
    return rewrite_422_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_422(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && true && true && true && true) {
    return rewrite_429_0(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && true && true && true) {
    return rewrite_429_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[121] && true && true && true) {
    return rewrite_429_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && true && true && true && true) {
    return rewrite_429_3(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[121] && true && true && true) {
    return rewrite_429_4(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && true && true) {
    return rewrite_429_5(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && true && true && true && true) {
    return rewrite_429_6(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[79] && true && true) {
    return rewrite_429_7(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && true && true && true) {
    return rewrite_429_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && true && true && true && true) {
    return rewrite_429_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && true && true) {
    return rewrite_429_10(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && true && true && true && true) {
    return rewrite_429_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && true && true) {
    return rewrite_429_12(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && true && true) {
    return rewrite_429_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && true && true) {
    return rewrite_429_14(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && true && true && true) {
    return rewrite_429_15(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && true && true) {
    return rewrite_429_16(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_429_17(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && true && true && true) {
    return rewrite_429_18(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[79] && true && true) {
    return rewrite_429_19(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && true && true && true) {
    return rewrite_429_20(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && true && true && true) {
    return rewrite_429_21(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && true && true && true) {
    return rewrite_429_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_429_23(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && true && true && true) {
    return rewrite_429_24(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[79] && true && true) {
    return rewrite_429_25(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && true && true && true && true) {
    return rewrite_429_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && true && true && true) {
    return rewrite_429_27(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[173] && true && true && true && true) {
    return rewrite_429_28(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && true && true) {
    return rewrite_429_29(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[121] && true && true && true) {
    return rewrite_429_30(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && true && true && true) {
    return rewrite_429_31(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && true && true && true) {
    return rewrite_429_32(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[20] && true && true && true && true && true) {
    return rewrite_429_33(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[121] && true && true && true) {
    return rewrite_429_34(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[33] && true && true && true) {
    return rewrite_429_35(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && true && true) {
    return rewrite_429_36(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && true && true) {
    return rewrite_429_37(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && true && true && true) {
    return rewrite_429_38(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[79] && true && true) {
    return rewrite_429_39(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[14] && true && true && true && true && true && true) {
    return rewrite_429_40(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_429_41(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[52] && true && true && true && true) {
    return rewrite_429_42(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[59] && true && true && true && true && true) {
    return rewrite_429_43(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[96] && true && true && true && true && true) {
    return rewrite_429_44(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[133] && true && true && true) {
    return rewrite_429_45(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[143] && true && true && true && true) {
    return rewrite_429_46(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[48] && true && true && true && true) {
    return rewrite_429_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_429(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_0(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_2(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_4(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_5(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_6(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_7(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_8(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_9(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_10(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_12(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_13(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_14(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_18(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_19(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_20(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_21(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_23(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_24(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_25(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_26(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_27(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_28(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_29(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_30(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_31(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_32(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_33(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_34(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_35(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_36(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_38(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_39(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_40(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_41(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_42(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_43(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_44(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_45(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_46(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_47(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_48(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_49(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_50(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_51(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_52(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_53(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_54(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_55(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_56(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_57(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_58(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_59(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_60(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_61(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_62(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_63(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true && true) {
    return rewrite_457_64(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_65(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true && true) {
    return rewrite_457_66(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_457_67(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && predicates[77] && true) {
    return rewrite_457_68(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_69(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[169] && true && true && true) {
    return rewrite_457_70(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true && true) {
    return rewrite_457_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_457(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_0(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_2(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_6(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_8(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_11(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_13(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_14(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_16(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_17(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_18(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_19(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_20(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_21(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_22(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_23(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_24(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_25(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_26(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_27(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_28(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_29(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_30(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_31(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_32(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_33(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_34(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_35(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_36(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_37(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_38(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_39(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_40(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_41(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_42(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_43(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_44(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_45(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_46(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_47(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_48(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_49(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_50(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_51(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_52(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_53(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_54(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_55(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_56(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_57(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_58(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_59(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_60(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_61(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_62(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_63(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[130] && true && true && true) {
    return rewrite_466_64(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[2] && true && true && true && true && true) {
    return rewrite_466_65(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_66(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[101] && true && true && true && true && true && true) {
    return rewrite_466_67(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[87] && true && true && true && true) {
    return rewrite_466_68(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[25] && true && true && true && true) {
    return rewrite_466_69(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_70(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[13] && true && true && true && true && true) {
    return rewrite_466_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_466(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_4(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_6(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_8(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_12(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_13(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_15(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_16(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_17(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_20(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_21(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_23(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_24(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_25(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_26(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_27(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_28(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_29(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_30(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_31(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_32(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_33(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_34(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_35(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[68] && true && true) {
    return rewrite_504_36(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_37(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_38(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_39(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_40(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_41(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_42(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[151] && true && true && true) {
    return rewrite_504_43(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_44(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[156] && true && true && true) {
    return rewrite_504_45(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_46(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[60] && true && true && true && true) {
    return rewrite_504_47(node);
  }
  else {
    return node;
  }
}
Node rewrite_504(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[69] && true && true) {
    return rewrite_613_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[109] && true && true) {
    return rewrite_613_1(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[81] && true) {
    return rewrite_613_2(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[116] && true && predicates[81] && true) {
    return rewrite_613_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && predicates[69] && true && true) {
    return rewrite_613_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && predicates[76] && true && true && true) {
    return rewrite_613_5(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && true && predicates[109] && true && true) {
    return rewrite_613_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && predicates[76] && true && true && true) {
    return rewrite_613_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_613(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[154] && true && predicates[41] && true && predicates[63] && true && true) {
    return rewrite_655_0(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[147] && true && predicates[71] && true && true) {
    return rewrite_655_1(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[122] && predicates[150] && true && true) {
    return rewrite_655_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[122] && true && predicates[168] && true) {
    return rewrite_655_3(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[147] && predicates[112] && true && true && true) {
    return rewrite_655_4(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[16] && true && predicates[119] && true && true && true) {
    return rewrite_655_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[41] && predicates[34] && true && true && true) {
    return rewrite_655_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[16] && predicates[141] && true && true && true && true) {
    return rewrite_655_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_655(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_666_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[109] && true && predicates[118] && true) {
    return rewrite_666_1(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && predicates[68] && predicates[116] && true && true) {
    return rewrite_666_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && true && true && predicates[118] && true) {
    return rewrite_666_3(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_666_4(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && true && true && predicates[118] && true) {
    return rewrite_666_5(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && predicates[68] && true && predicates[81] && true) {
    return rewrite_666_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && true && true && predicates[118] && true) {
    return rewrite_666_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_666(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_674_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_674_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_674_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_674_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_674_4(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_674_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_674_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_674_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_674(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && predicates[44] && true) {
    return rewrite_684_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[15] && true && predicates[118] && true) {
    return rewrite_684_1(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && predicates[125] && true && true && true) {
    return rewrite_684_2(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && predicates[125] && true && true && true) {
    return rewrite_684_3(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && predicates[69] && true && true) {
    return rewrite_684_4(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && predicates[15] && true && predicates[118] && true) {
    return rewrite_684_5(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && predicates[69] && true && true) {
    return rewrite_684_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[129] && true && true && true && predicates[118] && true) {
    return rewrite_684_7(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[76] && true && true && predicates[118] && true) {
    return rewrite_684_8(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && predicates[44] && true) {
    return rewrite_684_9(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && predicates[129] && true && true && true && predicates[118] && true) {
    return rewrite_684_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && predicates[76] && true && true && predicates[118] && true) {
    return rewrite_684_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_684(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_687_0(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_687_1(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && predicates[165] && true && true && predicates[19] && true) {
    return rewrite_687_2(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_687_3(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && predicates[165] && true && true && predicates[19] && true) {
    return rewrite_687_4(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_687_5(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_687_6(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && predicates[165] && true && true && predicates[19] && true) {
    return rewrite_687_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_687_8(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_687_9(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && predicates[165] && true && true && predicates[19] && true) {
    return rewrite_687_10(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_687_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_687(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && predicates[73] && predicates[129] && true && true && predicates[118] && true && true) {
    return rewrite_698_0(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && predicates[76] && true && predicates[118] && true && true) {
    return rewrite_698_1(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[19] && predicates[137] && true && predicates[163] && true) {
    return rewrite_698_2(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_698_3(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && predicates[125] && true && true && predicates[19] && true) {
    return rewrite_698_4(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_698_5(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && predicates[76] && true && true && predicates[19] && true) {
    return rewrite_698_6(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[19] && predicates[137] && true && predicates[163] && true) {
    return rewrite_698_7(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && predicates[69] && true && predicates[19] && true) {
    return rewrite_698_8(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[19] && predicates[137] && predicates[159] && true && true) {
    return rewrite_698_9(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && predicates[129] && true && true && true && predicates[19] && true) {
    return rewrite_698_10(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[19] && predicates[137] && predicates[159] && true && true) {
    return rewrite_698_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_698(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_380_0(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_380_1(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_380_2(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_380_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_380_4(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_380_5(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_380_6(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_380_7(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_380_8(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_380_9(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_380_10(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_380_11(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_380_12(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_380_13(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_380_14(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_380_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_380_16(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_380_17(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_380_18(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_380_19(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_380_20(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_380_21(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_380_22(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_380_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_380(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_383_0(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[19] && true) {
    return rewrite_383_1(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_383_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && predicates[19] && true) {
    return rewrite_383_3(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_383_4(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_383_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[19] && true) {
    return rewrite_383_6(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && true) {
    return rewrite_383_7(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && true) {
    return rewrite_383_8(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_383_9(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_383_10(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_383_11(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_383_12(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_383_13(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && true && true) {
    return rewrite_383_14(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && predicates[19] && true) {
    return rewrite_383_15(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_383_16(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && predicates[118] && true && true) {
    return rewrite_383_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && predicates[19] && true) {
    return rewrite_383_18(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_383_19(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && true && true) {
    return rewrite_383_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && predicates[118] && true && true) {
    return rewrite_383_21(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_383_22(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && predicates[19] && true) {
    return rewrite_383_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_383(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_384_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_384_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true) {
    return rewrite_384_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_384_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true) {
    return rewrite_384_4(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_384_5(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_384_6(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_384_7(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_384_8(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_384_9(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_384_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true) {
    return rewrite_384_11(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_384_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[67] && true && true) {
    return rewrite_384_13(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_384_14(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[67] && true && true) {
    return rewrite_384_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_384(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_391_0(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && true) {
    return rewrite_391_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && true) {
    return rewrite_391_2(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_391_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && true) {
    return rewrite_391_4(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_391_5(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && true) {
    return rewrite_391_6(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_391_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && true) {
    return rewrite_391_8(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_391_9(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_391_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_391_11(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_391_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && true) {
    return rewrite_391_13(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_391_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && predicates[151] && true && true && true && true) {
    return rewrite_391_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_391_16(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && predicates[77] && true) {
    return rewrite_391_17(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_391_18(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_391_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && predicates[30] && true && true) {
    return rewrite_391_20(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && predicates[78] && true && true) {
    return rewrite_391_21(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && predicates[68] && true && true && true) {
    return rewrite_391_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && predicates[124] && true && true && true) {
    return rewrite_391_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_391(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_397_0(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_397_1(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && true) {
    return rewrite_397_2(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_397_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_397_4(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && true && true) {
    return rewrite_397_5(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && true && true) {
    return rewrite_397_6(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && true) {
    return rewrite_397_7(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && true && true) {
    return rewrite_397_8(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && true && true) {
    return rewrite_397_9(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_397_10(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_397_11(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_397_12(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_397_13(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_397_14(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && true && true) {
    return rewrite_397_15(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_397_16(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_397_17(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_397_18(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && true) {
    return rewrite_397_19(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && true && true) {
    return rewrite_397_20(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && true && true) {
    return rewrite_397_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && true && true) {
    return rewrite_397_22(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && true) {
    return rewrite_397_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_397(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && node[1][1][0] == node[2][0] && true) {
    return rewrite_398_0(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && node[0][0] == node[2][0][0] && true) {
    return rewrite_398_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && node[0][0][0] == node[2][0] && true) {
    return rewrite_398_2(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && node[1][0][0] == node[2][0] && true) {
    return rewrite_398_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && node[0][0][0] == node[1][0] && true && true) {
    return rewrite_398_4(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[30] && node[0][1] == node[1][1][0] && true) {
    return rewrite_398_5(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[77] && node[0][0] == node[2][1][0]) {
    return rewrite_398_6(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1] && true) {
    return rewrite_398_7(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[31] && true && node[1][1][0] == node[2][1]) {
    return rewrite_398_8(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && node[1][1] == node[2][0][0] && true) {
    return rewrite_398_9(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && node[0][1][0] == node[2][0] && true) {
    return rewrite_398_10(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true && true) {
    return rewrite_398_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[31] && true && node[1][0][0] == node[2][1]) {
    return rewrite_398_12(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[31] && true && node[0][0][0] == node[2][1]) {
    return rewrite_398_13(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && predicates[77] && node[0][1] == node[2][1][0]) {
    return rewrite_398_14(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && predicates[30] && node[0][0] == node[1][1][0] && true) {
    return rewrite_398_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && true && true) {
    return rewrite_398_16(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && predicates[158] && node[1][0] == node[2][0][0] && true) {
    return rewrite_398_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[67] && true && node[0][0][0] == node[1][1] && true) {
    return rewrite_398_18(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && predicates[158] && node[0][1] == node[2][0][0] && true) {
    return rewrite_398_19(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[77] && node[1][0] == node[2][1][0]) {
    return rewrite_398_20(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && true && true) {
    return rewrite_398_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[31] && true && node[0][1][0] == node[2][1]) {
    return rewrite_398_22(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && predicates[77] && node[1][1] == node[2][1][0]) {
    return rewrite_398_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_398(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && true) {
    return rewrite_404_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_404_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_404_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && true) {
    return rewrite_404_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_404_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && true) {
    return rewrite_404_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && true) {
    return rewrite_404_6(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_404_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_404_8(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_404_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_404_10(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && predicates[68] && true && true) {
    return rewrite_404_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && true) {
    return rewrite_404_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && true) {
    return rewrite_404_13(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && true) {
    return rewrite_404_14(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && predicates[151] && true && true && true) {
    return rewrite_404_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_404(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && true) {
    return rewrite_412_0(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_412_1(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_412_2(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && true) {
    return rewrite_412_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_412_4(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && true) {
    return rewrite_412_5(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_412_6(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && true) {
    return rewrite_412_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && true) {
    return rewrite_412_8(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_412_9(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_412_10(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_412_11(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_412_12(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_412_13(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_412_14(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_412_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_412_16(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_412_17(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[67] && true && true && true) {
    return rewrite_412_18(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_412_19(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && true) {
    return rewrite_412_20(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[31] && true && true) {
    return rewrite_412_21(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[31] && true && true) {
    return rewrite_412_22(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_412_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_412(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_417_0(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_417_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true) {
    return rewrite_417_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_417_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true) {
    return rewrite_417_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_417_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true) {
    return rewrite_417_6(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_417_7(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true) {
    return rewrite_417_8(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true) {
    return rewrite_417_9(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_417_10(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_417_11(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_417_12(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true) {
    return rewrite_417_13(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_417_14(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && predicates[122] && true && true && true) {
    return rewrite_417_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true) {
    return rewrite_417_16(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true) {
    return rewrite_417_17(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && predicates[16] && true && true && true && true && true) {
    return rewrite_417_18(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && predicates[18] && true && true && true) {
    return rewrite_417_19(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && predicates[147] && true && true && true && true) {
    return rewrite_417_20(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && predicates[28] && true && true) {
    return rewrite_417_21(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true) {
    return rewrite_417_22(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && predicates[41] && true && true && true && true) {
    return rewrite_417_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_417(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true) {
    return rewrite_420_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true) {
    return rewrite_420_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_420_2(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_420_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_420_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true) {
    return rewrite_420_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_420_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true) {
    return rewrite_420_7(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true) {
    return rewrite_420_8(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true) {
    return rewrite_420_9(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true) {
    return rewrite_420_10(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_420_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true) {
    return rewrite_420_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true) {
    return rewrite_420_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_420_14(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_420_15(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_420_16(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_420_17(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_420_18(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && predicates[156] && true && true && true) {
    return rewrite_420_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true) {
    return rewrite_420_20(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && predicates[124] && true && true) {
    return rewrite_420_21(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && predicates[60] && true && true && true && true) {
    return rewrite_420_22(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && predicates[30] && true) {
    return rewrite_420_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_420(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_0(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_4(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_5(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_6(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_7(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_8(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_9(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_10(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_11(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_12(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_13(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_14(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_16(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_17(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_18(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && predicates[67] && true && true) {
    return rewrite_425_19(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_20(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_21(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_22(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_425_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_425(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && true && true) {
    return rewrite_431_0(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && true && true && true) {
    return rewrite_431_1(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && true && true && true) {
    return rewrite_431_2(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_431_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && true) {
    return rewrite_431_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && predicates[163] && true && true) {
    return rewrite_431_5(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && true && true) {
    return rewrite_431_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && true && true && true) {
    return rewrite_431_7(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && true) {
    return rewrite_431_8(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && predicates[166] && true && true && true && true) {
    return rewrite_431_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && predicates[81] && true && true) {
    return rewrite_431_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_431_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && true && true && true) {
    return rewrite_431_12(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && true && true && true) {
    return rewrite_431_13(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && predicates[116] && true && true && true) {
    return rewrite_431_14(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && predicates[56] && true && true) {
    return rewrite_431_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && predicates[129] && true && true && true && true && true) {
    return rewrite_431_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && predicates[76] && true && true && true && true) {
    return rewrite_431_17(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && predicates[125] && true && true && true && true) {
    return rewrite_431_18(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && predicates[159] && true && true && true) {
    return rewrite_431_19(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && true && true && true) {
    return rewrite_431_20(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && predicates[109] && true && true && true) {
    return rewrite_431_21(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && predicates[145] && true) {
    return rewrite_431_22(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && predicates[69] && true && true && true) {
    return rewrite_431_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_431(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && true) {
    return rewrite_453_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && true && true) {
    return rewrite_453_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && true && true && true) {
    return rewrite_453_2(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_453_3(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && true && true && true) {
    return rewrite_453_4(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_453_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && true) {
    return rewrite_453_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && true && true) {
    return rewrite_453_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && true) {
    return rewrite_453_8(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && predicates[125] && true && true && true && true) {
    return rewrite_453_9(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && true && true) {
    return rewrite_453_10(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && predicates[44] && true && true) {
    return rewrite_453_11(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && predicates[116] && true && true && true) {
    return rewrite_453_12(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && predicates[166] && true && true && true && true) {
    return rewrite_453_13(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && predicates[129] && true && true && true && true && true) {
    return rewrite_453_14(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_453_15(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && predicates[81] && true && true) {
    return rewrite_453_16(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && predicates[76] && true && true && true && true) {
    return rewrite_453_17(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && predicates[171] && true) {
    return rewrite_453_18(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && true && true) {
    return rewrite_453_19(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && predicates[15] && true && true && true) {
    return rewrite_453_20(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && predicates[54] && true && true) {
    return rewrite_453_21(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && predicates[109] && true && true && true) {
    return rewrite_453_22(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && predicates[69] && true && true && true) {
    return rewrite_453_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_453(TNode node, const bool* predicates) {
  if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && true) {
    return rewrite_454_0(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && true) {
    return rewrite_454_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && true) {
    return rewrite_454_2(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && true) {
    return rewrite_454_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_454_4(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && true) {
    return rewrite_454_5(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_454_6(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_454_7(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && predicates[113] && true && true && true) {
    return rewrite_454_8(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && true) {
    return rewrite_454_9(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && true) {
    return rewrite_454_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true && true) {
    return rewrite_454_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && true) {
    return rewrite_454_12(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_454_13(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_454_14(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_454_15(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && true) {
    return rewrite_454_16(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_454_17(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true && true) {
    return rewrite_454_18(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_454_19(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_454_20(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && predicates[42] && true && true) {
    return rewrite_454_21(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true && true) {
    return rewrite_454_22(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true && true) {
    return rewrite_454_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_454(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true) {
    return rewrite_496_0(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true) {
    return rewrite_496_1(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && true) {
    return rewrite_496_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && true) {
    return rewrite_496_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[48] && true && true && true) {
    return rewrite_496_4(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && true) {
    return rewrite_496_5(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[52] && true && true && true) {
    return rewrite_496_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && true) {
    return rewrite_496_7(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[20] && true && true && true && true) {
    return rewrite_496_8(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true) {
    return rewrite_496_9(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true) {
    return rewrite_496_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[14] && true && true && true && true && true) {
    return rewrite_496_11(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[96] && true && true && true && true) {
    return rewrite_496_12(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[173] && true && true && true) {
    return rewrite_496_13(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[59] && true && true && true && true) {
    return rewrite_496_14(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[133] && true && true) {
    return rewrite_496_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_496(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[132] && predicates[53] && true && true && predicates[55] && true && true) {
    return rewrite_522_0(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && predicates[93] && true && true && true) {
    return rewrite_522_1(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && predicates[93] && true && true && true) {
    return rewrite_522_2(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && predicates[55] && true && true) {
    return rewrite_522_3(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && predicates[55] && true && true) {
    return rewrite_522_4(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && predicates[55] && true && true) {
    return rewrite_522_5(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && predicates[55] && true && true) {
    return rewrite_522_6(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && predicates[93] && true && true && true) {
    return rewrite_522_7(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && predicates[93] && true && true && true) {
    return rewrite_522_8(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && predicates[93] && true && true && true) {
    return rewrite_522_9(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && predicates[55] && true && true) {
    return rewrite_522_10(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && predicates[93] && true && true && true) {
    return rewrite_522_11(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && predicates[55] && true && true) {
    return rewrite_522_12(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && predicates[93] && true && true && true) {
    return rewrite_522_13(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && predicates[93] && true && true && true) {
    return rewrite_522_14(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && predicates[55] && true && true) {
    return rewrite_522_15(node);
  }
  else {
    return node;
  }
}
Node rewrite_522(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && true && true && true) {
    return rewrite_524_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && true && true && true && true) {
    return rewrite_524_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && true && true && true) {
    return rewrite_524_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && true && true && true && true) {
    return rewrite_524_3(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && true && true) {
    return rewrite_524_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && true && true && true) {
    return rewrite_524_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && true && true && true && true) {
    return rewrite_524_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && true && true && true && true) {
    return rewrite_524_7(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && true && true) {
    return rewrite_524_8(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && true && true) {
    return rewrite_524_9(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && true && true && true) {
    return rewrite_524_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && true && true && true) {
    return rewrite_524_11(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && true && true) {
    return rewrite_524_12(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && true && true && true) {
    return rewrite_524_13(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && true && true && true && true) {
    return rewrite_524_14(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && true && true && true) {
    return rewrite_524_15(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[101] && true && true && true && true && true) {
    return rewrite_524_16(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && true && true) {
    return rewrite_524_17(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && true && true && true) {
    return rewrite_524_18(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && true && true && true) {
    return rewrite_524_19(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[32] && true && true && true) {
    return rewrite_524_20(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && true && true && true) {
    return rewrite_524_21(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[13] && true && true && true && true) {
    return rewrite_524_22(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[70] && true && true && true && true) {
    return rewrite_524_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_524(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && true && predicates[118] && predicates[165] && predicates[125] && true && true) {
    return rewrite_568_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && predicates[76] && true && predicates[118] && true) {
    return rewrite_568_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && predicates[129] && true && true && predicates[118] && true) {
    return rewrite_568_2(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[165] && true && predicates[69] && true) {
    return rewrite_568_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_568(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[73] && predicates[129] && true && predicates[76] && true && true) {
    return rewrite_679_0(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[165] && predicates[125] && true && predicates[69] && true) {
    return rewrite_679_1(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[165] && predicates[125] && true && predicates[69] && true) {
    return rewrite_679_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && predicates[129] && true && predicates[76] && true && true) {
    return rewrite_679_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_679(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_379_0(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_379_1(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && predicates[118] && true && true) {
    return rewrite_379_2(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_379_3(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_379_4(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && predicates[19] && true) {
    return rewrite_379_5(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_379_6(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && predicates[19] && true) {
    return rewrite_379_7(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_379_8(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && predicates[19] && true) {
    return rewrite_379_9(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && predicates[118] && true && true) {
    return rewrite_379_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && predicates[19] && true) {
    return rewrite_379_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_379(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[118] && true) {
    return rewrite_401_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_401_1(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_401_2(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && predicates[118] && true) {
    return rewrite_401_3(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && predicates[118] && true) {
    return rewrite_401_4(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_401_5(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_401_6(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_401_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_401(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && node[0][0][0] == node[1][0] && true) {
    return rewrite_414_0(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[30] && node[0][0] == node[1][1][0]) {
    return rewrite_414_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[30] && node[0][1] == node[1][1][0]) {
    return rewrite_414_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][0] == node[1][0][0] && true) {
    return rewrite_414_3(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && node[0][1][0] == node[1][1]) {
    return rewrite_414_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && node[0][0][0] == node[1][1]) {
    return rewrite_414_5(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && node[0][1][0] == node[1][0] && true) {
    return rewrite_414_6(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && node[0][1] == node[1][0][0] && true) {
    return rewrite_414_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_414(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_421_0(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && predicates[166] && true && true && true) {
    return rewrite_421_1(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && predicates[81] && true) {
    return rewrite_421_2(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && predicates[116] && true && true) {
    return rewrite_421_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_421_4(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && predicates[76] && true && true && true) {
    return rewrite_421_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && predicates[129] && true && true && true && true) {
    return rewrite_421_6(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && predicates[109] && true && true) {
    return rewrite_421_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_421(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true) {
    return rewrite_446_0(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_446_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && predicates[147] && true && true && true) {
    return rewrite_446_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_446_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true) {
    return rewrite_446_4(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[30] && predicates[4] && true && true) {
    return rewrite_446_5(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && predicates[84] && true && true && true) {
    return rewrite_446_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && predicates[16] && true && true && true && true) {
    return rewrite_446_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_446(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_449_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && true) {
    return rewrite_449_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_449_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_449_3(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[124] && true && predicates[67] && true && true) {
    return rewrite_449_4(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_449_5(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_449_6(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && predicates[67] && true && true) {
    return rewrite_449_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_449(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[154] && true && predicates[41] && true && true && true) {
    return rewrite_458_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[16] && true && true && true && true) {
    return rewrite_458_1(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[147] && true && true && true) {
    return rewrite_458_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && predicates[147] && true && true && true) {
    return rewrite_458_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && predicates[41] && true && true && true) {
    return rewrite_458_4(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && predicates[16] && true && true && true && true) {
    return rewrite_458_5(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[122] && true && true) {
    return rewrite_458_6(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && predicates[122] && true && true) {
    return rewrite_458_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_458(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_0(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_1(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_2(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_3(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_4(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_5(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_6(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_7(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_8(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_11(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_12(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_13(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_14(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_15(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_16(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_17(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_18(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_19(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_20(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_21(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_22(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_23(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_24(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_25(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_26(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_27(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_28(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_29(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_30(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_31(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_32(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_33(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_34(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_35(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_36(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_37(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_38(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_39(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_40(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_41(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_42(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_43(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_44(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_45(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_46(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_47(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_48(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_49(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_50(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_51(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_52(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_53(node);
  }
  else if (predicates[155] && predicates[102] && predicates[162] && true && true && true && true && true && true) {
    return rewrite_459_54(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_55(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_56(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_57(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_58(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_59(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_60(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_61(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_62(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_63(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_64(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[51] && true && true && true && true) {
    return rewrite_459_65(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[60] && true && true && true && true && true) {
    return rewrite_459_66(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[169] && true && true && true) {
    return rewrite_459_67(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_68(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_69(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[74] && true && true && true && true && true) {
    return rewrite_459_70(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[156] && true && true && true && true) {
    return rewrite_459_71(node);
  }
  else {
    return node;
  }
}
Node rewrite_459(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && predicates[73] && true && predicates[76] && true && true && true) {
    return rewrite_461_0(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_461_1(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && predicates[129] && true && true && true && true) {
    return rewrite_461_2(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[137] && predicates[159] && true && true) {
    return rewrite_461_3(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_461_4(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[137] && true && predicates[163] && true) {
    return rewrite_461_5(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && predicates[69] && true && true) {
    return rewrite_461_6(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && predicates[125] && true && true && true) {
    return rewrite_461_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && predicates[76] && true && true && true) {
    return rewrite_461_8(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[137] && predicates[159] && true && true) {
    return rewrite_461_9(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[137] && true && predicates[163] && true) {
    return rewrite_461_10(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && predicates[129] && true && true && true && true) {
    return rewrite_461_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_461(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[118] && true && true) {
    return rewrite_518_0(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[19] && true) {
    return rewrite_518_1(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_518_2(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_518_3(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[19] && true) {
    return rewrite_518_4(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_518_5(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_518_6(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_518_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && predicates[19] && true) {
    return rewrite_518_8(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_518_9(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && predicates[118] && true && true) {
    return rewrite_518_10(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && predicates[19] && true) {
    return rewrite_518_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_518(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && true) {
    return rewrite_521_0(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && true) {
    return rewrite_521_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && true && predicates[118] && true) {
    return rewrite_521_2(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && true) {
    return rewrite_521_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && true && predicates[118] && true) {
    return rewrite_521_4(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && true) {
    return rewrite_521_5(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && true) {
    return rewrite_521_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && true && predicates[118] && true) {
    return rewrite_521_7(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && true && predicates[118] && true) {
    return rewrite_521_8(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && true && predicates[118] && true) {
    return rewrite_521_9(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[74] && true && true && true) {
    return rewrite_521_10(node);
  }
  else if (predicates[66] && predicates[136] && predicates[162] && true && true && true && predicates[118] && true) {
    return rewrite_521_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_521(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[73] && predicates[14] && true && true && true && true) {
    return rewrite_531_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && predicates[59] && true && true && true) {
    return rewrite_531_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && predicates[14] && true && true && true && true) {
    return rewrite_531_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[165] && true && predicates[48] && true && true) {
    return rewrite_531_3(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[165] && true && predicates[48] && true && true) {
    return rewrite_531_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[165] && predicates[96] && true && true && true) {
    return rewrite_531_5(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[165] && predicates[96] && true && true && true) {
    return rewrite_531_6(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && predicates[59] && true && true && true) {
    return rewrite_531_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_531(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_389_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && true) {
    return rewrite_389_1(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_389_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && predicates[118] && true) {
    return rewrite_389_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_389(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[118] && predicates[165] && predicates[125] && true && true) {
    return rewrite_434_0(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[165] && true && predicates[69] && true) {
    return rewrite_434_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && predicates[129] && true && true && true) {
    return rewrite_434_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && predicates[76] && true && true) {
    return rewrite_434_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_434(TNode node, const bool* predicates) {
  if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_0(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_1(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_2(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_3(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_4(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_5(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_6(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_7(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_8(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_9(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_10(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_11(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_12(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_13(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_14(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_15(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_16(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_17(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_18(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_19(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_20(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_21(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[144] && true && true && true && true) {
    return rewrite_452_22(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_23(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_24(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_25(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_26(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_27(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_28(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_29(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_30(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_31(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_32(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_33(node);
  }
  else if (predicates[155] && predicates[136] && predicates[22] && true && true && true && true && true) {
    return rewrite_452_34(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[37] && true && true && true) {
    return rewrite_452_35(node);
  }
  else {
    return node;
  }
}
Node rewrite_452(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_0(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_3(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_4(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_5(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_6(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_7(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_8(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_9(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_10(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_11(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_12(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_13(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_14(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_15(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_16(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_17(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_18(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_19(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_20(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && predicates[67] && true && true) {
    return rewrite_483_21(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_22(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[152] && true && true && true) {
    return rewrite_483_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_483(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_492_0(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_492_1(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_492_2(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_492_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && true) {
    return rewrite_492_4(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_492_5(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && true) {
    return rewrite_492_6(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_492_7(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && true) {
    return rewrite_492_8(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_492_9(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_492_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_492_11(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_492_12(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_492_13(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && true) {
    return rewrite_492_14(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[137] && true && true && true) {
    return rewrite_492_15(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[151] && true && true && true && true) {
    return rewrite_492_16(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && true) {
    return rewrite_492_17(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && true) {
    return rewrite_492_18(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_492_19(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[165] && true && true && true && true) {
    return rewrite_492_20(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[68] && true && true && true) {
    return rewrite_492_21(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[78] && true && true) {
    return rewrite_492_22(node);
  }
  else if (predicates[155] && predicates[102] && predicates[73] && true && true && true && true && true) {
    return rewrite_492_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_492(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_502_0(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_502_1(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_502_2(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_502_3(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_502_4(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_502_5(node);
  }
  else {
    return node;
  }
}
Node rewrite_502(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && true) {
    return rewrite_707_0(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && true) {
    return rewrite_707_1(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && true) {
    return rewrite_707_2(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_707_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && true) {
    return rewrite_707_4(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && true) {
    return rewrite_707_5(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && true) {
    return rewrite_707_6(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && true) {
    return rewrite_707_7(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_707_8(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && true) {
    return rewrite_707_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_707_10(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && true) {
    return rewrite_707_11(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && true) {
    return rewrite_707_12(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_707_13(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_707_14(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_707_15(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && true) {
    return rewrite_707_16(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && true) {
    return rewrite_707_17(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && true) {
    return rewrite_707_18(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_707_19(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && true) {
    return rewrite_707_20(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[67] && true && true && true) {
    return rewrite_707_21(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[31] && true && true) {
    return rewrite_707_22(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[31] && true && true) {
    return rewrite_707_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_707(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_709_0(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_709_1(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_709_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && true) {
    return rewrite_709_3(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && true) {
    return rewrite_709_4(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_709_5(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_709_6(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_709_7(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_709_8(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_709_9(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && true) {
    return rewrite_709_10(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && true) {
    return rewrite_709_11(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && true) {
    return rewrite_709_12(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && true) {
    return rewrite_709_13(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_709_14(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && true) {
    return rewrite_709_15(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && true) {
    return rewrite_709_16(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[74] && true && true && true && true) {
    return rewrite_709_17(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && true) {
    return rewrite_709_18(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && true) {
    return rewrite_709_19(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[60] && true && true && true && true) {
    return rewrite_709_20(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_709_21(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[156] && true && true && true) {
    return rewrite_709_22(node);
  }
  else if (predicates[66] && predicates[102] && predicates[162] && true && true && true && true && true) {
    return rewrite_709_23(node);
  }
  else {
    return node;
  }
}
Node rewrite_709(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && predicates[151] && true && true && true) {
    return rewrite_396_0(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_396_1(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && true) {
    return rewrite_396_2(node);
  }
  else if (predicates[66] && predicates[102] && true && predicates[151] && true && true && true) {
    return rewrite_396_3(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[165] && true && true && true) {
    return rewrite_396_4(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_396_5(node);
  }
  else if (predicates[66] && predicates[102] && predicates[73] && true && true && true && true) {
    return rewrite_396_6(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[68] && true && true) {
    return rewrite_396_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_396(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && predicates[22] && true && true && true && true) {
    return rewrite_428_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && true) {
    return rewrite_428_1(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_428_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && true) {
    return rewrite_428_3(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && true) {
    return rewrite_428_4(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_428_5(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && true) {
    return rewrite_428_6(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_428_7(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_428_8(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_428_9(node);
  }
  else if (predicates[66] && predicates[136] && predicates[22] && true && true && true && true) {
    return rewrite_428_10(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[144] && true && true && true) {
    return rewrite_428_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_428(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && predicates[73] && true && true && true && true) {
    return rewrite_433_0(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_433_1(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && true) {
    return rewrite_433_2(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_433_3(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_433_4(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_433_5(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_433_6(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_433_7(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && true) {
    return rewrite_433_8(node);
  }
  else if (predicates[155] && true && true && predicates[19] && predicates[137] && true && true) {
    return rewrite_433_9(node);
  }
  else if (predicates[155] && true && predicates[118] && predicates[165] && true && true && true) {
    return rewrite_433_10(node);
  }
  else if (predicates[155] && predicates[136] && predicates[73] && true && true && true && true) {
    return rewrite_433_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_433(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_436_0(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_436_1(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_436_2(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && true) {
    return rewrite_436_3(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && true) {
    return rewrite_436_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_436_5(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && predicates[77] && true) {
    return rewrite_436_6(node);
  }
  else if (predicates[155] && true && predicates[67] && predicates[174] && true && true && true) {
    return rewrite_436_7(node);
  }
  else if (predicates[155] && true && predicates[67] && true && predicates[30] && true && true) {
    return rewrite_436_8(node);
  }
  else if (predicates[155] && predicates[102] && true && predicates[124] && true && true && true) {
    return rewrite_436_9(node);
  }
  else if (predicates[155] && true && true && predicates[31] && predicates[158] && true && true) {
    return rewrite_436_10(node);
  }
  else if (predicates[155] && predicates[102] && predicates[160] && true && true && true && true) {
    return rewrite_436_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_436(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[123] && true && predicates[93] && true && true && true) {
    return rewrite_485_0(node);
  }
  else if (predicates[66] && true && predicates[132] && true && predicates[55] && true && true) {
    return rewrite_485_1(node);
  }
  else if (predicates[66] && predicates[123] && true && predicates[93] && true && true && true) {
    return rewrite_485_2(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && true && true) {
    return rewrite_485_3(node);
  }
  else if (predicates[66] && predicates[123] && predicates[154] && true && true && true && true) {
    return rewrite_485_4(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && true) {
    return rewrite_485_5(node);
  }
  else if (predicates[66] && true && predicates[132] && predicates[53] && true && true && true) {
    return rewrite_485_6(node);
  }
  else if (predicates[66] && true && predicates[132] && true && predicates[55] && true && true) {
    return rewrite_485_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_485(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && true && predicates[67] && true && true) {
    return rewrite_486_0(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && true) {
    return rewrite_486_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && true) {
    return rewrite_486_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && true) {
    return rewrite_486_3(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && true) {
    return rewrite_486_4(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && true) {
    return rewrite_486_5(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && true) {
    return rewrite_486_6(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[67] && true && true) {
    return rewrite_486_7(node);
  }
  else {
    return node;
  }
}
Node rewrite_486(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_528_0(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && true) {
    return rewrite_528_1(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && true) {
    return rewrite_528_2(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[67] && true && true && true) {
    return rewrite_528_3(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && true) {
    return rewrite_528_4(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && predicates[19] && true) {
    return rewrite_528_5(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_528_6(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[31] && true && true) {
    return rewrite_528_7(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[31] && true && true) {
    return rewrite_528_8(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && true) {
    return rewrite_528_9(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && predicates[19] && true) {
    return rewrite_528_10(node);
  }
  else if (predicates[155] && predicates[102] && true && true && predicates[118] && true && true) {
    return rewrite_528_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_528(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && predicates[124] && true && true) {
    return rewrite_378_0(node);
  }
  else if (predicates[66] && predicates[102] && predicates[160] && true && true && true) {
    return rewrite_378_1(node);
  }
  else if (predicates[66] && true && predicates[67] && true && predicates[30] && true) {
    return rewrite_378_2(node);
  }
  else if (predicates[66] && true && predicates[67] && predicates[174] && true && true) {
    return rewrite_378_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_378(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[118] && predicates[53] && true && true) {
    return rewrite_406_0(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && true && true) {
    return rewrite_406_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[154] && true && true && true) {
    return rewrite_406_2(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[53] && true && true) {
    return rewrite_406_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_406(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_432_0(node);
  }
  else if (predicates[66] && true && predicates[118] && predicates[165] && true && true) {
    return rewrite_432_1(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && true) {
    return rewrite_432_2(node);
  }
  else if (predicates[66] && predicates[136] && predicates[73] && true && true && true) {
    return rewrite_432_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_432(TNode node, const bool* predicates) {
  if (predicates[155] && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_484_0(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[19] && true) {
    return rewrite_484_1(node);
  }
  else if (predicates[155] && true && predicates[118] && true && predicates[19] && true) {
    return rewrite_484_2(node);
  }
  else if (predicates[155] && predicates[136] && true && true && predicates[19] && true) {
    return rewrite_484_3(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && true) {
    return rewrite_484_4(node);
  }
  else if (predicates[155] && predicates[136] && true && predicates[118] && true && true) {
    return rewrite_484_5(node);
  }
  else {
    return node;
  }
}
Node rewrite_484(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[102] && true && true && predicates[118] && true) {
    return rewrite_489_0(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && true) {
    return rewrite_489_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && predicates[118] && true) {
    return rewrite_489_2(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[67] && true && true) {
    return rewrite_489_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_489(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && true && predicates[118] && true) {
    return rewrite_366_0(node);
  }
  else if (predicates[66] && predicates[136] && true && predicates[118] && true) {
    return rewrite_366_1(node);
  }
  else {
    return node;
  }
}
Node rewrite_366(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[102] && true && true && true && true) {
    return rewrite_494_0(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && true) {
    return rewrite_494_1(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && true) {
    return rewrite_494_2(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && true) {
    return rewrite_494_3(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && true) {
    return rewrite_494_4(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && true) {
    return rewrite_494_5(node);
  }
  else if (predicates[155] && predicates[102] && true && true && true && true) {
    return rewrite_494_6(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && true) {
    return rewrite_494_7(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && true) {
    return rewrite_494_8(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && true) {
    return rewrite_494_9(node);
  }
  else if (predicates[155] && true && predicates[67] && true && true && true) {
    return rewrite_494_10(node);
  }
  else if (predicates[155] && true && true && predicates[31] && true && true) {
    return rewrite_494_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_494(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[35] && true && true && true && true) {
    return rewrite_498_0(node);
  }
  else if (predicates[66] && true && predicates[45] && true && true && true) {
    return rewrite_498_1(node);
  }
  else if (predicates[66] && predicates[35] && true && true && true && true) {
    return rewrite_498_2(node);
  }
  else if (predicates[66] && predicates[35] && true && true && true && true) {
    return rewrite_498_3(node);
  }
  else if (predicates[66] && predicates[35] && true && true && true && true) {
    return rewrite_498_4(node);
  }
  else if (predicates[66] && true && predicates[45] && true && true && true) {
    return rewrite_498_5(node);
  }
  else if (predicates[66] && true && predicates[45] && true && true && true) {
    return rewrite_498_6(node);
  }
  else if (predicates[66] && predicates[35] && true && true && true && true) {
    return rewrite_498_7(node);
  }
  else if (predicates[66] && true && predicates[45] && true && true && true) {
    return rewrite_498_8(node);
  }
  else if (predicates[66] && predicates[35] && true && true && true && true) {
    return rewrite_498_9(node);
  }
  else if (predicates[66] && true && predicates[45] && true && true && true) {
    return rewrite_498_10(node);
  }
  else if (predicates[66] && true && predicates[45] && true && true && true) {
    return rewrite_498_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_498(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[17] && true && true && true && true) {
    return rewrite_508_0(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && true) {
    return rewrite_508_1(node);
  }
  else if (predicates[66] && true && predicates[152] && true && true && true) {
    return rewrite_508_2(node);
  }
  else if (predicates[66] && true && predicates[152] && true && true && true) {
    return rewrite_508_3(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && true) {
    return rewrite_508_4(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && true) {
    return rewrite_508_5(node);
  }
  else if (predicates[66] && true && predicates[152] && true && true && true) {
    return rewrite_508_6(node);
  }
  else if (predicates[66] && true && predicates[152] && true && true && true) {
    return rewrite_508_7(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && true) {
    return rewrite_508_8(node);
  }
  else if (predicates[66] && true && predicates[152] && true && true && true) {
    return rewrite_508_9(node);
  }
  else if (predicates[66] && predicates[17] && true && true && true && true) {
    return rewrite_508_10(node);
  }
  else if (predicates[66] && true && predicates[152] && true && true && true) {
    return rewrite_508_11(node);
  }
  else {
    return node;
  }
}
Node rewrite_508(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[67] && true && true) {
    return rewrite_390_0(node);
  }
  else if (predicates[66] && true && predicates[67] && true && true) {
    return rewrite_390_1(node);
  }
  else if (predicates[66] && predicates[102] && true && true && true) {
    return rewrite_390_2(node);
  }
  else if (predicates[66] && predicates[102] && true && true && true) {
    return rewrite_390_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_390(TNode node, const bool* predicates) {
  if (predicates[155] && predicates[136] && true && true && true) {
    return rewrite_441_0(node);
  }
  else if (predicates[155] && true && predicates[118] && true && true) {
    return rewrite_441_1(node);
  }
  else if (predicates[155] && true && true && predicates[19] && true) {
    return rewrite_441_2(node);
  }
  else if (predicates[155] && predicates[136] && true && true && true) {
    return rewrite_441_3(node);
  }
  else if (predicates[155] && true && predicates[118] && true && true) {
    return rewrite_441_4(node);
  }
  else if (predicates[155] && true && true && predicates[19] && true) {
    return rewrite_441_5(node);
  }
  else {
    return node;
  }
}
Node rewrite_441(TNode node, const bool* predicates) {
  if (predicates[66] && true && predicates[132] && true && true) {
    return rewrite_491_0(node);
  }
  else if (predicates[66] && predicates[123] && true && true && true) {
    return rewrite_491_1(node);
  }
  else if (predicates[66] && true && predicates[132] && true && true) {
    return rewrite_491_2(node);
  }
  else if (predicates[66] && predicates[123] && true && true && true) {
    return rewrite_491_3(node);
  }
  else {
    return node;
  }
}
Node rewrite_491(TNode node, const bool* predicates) {
  if (predicates[66] && predicates[136] && true && true) {
    return rewrite_368_0(node);
  }
  else if (predicates[66] && true && predicates[118] && true) {
    return rewrite_368_1(node);
  }
  else {
    return node;
  }
}
Node rewrite_368(TNode node, const bool* predicates) {
  if (predicates[155] && true && true && true) {
    return rewrite_382_0(node);
  }
  else if (predicates[155] && true && true && true) {
    return rewrite_382_1(node);
  }
  else if (predicates[155] && true && true && true) {
    return rewrite_382_2(node);
  }
  else if (predicates[155] && true && true && true) {
    return rewrite_382_3(node);
  }
  else if (predicates[155] && true && true && true) {
    return rewrite_382_4(node);
  }
  else if (predicates[155] && true && true && true) {
    return rewrite_382_5(node);
  }
  else {
    return node;
  }
}
Node rewrite_382(TNode node, const bool* predicates) {
  if (predicates[66] && true && true) {
    return rewrite_705_0(node);
  }
  else if (predicates[66] && true && true) {
    return rewrite_705_1(node);
  }
  else {
    return node;
  }
}
RewriteResponse TheoryBVSpecialRewriter::RewriteBITVECTOR_AND(TNode node,  bool prewrite) {
  bool predicates[175];
  for (int i = 0; i < 175; i++) {
    predicates[i] = false;
  }
  predicates[66] = node.getKind() == kind::BITVECTOR_AND && node.getNumChildren() == 2;
  predicates[155] = node.getKind() == kind::BITVECTOR_AND && node.getNumChildren() == 3;
  if (node.getNumChildren() > 0) {
    predicates[17] = node[0].getKind() == kind::BITVECTOR_OR && node[0].getNumChildren() == 3;
    predicates[35] = node[0].getKind() == kind::BITVECTOR_XOR && node[0].getNumChildren() == 3;
    predicates[102] = node[0].getKind() == kind::BITVECTOR_OR && node[0].getNumChildren() == 2;
    predicates[123] = node[0].getKind() == kind::BITVECTOR_XOR && node[0].getNumChildren() == 2;
    predicates[136] = node[0].getKind() == kind::BITVECTOR_NOT && node[0].getNumChildren() == 1;
    if (node[0].getNumChildren() > 0) {
      predicates[22] = node[0][0].getKind() == kind::BITVECTOR_OR && node[0][0].getNumChildren() == 3;
      predicates[73] = node[0][0].getKind() == kind::BITVECTOR_AND && node[0][0].getNumChildren() == 2;
      predicates[154] = node[0][0].getKind() == kind::BITVECTOR_OR && node[0][0].getNumChildren() == 2;
      predicates[160] = node[0][0].getKind() == kind::BITVECTOR_NOT && node[0][0].getNumChildren() == 1;
      predicates[162] = node[0][0].getKind() == kind::BITVECTOR_AND && node[0][0].getNumChildren() == 3;
      if (node[0][0].getNumChildren() > 1) {
        predicates[41] = node[0][0][1].getKind() == kind::BITVECTOR_AND && node[0][0][1].getNumChildren() == 2;
        predicates[59] = node[0][0][1].getKind() == kind::BITVECTOR_OR && node[0][0][1].getNumChildren() == 2;
        predicates[70] = node[0][0][1].getKind() == kind::BITVECTOR_AND && node[0][0][1].getNumChildren() == 3;
        predicates[76] = node[0][0][1].getKind() == kind::BITVECTOR_NOT && node[0][0][1].getNumChildren() == 1;
        if (node[0][0][1].getNumChildren() > 0) {
          predicates[34] = node[0][0][1][0].getKind() == kind::BITVECTOR_NOT && node[0][0][1][0].getNumChildren() == 1;
          predicates[86] = node[0][0][1][0].getKind() == kind::BITVECTOR_AND && node[0][0][1][0].getNumChildren() == 2;
          predicates[98] = node[0][0][1][0].getKind() == kind::BITVECTOR_OR && node[0][0][1][0].getNumChildren() == 2;
        }
        if (node[0][0][1].getNumChildren() > 1) {
          predicates[63] = node[0][0][1][1].getKind() == kind::BITVECTOR_NOT && node[0][0][1][1].getNumChildren() == 1;
          predicates[103] = node[0][0][1][1].getKind() == kind::BITVECTOR_OR && node[0][0][1][1].getNumChildren() == 2;
          predicates[111] = node[0][0][1][1].getKind() == kind::BITVECTOR_AND && node[0][0][1][1].getNumChildren() == 2;
        }
        if (node[0][0][1].getNumChildren() > 2) {
          predicates[100] = node[0][0][1][2].getKind() == kind::BITVECTOR_NOT && node[0][0][1][2].getNumChildren() == 1;
        }
      }
      if (node[0][0].getNumChildren() > 2) {
        predicates[15] = node[0][0][2].getKind() == kind::BITVECTOR_NOT && node[0][0][2].getNumChildren() == 1;
        predicates[18] = node[0][0][2].getKind() == kind::BITVECTOR_AND && node[0][0][2].getNumChildren() == 2;
        predicates[143] = node[0][0][2].getKind() == kind::BITVECTOR_OR && node[0][0][2].getNumChildren() == 2;
        if (node[0][0][2].getNumChildren() > 1) {
          predicates[64] = node[0][0][2][1].getKind() == kind::BITVECTOR_NOT && node[0][0][2][1].getNumChildren() == 1;
        }
        if (node[0][0][2].getNumChildren() > 0) {
          predicates[95] = node[0][0][2][0].getKind() == kind::BITVECTOR_AND && node[0][0][2][0].getNumChildren() == 2;
          predicates[157] = node[0][0][2][0].getKind() == kind::BITVECTOR_NOT && node[0][0][2][0].getNumChildren() == 1;
        }
      }
      if (node[0][0].getNumChildren() > 0) {
        predicates[14] = node[0][0][0].getKind() == kind::BITVECTOR_OR && node[0][0][0].getNumChildren() == 2;
        predicates[16] = node[0][0][0].getKind() == kind::BITVECTOR_AND && node[0][0][0].getNumChildren() == 2;
        predicates[101] = node[0][0][0].getKind() == kind::BITVECTOR_AND && node[0][0][0].getNumChildren() == 3;
        predicates[129] = node[0][0][0].getKind() == kind::BITVECTOR_NOT && node[0][0][0].getNumChildren() == 1;
        if (node[0][0][0].getNumChildren() > 1) {
          predicates[0] = node[0][0][0][1].getKind() == kind::BITVECTOR_OR && node[0][0][0][1].getNumChildren() == 2;
          predicates[43] = node[0][0][0][1].getKind() == kind::BITVECTOR_AND && node[0][0][0][1].getNumChildren() == 2;
          predicates[119] = node[0][0][0][1].getKind() == kind::BITVECTOR_NOT && node[0][0][0][1].getNumChildren() == 1;
        }
        if (node[0][0][0].getNumChildren() > 0) {
          predicates[23] = node[0][0][0][0].getKind() == kind::BITVECTOR_OR && node[0][0][0][0].getNumChildren() == 2;
          predicates[92] = node[0][0][0][0].getKind() == kind::BITVECTOR_AND && node[0][0][0][0].getNumChildren() == 2;
          predicates[141] = node[0][0][0][0].getKind() == kind::BITVECTOR_NOT && node[0][0][0][0].getNumChildren() == 1;
        }
        if (node[0][0][0].getNumChildren() > 2) {
          predicates[1] = node[0][0][0][2].getKind() == kind::BITVECTOR_NOT && node[0][0][0][2].getNumChildren() == 1;
        }
      }
    }
    if (node[0].getNumChildren() > 1) {
      predicates[60] = node[0][1].getKind() == kind::BITVECTOR_AND && node[0][1].getNumChildren() == 3;
      predicates[93] = node[0][1].getKind() == kind::BITVECTOR_OR && node[0][1].getNumChildren() == 2;
      predicates[124] = node[0][1].getKind() == kind::BITVECTOR_NOT && node[0][1].getNumChildren() == 1;
      predicates[151] = node[0][1].getKind() == kind::BITVECTOR_AND && node[0][1].getNumChildren() == 2;
      if (node[0][1].getNumChildren() > 2) {
        predicates[54] = node[0][1][2].getKind() == kind::BITVECTOR_NOT && node[0][1][2].getNumChildren() == 1;
        predicates[121] = node[0][1][2].getKind() == kind::BITVECTOR_OR && node[0][1][2].getNumChildren() == 2;
        if (node[0][1][2].getNumChildren() > 0) {
          predicates[10] = node[0][1][2][0].getKind() == kind::BITVECTOR_NOT && node[0][1][2][0].getNumChildren() == 1;
          predicates[107] = node[0][1][2][0].getKind() == kind::BITVECTOR_AND && node[0][1][2][0].getNumChildren() == 2;
        }
        if (node[0][1][2].getNumChildren() > 1) {
          predicates[40] = node[0][1][2][1].getKind() == kind::BITVECTOR_NOT && node[0][1][2][1].getNumChildren() == 1;
        }
      }
      if (node[0][1].getNumChildren() > 1) {
        predicates[109] = node[0][1][1].getKind() == kind::BITVECTOR_NOT && node[0][1][1].getNumChildren() == 1;
        predicates[173] = node[0][1][1].getKind() == kind::BITVECTOR_OR && node[0][1][1].getNumChildren() == 2;
        if (node[0][1][1].getNumChildren() > 1) {
          predicates[39] = node[0][1][1][1].getKind() == kind::BITVECTOR_NOT && node[0][1][1][1].getNumChildren() == 1;
          predicates[115] = node[0][1][1][1].getKind() == kind::BITVECTOR_AND && node[0][1][1][1].getNumChildren() == 2;
        }
        if (node[0][1][1].getNumChildren() > 0) {
          predicates[12] = node[0][1][1][0].getKind() == kind::BITVECTOR_AND && node[0][1][1][0].getNumChildren() == 2;
          predicates[65] = node[0][1][1][0].getKind() == kind::BITVECTOR_NOT && node[0][1][1][0].getNumChildren() == 1;
        }
      }
      if (node[0][1].getNumChildren() > 0) {
        predicates[2] = node[0][1][0].getKind() == kind::BITVECTOR_AND && node[0][1][0].getNumChildren() == 3;
        predicates[20] = node[0][1][0].getKind() == kind::BITVECTOR_OR && node[0][1][0].getNumChildren() == 2;
        predicates[84] = node[0][1][0].getKind() == kind::BITVECTOR_AND && node[0][1][0].getNumChildren() == 2;
        predicates[166] = node[0][1][0].getKind() == kind::BITVECTOR_NOT && node[0][1][0].getNumChildren() == 1;
        if (node[0][1][0].getNumChildren() > 1) {
          predicates[8] = node[0][1][0][1].getKind() == kind::BITVECTOR_AND && node[0][1][0][1].getNumChildren() == 2;
          predicates[61] = node[0][1][0][1].getKind() == kind::BITVECTOR_NOT && node[0][1][0][1].getNumChildren() == 1;
          predicates[110] = node[0][1][0][1].getKind() == kind::BITVECTOR_OR && node[0][1][0][1].getNumChildren() == 2;
        }
        if (node[0][1][0].getNumChildren() > 2) {
          predicates[167] = node[0][1][0][2].getKind() == kind::BITVECTOR_NOT && node[0][1][0][2].getNumChildren() == 1;
        }
        if (node[0][1][0].getNumChildren() > 0) {
          predicates[29] = node[0][1][0][0].getKind() == kind::BITVECTOR_OR && node[0][1][0][0].getNumChildren() == 2;
          predicates[57] = node[0][1][0][0].getKind() == kind::BITVECTOR_NOT && node[0][1][0][0].getNumChildren() == 1;
          predicates[105] = node[0][1][0][0].getKind() == kind::BITVECTOR_AND && node[0][1][0][0].getNumChildren() == 2;
        }
      }
    }
  }
  if (node.getNumChildren() > 1) {
    predicates[45] = node[1].getKind() == kind::BITVECTOR_XOR && node[1].getNumChildren() == 3;
    predicates[67] = node[1].getKind() == kind::BITVECTOR_OR && node[1].getNumChildren() == 2;
    predicates[118] = node[1].getKind() == kind::BITVECTOR_NOT && node[1].getNumChildren() == 1;
    predicates[132] = node[1].getKind() == kind::BITVECTOR_XOR && node[1].getNumChildren() == 2;
    predicates[152] = node[1].getKind() == kind::BITVECTOR_OR && node[1].getNumChildren() == 3;
    if (node[1].getNumChildren() > 1) {
      predicates[30] = node[1][1].getKind() == kind::BITVECTOR_NOT && node[1][1].getNumChildren() == 1;
      predicates[55] = node[1][1].getKind() == kind::BITVECTOR_OR && node[1][1].getNumChildren() == 2;
      predicates[68] = node[1][1].getKind() == kind::BITVECTOR_AND && node[1][1].getNumChildren() == 2;
      predicates[156] = node[1][1].getKind() == kind::BITVECTOR_AND && node[1][1].getNumChildren() == 3;
      if (node[1][1].getNumChildren() > 0) {
        predicates[4] = node[1][1][0].getKind() == kind::BITVECTOR_AND && node[1][1][0].getNumChildren() == 2;
        predicates[52] = node[1][1][0].getKind() == kind::BITVECTOR_OR && node[1][1][0].getNumChildren() == 2;
        predicates[87] = node[1][1][0].getKind() == kind::BITVECTOR_AND && node[1][1][0].getNumChildren() == 3;
        predicates[116] = node[1][1][0].getKind() == kind::BITVECTOR_NOT && node[1][1][0].getNumChildren() == 1;
        if (node[1][1][0].getNumChildren() > 2) {
          predicates[153] = node[1][1][0][2].getKind() == kind::BITVECTOR_NOT && node[1][1][0][2].getNumChildren() == 1;
        }
        if (node[1][1][0].getNumChildren() > 1) {
          predicates[6] = node[1][1][0][1].getKind() == kind::BITVECTOR_OR && node[1][1][0][1].getNumChildren() == 2;
          predicates[126] = node[1][1][0][1].getKind() == kind::BITVECTOR_NOT && node[1][1][0][1].getNumChildren() == 1;
          predicates[172] = node[1][1][0][1].getKind() == kind::BITVECTOR_AND && node[1][1][0][1].getNumChildren() == 2;
        }
        if (node[1][1][0].getNumChildren() > 0) {
          predicates[47] = node[1][1][0][0].getKind() == kind::BITVECTOR_AND && node[1][1][0][0].getNumChildren() == 2;
          predicates[99] = node[1][1][0][0].getKind() == kind::BITVECTOR_OR && node[1][1][0][0].getNumChildren() == 2;
          predicates[117] = node[1][1][0][0].getKind() == kind::BITVECTOR_NOT && node[1][1][0][0].getNumChildren() == 1;
        }
      }
      if (node[1][1].getNumChildren() > 2) {
        predicates[79] = node[1][1][2].getKind() == kind::BITVECTOR_OR && node[1][1][2].getNumChildren() == 2;
        predicates[171] = node[1][1][2].getKind() == kind::BITVECTOR_NOT && node[1][1][2].getNumChildren() == 1;
        if (node[1][1][2].getNumChildren() > 1) {
          predicates[24] = node[1][1][2][1].getKind() == kind::BITVECTOR_NOT && node[1][1][2][1].getNumChildren() == 1;
        }
        if (node[1][1][2].getNumChildren() > 0) {
          predicates[131] = node[1][1][2][0].getKind() == kind::BITVECTOR_AND && node[1][1][2][0].getNumChildren() == 2;
          predicates[142] = node[1][1][2][0].getKind() == kind::BITVECTOR_NOT && node[1][1][2][0].getNumChildren() == 1;
        }
      }
      if (node[1][1].getNumChildren() > 1) {
        predicates[81] = node[1][1][1].getKind() == kind::BITVECTOR_NOT && node[1][1][1].getNumChildren() == 1;
        predicates[133] = node[1][1][1].getKind() == kind::BITVECTOR_OR && node[1][1][1].getNumChildren() == 2;
        if (node[1][1][1].getNumChildren() > 1) {
          predicates[9] = node[1][1][1][1].getKind() == kind::BITVECTOR_NOT && node[1][1][1][1].getNumChildren() == 1;
          predicates[89] = node[1][1][1][1].getKind() == kind::BITVECTOR_AND && node[1][1][1][1].getNumChildren() == 2;
        }
        if (node[1][1][1].getNumChildren() > 0) {
          predicates[46] = node[1][1][1][0].getKind() == kind::BITVECTOR_NOT && node[1][1][1][0].getNumChildren() == 1;
          predicates[135] = node[1][1][1][0].getKind() == kind::BITVECTOR_AND && node[1][1][1][0].getNumChildren() == 2;
        }
      }
    }
    if (node[1].getNumChildren() > 0) {
      predicates[53] = node[1][0].getKind() == kind::BITVECTOR_OR && node[1][0].getNumChildren() == 2;
      predicates[74] = node[1][0].getKind() == kind::BITVECTOR_AND && node[1][0].getNumChildren() == 3;
      predicates[144] = node[1][0].getKind() == kind::BITVECTOR_OR && node[1][0].getNumChildren() == 3;
      predicates[165] = node[1][0].getKind() == kind::BITVECTOR_AND && node[1][0].getNumChildren() == 2;
      predicates[174] = node[1][0].getKind() == kind::BITVECTOR_NOT && node[1][0].getNumChildren() == 1;
      if (node[1][0].getNumChildren() > 2) {
        predicates[28] = node[1][0][2].getKind() == kind::BITVECTOR_AND && node[1][0][2].getNumChildren() == 2;
        predicates[33] = node[1][0][2].getKind() == kind::BITVECTOR_OR && node[1][0][2].getNumChildren() == 2;
        predicates[44] = node[1][0][2].getKind() == kind::BITVECTOR_NOT && node[1][0][2].getNumChildren() == 1;
        if (node[1][0][2].getNumChildren() > 0) {
          predicates[75] = node[1][0][2][0].getKind() == kind::BITVECTOR_NOT && node[1][0][2][0].getNumChildren() == 1;
          predicates[83] = node[1][0][2][0].getKind() == kind::BITVECTOR_AND && node[1][0][2][0].getNumChildren() == 2;
        }
        if (node[1][0][2].getNumChildren() > 1) {
          predicates[97] = node[1][0][2][1].getKind() == kind::BITVECTOR_NOT && node[1][0][2][1].getNumChildren() == 1;
        }
      }
      if (node[1][0].getNumChildren() > 0) {
        predicates[13] = node[1][0][0].getKind() == kind::BITVECTOR_AND && node[1][0][0].getNumChildren() == 3;
        predicates[96] = node[1][0][0].getKind() == kind::BITVECTOR_OR && node[1][0][0].getNumChildren() == 2;
        predicates[125] = node[1][0][0].getKind() == kind::BITVECTOR_NOT && node[1][0][0].getNumChildren() == 1;
        predicates[147] = node[1][0][0].getKind() == kind::BITVECTOR_AND && node[1][0][0].getNumChildren() == 2;
        if (node[1][0][0].getNumChildren() > 2) {
          predicates[90] = node[1][0][0][2].getKind() == kind::BITVECTOR_NOT && node[1][0][0][2].getNumChildren() == 1;
        }
        if (node[1][0][0].getNumChildren() > 0) {
          predicates[72] = node[1][0][0][0].getKind() == kind::BITVECTOR_AND && node[1][0][0][0].getNumChildren() == 2;
          predicates[112] = node[1][0][0][0].getKind() == kind::BITVECTOR_NOT && node[1][0][0][0].getNumChildren() == 1;
          predicates[138] = node[1][0][0][0].getKind() == kind::BITVECTOR_OR && node[1][0][0][0].getNumChildren() == 2;
        }
        if (node[1][0][0].getNumChildren() > 1) {
          predicates[58] = node[1][0][0][1].getKind() == kind::BITVECTOR_OR && node[1][0][0][1].getNumChildren() == 2;
          predicates[71] = node[1][0][0][1].getKind() == kind::BITVECTOR_NOT && node[1][0][0][1].getNumChildren() == 1;
          predicates[161] = node[1][0][0][1].getKind() == kind::BITVECTOR_AND && node[1][0][0][1].getNumChildren() == 2;
        }
      }
      if (node[1][0].getNumChildren() > 1) {
        predicates[32] = node[1][0][1].getKind() == kind::BITVECTOR_AND && node[1][0][1].getNumChildren() == 3;
        predicates[48] = node[1][0][1].getKind() == kind::BITVECTOR_OR && node[1][0][1].getNumChildren() == 2;
        predicates[69] = node[1][0][1].getKind() == kind::BITVECTOR_NOT && node[1][0][1].getNumChildren() == 1;
        predicates[122] = node[1][0][1].getKind() == kind::BITVECTOR_AND && node[1][0][1].getNumChildren() == 2;
        if (node[1][0][1].getNumChildren() > 0) {
          predicates[26] = node[1][0][1][0].getKind() == kind::BITVECTOR_OR && node[1][0][1][0].getNumChildren() == 2;
          predicates[149] = node[1][0][1][0].getKind() == kind::BITVECTOR_AND && node[1][0][1][0].getNumChildren() == 2;
          predicates[150] = node[1][0][1][0].getKind() == kind::BITVECTOR_NOT && node[1][0][1][0].getNumChildren() == 1;
        }
        if (node[1][0][1].getNumChildren() > 2) {
          predicates[104] = node[1][0][1][2].getKind() == kind::BITVECTOR_NOT && node[1][0][1][2].getNumChildren() == 1;
        }
        if (node[1][0][1].getNumChildren() > 1) {
          predicates[36] = node[1][0][1][1].getKind() == kind::BITVECTOR_OR && node[1][0][1][1].getNumChildren() == 2;
          predicates[108] = node[1][0][1][1].getKind() == kind::BITVECTOR_AND && node[1][0][1][1].getNumChildren() == 2;
          predicates[168] = node[1][0][1][1].getKind() == kind::BITVECTOR_NOT && node[1][0][1][1].getNumChildren() == 1;
        }
      }
    }
  }
  if (node.getNumChildren() > 2) {
    predicates[19] = node[2].getKind() == kind::BITVECTOR_NOT && node[2].getNumChildren() == 1;
    predicates[31] = node[2].getKind() == kind::BITVECTOR_OR && node[2].getNumChildren() == 2;
    if (node[2].getNumChildren() > 0) {
      predicates[37] = node[2][0].getKind() == kind::BITVECTOR_OR && node[2][0].getNumChildren() == 3;
      predicates[51] = node[2][0].getKind() == kind::BITVECTOR_AND && node[2][0].getNumChildren() == 3;
      predicates[137] = node[2][0].getKind() == kind::BITVECTOR_AND && node[2][0].getNumChildren() == 2;
      predicates[158] = node[2][0].getKind() == kind::BITVECTOR_NOT && node[2][0].getNumChildren() == 1;
      if (node[2][0].getNumChildren() > 0) {
        predicates[25] = node[2][0][0].getKind() == kind::BITVECTOR_AND && node[2][0][0].getNumChildren() == 3;
        predicates[62] = node[2][0][0].getKind() == kind::BITVECTOR_OR && node[2][0][0].getNumChildren() == 2;
        predicates[113] = node[2][0][0].getKind() == kind::BITVECTOR_AND && node[2][0][0].getNumChildren() == 2;
        predicates[159] = node[2][0][0].getKind() == kind::BITVECTOR_NOT && node[2][0][0].getNumChildren() == 1;
        if (node[2][0][0].getNumChildren() > 2) {
          predicates[94] = node[2][0][0][2].getKind() == kind::BITVECTOR_NOT && node[2][0][0][2].getNumChildren() == 1;
        }
        if (node[2][0][0].getNumChildren() > 1) {
          predicates[5] = node[2][0][0][1].getKind() == kind::BITVECTOR_OR && node[2][0][0][1].getNumChildren() == 2;
          predicates[139] = node[2][0][0][1].getKind() == kind::BITVECTOR_NOT && node[2][0][0][1].getNumChildren() == 1;
        }
        if (node[2][0][0].getNumChildren() > 0) {
          predicates[3] = node[2][0][0][0].getKind() == kind::BITVECTOR_AND && node[2][0][0][0].getNumChildren() == 2;
          predicates[7] = node[2][0][0][0].getKind() == kind::BITVECTOR_OR && node[2][0][0][0].getNumChildren() == 2;
          predicates[49] = node[2][0][0][0].getKind() == kind::BITVECTOR_NOT && node[2][0][0][0].getNumChildren() == 1;
        }
      }
      if (node[2][0].getNumChildren() > 2) {
        predicates[21] = node[2][0][2].getKind() == kind::BITVECTOR_AND && node[2][0][2].getNumChildren() == 2;
        predicates[140] = node[2][0][2].getKind() == kind::BITVECTOR_NOT && node[2][0][2].getNumChildren() == 1;
        if (node[2][0][2].getNumChildren() > 1) {
          predicates[80] = node[2][0][2][1].getKind() == kind::BITVECTOR_NOT && node[2][0][2][1].getNumChildren() == 1;
        }
        if (node[2][0][2].getNumChildren() > 0) {
          predicates[148] = node[2][0][2][0].getKind() == kind::BITVECTOR_NOT && node[2][0][2][0].getNumChildren() == 1;
        }
      }
      if (node[2][0].getNumChildren() > 1) {
        predicates[88] = node[2][0][1].getKind() == kind::BITVECTOR_AND && node[2][0][1].getNumChildren() == 2;
        predicates[91] = node[2][0][1].getKind() == kind::BITVECTOR_OR && node[2][0][1].getNumChildren() == 2;
        predicates[163] = node[2][0][1].getKind() == kind::BITVECTOR_NOT && node[2][0][1].getNumChildren() == 1;
        if (node[2][0][1].getNumChildren() > 1) {
          predicates[38] = node[2][0][1][1].getKind() == kind::BITVECTOR_NOT && node[2][0][1][1].getNumChildren() == 1;
        }
        if (node[2][0][1].getNumChildren() > 0) {
          predicates[128] = node[2][0][1][0].getKind() == kind::BITVECTOR_AND && node[2][0][1][0].getNumChildren() == 2;
          predicates[164] = node[2][0][1][0].getKind() == kind::BITVECTOR_NOT && node[2][0][1][0].getNumChildren() == 1;
        }
      }
    }
    if (node[2].getNumChildren() > 1) {
      predicates[77] = node[2][1].getKind() == kind::BITVECTOR_NOT && node[2][1].getNumChildren() == 1;
      predicates[78] = node[2][1].getKind() == kind::BITVECTOR_AND && node[2][1].getNumChildren() == 2;
      predicates[169] = node[2][1].getKind() == kind::BITVECTOR_AND && node[2][1].getNumChildren() == 3;
      if (node[2][1].getNumChildren() > 2) {
        predicates[82] = node[2][1][2].getKind() == kind::BITVECTOR_NOT && node[2][1][2].getNumChildren() == 1;
      }
      if (node[2][1].getNumChildren() > 0) {
        predicates[42] = node[2][1][0].getKind() == kind::BITVECTOR_AND && node[2][1][0].getNumChildren() == 2;
        predicates[56] = node[2][1][0].getKind() == kind::BITVECTOR_NOT && node[2][1][0].getNumChildren() == 1;
        predicates[130] = node[2][1][0].getKind() == kind::BITVECTOR_AND && node[2][1][0].getNumChildren() == 3;
        predicates[170] = node[2][1][0].getKind() == kind::BITVECTOR_OR && node[2][1][0].getNumChildren() == 2;
        if (node[2][1][0].getNumChildren() > 2) {
          predicates[114] = node[2][1][0][2].getKind() == kind::BITVECTOR_NOT && node[2][1][0][2].getNumChildren() == 1;
        }
        if (node[2][1][0].getNumChildren() > 0) {
          predicates[27] = node[2][1][0][0].getKind() == kind::BITVECTOR_AND && node[2][1][0][0].getNumChildren() == 2;
          predicates[106] = node[2][1][0][0].getKind() == kind::BITVECTOR_OR && node[2][1][0][0].getNumChildren() == 2;
          predicates[146] = node[2][1][0][0].getKind() == kind::BITVECTOR_NOT && node[2][1][0][0].getNumChildren() == 1;
        }
        if (node[2][1][0].getNumChildren() > 1) {
          predicates[50] = node[2][1][0][1].getKind() == kind::BITVECTOR_NOT && node[2][1][0][1].getNumChildren() == 1;
          predicates[134] = node[2][1][0][1].getKind() == kind::BITVECTOR_OR && node[2][1][0][1].getNumChildren() == 2;
        }
      }
      if (node[2][1].getNumChildren() > 1) {
        predicates[120] = node[2][1][1].getKind() == kind::BITVECTOR_OR && node[2][1][1].getNumChildren() == 2;
        predicates[145] = node[2][1][1].getKind() == kind::BITVECTOR_NOT && node[2][1][1].getNumChildren() == 1;
        if (node[2][1][1].getNumChildren() > 0) {
          predicates[11] = node[2][1][1][0].getKind() == kind::BITVECTOR_AND && node[2][1][1][0].getNumChildren() == 2;
          predicates[85] = node[2][1][1][0].getKind() == kind::BITVECTOR_NOT && node[2][1][1][0].getNumChildren() == 1;
        }
        if (node[2][1][1].getNumChildren() > 1) {
          predicates[127] = node[2][1][1][1].getKind() == kind::BITVECTOR_NOT && node[2][1][1][1].getNumChildren() == 1;
        }
      }
    }
  }
  Node response;
  response = rewrite_563(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_574(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_535(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_542(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_544(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_546(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_547(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_556(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_557(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_559(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_565(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_566(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_577(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_579(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_583(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_584(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_588(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_598(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_599(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_603(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_607(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_611(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_614(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_620(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_622(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_623(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_626(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_638(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_639(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_640(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_652(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_656(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_661(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_664(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_665(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_677(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_690(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_536(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_537(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_539(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_550(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_554(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_564(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_573(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_575(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_578(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_580(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_586(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_589(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_593(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_600(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_608(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_628(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_635(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_637(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_643(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_646(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_657(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_663(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_668(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_670(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_678(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_686(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_695(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_697(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_700(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_701(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_381(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_408(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_409(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_422(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_429(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_457(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_466(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_504(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_613(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_655(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_666(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_674(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_684(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_687(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_698(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_380(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_383(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_384(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_391(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_397(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_398(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_404(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_412(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_417(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_420(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_425(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_431(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_453(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_454(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_496(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_522(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_524(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_568(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_679(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_379(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_401(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_414(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_421(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_446(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_449(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_458(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_459(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_461(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_518(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_521(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_531(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_389(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_434(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_452(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_483(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_492(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_502(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_707(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_709(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_396(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_428(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_433(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_436(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_485(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_486(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_528(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_378(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_406(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_432(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_484(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_489(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_366(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_494(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_498(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_508(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_390(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_441(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_491(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_368(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_382(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  response = rewrite_705(node, predicates);
  if (response != node) return RewriteResponse(REWRITE_DONE, response);
  if (options::printStats()) TheoryBVSpecialRewriter::counter[1999]++;
  return RewriteResponse(REWRITE_DONE, node);
}
